# This file was generated by Simplicity Studio from the following template:
#   app/esf_common/template/simulation/Makefile-afv2
# Please do not edit it directly.

# This Makefile defines how to build a simulated App Framework application 
# for an SOC.

# Remove all built-in rules.
# All we need is contained within this file.
.SUFFIXES:

# Variables
ifdef E_CC
  CC := $(E_CC)
else
  CC := gcc
endif

# LD is set to CC so that we can properly pull in the necessary object
# files that contain the code that runs prior to main() and is a standard part of
# a GNU C executable.
LD := $(CC)
SHELL := /bin/sh
SIZE := size

# The extra sed expression is to shorten, for example, "CYGWIN_NT-6.1" to just
# "CYGWIN."
UNAME:=$(shell uname -s | sed -e 's/^\(CYGWIN\).*/\1/')

GLOBAL_BASE_DIR := ../../platform/base
GLOBAL_RAIL_LIB_DIR := ../../platform/radio/rail_lib
GLOBAL_EMDRV_DIR := ../../platform/emdrv

# Makefile Variable replacement by sample-apps-regenerate.pl
APP_BUILDER_OUTPUT_DIRECTORY=app/framework/sample-apps/ha-switch/gen/simulation
# Makefile Variable replacement by sample-apps-regenerate.pl
APP_CALLBACK_FILE_DIRECTORY=app/framework/sample-apps/ha-switch
APP_BUILDER_CONFIG_HEADER=$(APP_BUILDER_OUTPUT_DIRECTORY)/HaSwitch.h
APP_BUILDER_STORAGE_FILE=$(APP_BUILDER_OUTPUT_DIRECTORY)/HaSwitch_endpoint_config.h

# Global defines allows the user to add #defines across all files
# All files will be compiled this way and the output directory
# will reflect these additional parameters as well.
# They can be specified on the command-line as follows:
#   make -f Foo.mak GLOBAL_DEFINES=EMBER_TEST
#   make -f Foo.mak GLOBAL_DEFINES="EMBER_TEST SOME_OTHER_DEFINE"
ifdef GLOBAL_DEFINES
  OUTPUT_DIR_GLOBAL_DEFINES_PATH=-$(shell echo $(GLOBAL_DEFINES) | sed -e 's/ /\-/g')
  COMPILER_GLOBAL_DEFINES=-D$(shell echo $(GLOBAL_DEFINES) | sed -e 's/ / \-D/g')
  REAL_ECC_TEST=$(shell echo $(GLOBAL_DEFINES) | sed -e 's/.*\(REAL_ECC\).*/\1/')
  ifeq ($(REAL_ECC_TEST), REAL_ECC)
    REAL_ECC=1
  endif
endif

INCLUDES= \
  -I. \
  -I$(APP_BUILDER_OUTPUT_DIRECTORY) \
  -I./app/framework/cli \
  -I./app/framework/include \
  -I./app/framework/sample-apps/ha-switch/gen/simulation/../../../../../../../../platform/base/hal/micro/unix/simulation/board \
  -I./app/framework/sample-apps/ha-switch/gen/simulation/../../../../../../../../platform/radio/rail_lib/plugin/coexistence/common \
  -I./app/framework/sample-apps/ha-switch/gen/simulation/../../../../../../../../platform/radio/rail_lib/plugin/coexistence/protocol/ieee802154 \
  -I./app/framework/sample-apps/ha-switch/gen/simulation/../../../../../../../../util/plugin/plugin-common/mbedtls \
  -I./app/framework/sample-apps/ha-switch/gen/simulation/../../../../../../../../util/third_party/mbedtls \
  -I./app/framework/sample-apps/ha-switch/gen/simulation/../../../../../../../../util/third_party/mbedtls/include \
  -I./app/framework/sample-apps/ha-switch/gen/simulation/../../../../../../../../util/third_party/mbedtls/include/mbedtls \
  -I./app/framework/sample-apps/ha-switch/gen/simulation/../../../../../../../../util/third_party/mbedtls/sl_crypto/include \
  -I./app/framework/sample-apps/ha-switch/gen/simulation/../../../../../../../../util/third_party/segger/systemview/Config \
  -I./app/framework/sample-apps/ha-switch/gen/simulation/../../../../../../../../util/third_party/segger/systemview/SEGGER \
 \
  -I./app/framework/security \
  -I./app/framework/util \
  -I./app/util \
  -I./app/util/common \
  -I./app/util/serial \
  -I./app/util/zigbee-framework \
  -I$(GLOBAL_BASE_DIR)/ \
  -I$(GLOBAL_BASE_DIR)/hal \
  -I$(GLOBAL_BASE_DIR)/hal/plugin \
  -I$(GLOBAL_BASE_DIR)/hal/micro/generic \
  -I$(GLOBAL_RAIL_LIB_DIR)/plugin \
  -I$(GLOBAL_EMDRV_DIR)/nvm3/inc \
  -I$(GLOBAL_EMDRV_DIR)/nvm3/config \
  -I$(GLOBAL_EMDRV_DIR)/common/inc \
  -I./stack \
  -I./tool/simulator/child \
  -I../..

#MCUDT-14831: the GLOBAL_EMDRV_DIR lines above are a workaround for now

DEFINES= \
  -DPHY_EM250 \
  -DUNIX \
  -DPHY_NULL \
  -DEMBER_TEST \
  -DCONFIGURATION_HEADER=\"app/framework/util/config.h\" \
  -DZA_GENERATED_HEADER=\"$(APP_BUILDER_CONFIG_HEADER)\" \
  -DATTRIBUTE_STORAGE_CONFIGURATION=\"$(APP_BUILDER_STORAGE_FILE)\" \
  -DPLATFORM_HEADER=\"$(GLOBAL_BASE_DIR)/hal/micro/unix/compiler/gcc.h\" \
  -DGENERATED_TOKEN_HEADER=\"$(APP_BUILDER_OUTPUT_DIRECTORY)/HaSwitch_tokens.h\" \
  $(COMPILER_GLOBAL_DEFINES) \
    -DBOARD_SIMULATION \
  -DBOARD_HEADER=\"HaSwitch_board.h\" \
  -DEMBER_AF_API_EMBER_TYPES=\"stack/include/ember-types.h\" \
  -DEMBER_AF_API_DEBUG_PRINT=\"app/framework/util/print.h\" \
  -DEMBER_AF_API_AF_HEADER=\"app/framework/include/af.h\" \
  -DEMBER_AF_API_AF_SECURITY_HEADER=\"app/framework/security/af-security.h\" \
  -DEMBER_AF_API_NEIGHBOR_HEADER=\"stack/include/stack-info.h\" \
  -DEMBER_STACK_ZIGBEE \
  -DMBEDTLS_CONFIG_FILE=\"mbedtls-config-generated.h\" \
  -DEMLIB_USER_CONFIG \
  -DAPPLICATION_TOKEN_HEADER=\"znet-token.h\" \

  -DBOARD_HEADER=\"$(GLOBAL_BASE_DIR)/hal/micro/unix/simulation/board/simulation.h\" \


# Clang warns about many more things than GCC.  The most warnings, by far, are
# about potential cast alignment problems.  To reduce the flood of warnings a
# little, -Wcast-align and -Wno-missing-braces is not used with Clang.
CLANG = $(shell $(CC) 2>&1 | grep -iqs clang ; echo $$?)
ifeq "$(CLANG)" "0"
  WNO_CLANG_WARNINGS= -Wno-cast-align -Wno-missing-braces -Wno-error=pointer-sign
else
  WNO_CLANG_WARNINGS= -Wno-cast-align -Wno-missing-braces -Wno-error=pointer-sign -Wno-error=unused-but-set-variable
endif 

SIMULATION_FILES= \
  tool/simulator/child/child-main.c  \
  tool/simulator/child/spawn.c  \
  tool/simulator/child/timer.c  \
  tool/simulator/child/uart.c

APPLICATION_FILES= \
  $(GLOBAL_BASE_DIR)/hal/ember-base-configuration.c \
  stack/config/ember-configuration.c \
  $(APP_BUILDER_OUTPUT_DIRECTORY)/znet-bookkeeping.c \
  $(APP_BUILDER_OUTPUT_DIRECTORY)/call-command-handler.c \
  $(APP_BUILDER_OUTPUT_DIRECTORY)/callback-stub.c \
  $(APP_BUILDER_OUTPUT_DIRECTORY)/znet-cli.c \
  $(APP_BUILDER_OUTPUT_DIRECTORY)/stack-handler-stub.c \
  $(APP_CALLBACK_FILE_DIRECTORY)/HaSwitch_callbacks.c \
  app/util/common/library.c \
  app/util/serial/command-interpreter2.c \
  app/util/security/security-address-cache.c \
  app/util/zigbee-framework/zigbee-device-common.c \
  app/util/zigbee-framework/zigbee-device-library.c \
  $(SIMULATION_FILES) \
  $(GLOBAL_BASE_DIR)/hal/micro/generic/ash-common.c \
  $(GLOBAL_BASE_DIR)/hal/plugin/buzzer-stub/buzzer-stub.c \
  $(GLOBAL_BASE_DIR)/hal/micro/generic/crc.c \
  $(GLOBAL_BASE_DIR)/hal/micro/generic/led-stub.c \
  $(GLOBAL_BASE_DIR)/hal/micro/generic/mem-util.c \
  $(GLOBAL_BASE_DIR)/hal/micro/generic/token-ram.c \
  $(GLOBAL_BASE_DIR)/hal/micro/unix/simulation/symbol-timer-sim.c \
  $(GLOBAL_BASE_DIR)/hal/micro/unix/simulation/system-timer-sim.c \
  $(GLOBAL_BASE_DIR)/hal/micro/unix/simulation/button.c \
  $(GLOBAL_BASE_DIR)/hal/micro/unix/simulation/micro.c \
  $(GLOBAL_BASE_DIR)/hal/micro/unix/simulation/bootloader.c \
  $(GLOBAL_BASE_DIR)/hal/micro/unix/simulation/fake-eeprom.c \
  $(GLOBAL_BASE_DIR)/hal/micro/unix/simulation/random-sim.c \
  ../../platform/base/hal/plugin/adc/adc-simulator.c \
  app/framework/plugin/address-table/address-table.c \
  app/framework/plugin/address-table/address-table-cli.c \
  ../../platform/base/hal/plugin/antenna-stub/antenna-stub.c \
  app/framework/plugin/button-joining/button-joining.c \
  app/framework/plugin/button-joining/button-joining-cli.c \
  stack/framework/ccm-star.c \
  app/framework/plugin/concentrator/concentrator-support.c \
  app/framework/plugin/concentrator/concentrator-support-cli.c \
  ../../platform/base/hal/plugin/debug-jtag/debug-jtag-sim.c \
  ../../platform/base/hal/plugin/serial/ember-printf.c \
  app/framework/plugin/ezmode-commissioning/ez-mode.c \
  app/framework/plugin/ezmode-commissioning/ez-mode-cli.c \
  app/framework/plugin/form-and-join/form-and-join-afv2.c \
  app/util/common/form-and-join.c \
  app/util/common/form-and-join-node-adapter.c \
  app/framework/plugin/general-response-commands/general-response-commands.c \
  app/framework/plugin/heartbeat/heartbeat.c \
  app/framework/plugin/identify/identify.c \
  app/framework/plugin/identify/identify-cli.c \
  app/framework/plugin/identify-feedback/identify-feedback.c \
  app/framework/plugin-soc/idle-sleep/idle-sleep.c \
  app/framework/plugin-soc/idle-sleep/idle-sleep-cli.c \
  app/framework/plugin-soc/idle-sleep/idle-sleep-soc.c \
  ../../util/third_party/mbedtls/library/aes.c \
  ../../util/third_party/mbedtls/library/aesni.c \
  ../../util/third_party/mbedtls/library/arc4.c \
  ../../util/third_party/mbedtls/library/asn1parse.c \
  ../../util/third_party/mbedtls/library/asn1write.c \
  ../../util/third_party/mbedtls/library/base64.c \
  ../../util/third_party/mbedtls/library/bignum.c \
  ../../util/third_party/mbedtls/library/blowfish.c \
  ../../util/third_party/mbedtls/library/camellia.c \
  ../../util/third_party/mbedtls/library/ccm.c \
  ../../util/third_party/mbedtls/library/certs.c \
  ../../util/third_party/mbedtls/library/cipher.c \
  ../../util/third_party/mbedtls/library/cipher_wrap.c \
  ../../util/third_party/mbedtls/library/cmac.c \
  ../../util/third_party/mbedtls/library/ctr_drbg.c \
  ../../util/third_party/mbedtls/library/debug.c \
  ../../util/third_party/mbedtls/library/des.c \
  ../../util/third_party/mbedtls/library/dhm.c \
  ../../util/third_party/mbedtls/library/ecdh.c \
  ../../util/third_party/mbedtls/library/ecdsa.c \
  ../../util/third_party/mbedtls/library/ecjpake.c \
  ../../util/third_party/mbedtls/library/ecp.c \
  ../../util/third_party/mbedtls/library/ecp_curves.c \
  ../../util/third_party/mbedtls/library/entropy.c \
  ../../util/third_party/mbedtls/library/entropy_poll.c \
  ../../util/third_party/mbedtls/library/error.c \
  ../../util/third_party/mbedtls/library/gcm.c \
  ../../util/third_party/mbedtls/library/havege.c \
  ../../util/third_party/mbedtls/library/hmac_drbg.c \
  ../../util/third_party/mbedtls/library/md.c \
  ../../util/third_party/mbedtls/library/md2.c \
  ../../util/third_party/mbedtls/library/md4.c \
  ../../util/third_party/mbedtls/library/md5.c \
  ../../util/third_party/mbedtls/library/md_wrap.c \
  ../../util/third_party/mbedtls/library/memory_buffer_alloc.c \
  ../../util/third_party/mbedtls/library/net_sockets.c \
  ../../util/third_party/mbedtls/library/oid.c \
  ../../util/third_party/mbedtls/library/padlock.c \
  ../../util/third_party/mbedtls/library/pem.c \
  ../../util/third_party/mbedtls/library/pk.c \
  ../../util/third_party/mbedtls/library/pk_wrap.c \
  ../../util/third_party/mbedtls/library/pkcs11.c \
  ../../util/third_party/mbedtls/library/pkcs12.c \
  ../../util/third_party/mbedtls/library/pkcs5.c \
  ../../util/third_party/mbedtls/library/pkparse.c \
  ../../util/third_party/mbedtls/library/pkwrite.c \
  ../../util/third_party/mbedtls/library/ripemd160.c \
  ../../util/third_party/mbedtls/library/rsa.c \
  ../../util/third_party/mbedtls/library/rsa_internal.c \
  ../../util/third_party/mbedtls/library/sha1.c \
  ../../util/third_party/mbedtls/library/sha256.c \
  ../../util/third_party/mbedtls/library/sha512.c \
  ../../util/third_party/mbedtls/library/ssl_cache.c \
  ../../util/third_party/mbedtls/library/ssl_ciphersuites.c \
  ../../util/third_party/mbedtls/library/ssl_cli.c \
  ../../util/third_party/mbedtls/library/ssl_cookie.c \
  ../../util/third_party/mbedtls/library/ssl_srv.c \
  ../../util/third_party/mbedtls/library/ssl_ticket.c \
  ../../util/third_party/mbedtls/library/ssl_tls.c \
  ../../util/third_party/mbedtls/library/threading.c \
  ../../util/third_party/mbedtls/library/timing.c \
  ../../util/third_party/mbedtls/library/version.c \
  ../../util/third_party/mbedtls/library/version_features.c \
  ../../util/third_party/mbedtls/library/x509.c \
  ../../util/third_party/mbedtls/library/x509_create.c \
  ../../util/third_party/mbedtls/library/x509_crl.c \
  ../../util/third_party/mbedtls/library/x509_crt.c \
  ../../util/third_party/mbedtls/library/x509_csr.c \
  ../../util/third_party/mbedtls/library/x509write_crt.c \
  ../../util/third_party/mbedtls/library/x509write_csr.c \
  ../../util/third_party/mbedtls/library/xtea.c \
  app/framework/plugin/network-find/network-find.c \
  app/framework/plugin/network-find/network-find-cli.c \
  ../../platform/base/hal/plugin/serial/serial.c \
  app/framework/plugin/simple-main/simple-main.c \
  stack/framework/strong-random-api.c \
  app/framework/cli/core-cli.c \
  app/framework/cli/network-cli.c \
  app/framework/cli/option-cli.c \
  app/framework/cli/plugin-cli.c \
  app/framework/cli/security-cli.c \
  app/framework/cli/zcl-cli.c \
  app/framework/cli/zdo-cli.c \
  app/framework/security/af-node.c \
  app/framework/security/af-security-common.c \
  app/framework/security/af-trust-center.c \
  app/framework/security/crypto-state.c \
  app/framework/util/af-event.c \
  app/framework/util/af-main-common.c \
  app/framework/util/attribute-size.c \
  app/framework/util/attribute-storage.c \
  app/framework/util/attribute-table.c \
  app/framework/util/client-api.c \
  app/framework/util/message.c \
  app/framework/util/multi-network.c \
  app/framework/util/print.c \
  app/framework/util/print-formatter.c \
  app/framework/util/process-cluster-message.c \
  app/framework/util/process-global-message.c \
  app/framework/util/service-discovery-common.c \
  app/framework/util/time-util.c \
  app/framework/util/util.c \
  app/framework/util/af-main-soc.c \
  app/framework/util/service-discovery-soc.c \


BUILD_DIR        = build
AF_TEST_APPS_DIR = $(BUILD_DIR)/af-test-apps
# Makefile Variable replacement by sample-apps-regenerate.pl
OUTPUT_DIR=$(AF_TEST_APPS_DIR)/HaSwitch-simulation
# A subtetly exists here.  We use the := variable syntax so we don't do recursive variable
# substitution.  The assumption being that both of these variables don't contain additional
# variables that must be resolved.  I tried using += without any success, and
# so := was the best alternative.
OUTPUT_DIR := $(OUTPUT_DIR)$(OUTPUT_DIR_GLOBAL_DEFINES_PATH)

# Build a list of object files from the source file list, but all objects
# live in the $(OUTPUT_DIR) above.  The list of object files
# created assumes that the file part of the filepath is unique
# (i.e. the bar.c of foo/bar.c is unique across all sub-directories included).
APPLICATION_OBJECTS= $(addprefix $(OUTPUT_DIR)/, $(notdir $(APPLICATION_FILES:.c=.o)))

APP_FILE= $(OUTPUT_DIR)/HaSwitch

CFLAGS= -ggdb -O0 -Wall -Werror $(WNO_CLANG_WARNINGS)
CPPFLAGS= $(DEFINES) $(INCLUDES) -MF $(OUTPUT_DIR)/$(@F:.o=.d) -MMD -MP

LIBRARIES=\
   build/binding-table-library-unix-gcc-simulation-simulation/binding-table-library.a \
  build/cbke-163k1-stub-library-unix-gcc-simulation-simulation/cbke-163k1-stub-library.a \
  build/cbke-283k1-stub-library-unix-gcc-simulation-simulation/cbke-283k1-stub-library.a \
  build/cbke-stub-library-unix-gcc-simulation-simulation/cbke-stub-library.a \
  build/cbke-library-dsa-sign-stub-unix-gcc-simulation-simulation/cbke-library-dsa-sign-stub.a \
  build/cbke-library-dsa-verify-stub-unix-gcc-simulation-simulation/cbke-library-dsa-verify-stub.a \
  build/cbke-library-dsa-verify-283k1-stub-unix-gcc-simulation-simulation/cbke-library-dsa-verify-283k1-stub.a \
  build/debug-basic-library-unix-gcc-simulation-simulation/debug-basic-library.a \
  build/debug-extended-stub-library-unix-gcc-simulation-simulation/debug-extended-stub-library.a \
  build/end-device-bind-stub-library-unix-gcc-simulation-simulation/end-device-bind-stub-library.a \
  build/gp-stub-library-unix-gcc-simulation-simulation/gp-stub-library.a \
  build/hal-library-unix-gcc-simulation-simulation/hal-library.a \
  build/install-code-library-stub-unix-gcc-simulation-simulation/install-code-library-stub.a \
  build/multi-network-stub-library-unix-gcc-simulation-simulation/multi-network-stub-library.a \
  build/packet-validate-library-unix-gcc-simulation-simulation/packet-validate-library.a \
  build/security-library-link-keys-stub-unix-gcc-simulation-simulation/security-library-link-keys-stub.a \
  build/sim-eeprom1-library-unix-gcc-simulation-simulation/sim-eeprom1-library.a \
  build/source-route-library-unix-gcc-simulation-simulation/source-route-library.a \
  build/zigbee-pro-stack-unix-gcc-simulation-simulation/zigbee-pro-stack.a \
  build/zigbee-r22-support-stub-library-unix-gcc-simulation-simulation/zigbee-r22-support-stub-library.a \
  build/zll-stub-library-unix-gcc-simulation-simulation/zll-stub-library.a \
 \
  \
 $(CBKE_AND_ECC_LIBRARIES)

# This variable is only used by sample-apps-regenerate.pl to segregrate the ECC related
# items so it can be built on platforms without ECC (e.g. Mac).
# Passing REAL_ECC=1 will have the effect of including or not including the appropriate
# libraries.  Those libraries can still be configured as Plugins via AppBuilder.
ifdef REAL_ECC
  CBKE_AND_ECC_LIBRARIES=
else
  CBKE_AND_ECC_LIBRARIES=
endif

LINK_FLAGS=

# Rules

.PHONY: all
all: $(APP_FILE)

ifneq ($(MAKECMDGOALS),clean)
-include $(APPLICATION_OBJECTS:.o=.d)
endif

# Order of linking libraries (unfortunately) matters to the GNU linker.
# However by passing --start-group $(ARCHIVES) --end-group we can get it to do
# multiple passes.  Since those are actually GNU ld linker options, we need
# to prefix each option with -Xlinker to pass it through from GCC to ld.
$(APP_FILE): $(APPLICATION_OBJECTS) $(LIBRARIES) | $(OUTPUT_DIR)
ifeq ($(UNAME),Darwin)
	$(LD) $^ $(LINK_FLAGS) -o $(APP_FILE)
else
	$(LD) $(APPLICATION_OBJECTS) $(LINK_FLAGS) -Xlinker --start-group $(LIBRARIES) -Xlinker --end-group -o $(APP_FILE)
endif
	@echo -e '\n$@ build success'
	@echo "Calculating memory usage"
	$(SIZE) $(APP_FILE)

define make-deps 
$(OUTPUT_DIR)/$(notdir $(1:%.c=%.o)): $1 | $(OUTPUT_DIR) 
endef 
 
$(foreach d, $(APPLICATION_FILES), $(eval $(call make-deps,$d))) 
 
%.o :
	$(CC) $(CPPFLAGS) $(CFLAGS) -c -o $@ $<

$(BUILD_DIR):
	@mkdir $@

$(AF_TEST_APPS_DIR): | $(BUILD_DIR)
	@mkdir $@

$(OUTPUT_DIR): | $(AF_TEST_APPS_DIR)
	@mkdir $@

.PHONY: clean
clean:
	rm -rf $(OUTPUT_DIR)

include stack-libs.mak
