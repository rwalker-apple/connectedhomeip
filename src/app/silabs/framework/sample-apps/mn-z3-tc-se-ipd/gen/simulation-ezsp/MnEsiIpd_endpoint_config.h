/**
 *
 *    Copyright (c) 2020 Silicon Labs
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
// This file is generated by Simplicity Studio.  Please do not edit manually.
//
//

// Enclosing macro to prevent multiple inclusion
#ifndef SILABS_AF_ENDPOINT_CONFIG
#define SILABS_AF_ENDPOINT_CONFIG

// Fixed number of defined endpoints
#define FIXED_ENDPOINT_COUNT (2)

// Generated defaults
#if BIGENDIAN_CPU
#define GENERATED_DEFAULTS {                                                                               \
    0xFF, 0xFF, 0xFF, 0xFE /* 0,Maximum value: Time,time */,                                               \
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF /* 4,Maximum value: Simple Metering,current summation delivered */, \
}
#else // ! BIGENDIAN_CPU
#define GENERATED_DEFAULTS {                                                                               \
    0xFE, 0xFF, 0xFF, 0xFF /* 0,Maximum value: Time,time */,                                               \
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF /* 4,Maximum value: Simple Metering,current summation delivered */, \
}
#endif // BIGENDIAN_CPU

// MinMax defaults
#define GENERATED_MIN_MAX_DEFAULTS {     \
    {                                    \
      (uint8_t*)0x03,                    \
      (uint8_t*)0x00,                    \
      (uint8_t*)0xFF                     \
    },                                   \
    {                                    \
      (uint8_t*)0x00,                    \
      (uint8_t*)0x00,                    \
      (uint8_t*)0xFF                     \
    },                                   \
    {                                    \
      NULL,                              \
      NULL,                              \
      (uint8_t*)&(generatedDefaults[0]), \
    },                                   \
    {                                    \
      (uint8_t*)0x00,                    \
      (uint8_t*)0x00,                    \
      (uint8_t*)0x0F                     \
    },                                   \
    {                                    \
      NULL,                              \
      NULL,                              \
      (uint8_t*)&(generatedDefaults[4]), \
    },                                   \
    {                                    \
      (uint8_t*)0x00,                    \
      (uint8_t*)0x00,                    \
      (uint8_t*)0xFF                     \
    },                                   \
    {                                    \
      (uint8_t*)0x00,                    \
      (uint8_t*)0x00,                    \
      (uint8_t*)0xFF                     \
    },                                   \
    {                                    \
      (uint8_t*)0x00,                    \
      (uint8_t*)0x00,                    \
      (uint8_t*)0xFF                     \
    },                                   \
    {                                    \
      (uint8_t*)0x00,                    \
      (uint8_t*)0x00,                    \
      (uint8_t*)0xFF                     \
    },                                   \
    {                                    \
      (uint8_t*)0x0000,                  \
      (uint8_t*)0x0000,                  \
      (uint8_t*)0xFFFF                   \
    },                                   \
    {                                    \
      (uint8_t*)0x0000,                  \
      (uint8_t*)0x0000,                  \
      (uint8_t*)0xFFFF                   \
    },                                   \
}

// Generated attributes
#define GENERATED_ATTRIBUTES {                                                                                                                                                                                                \
    { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MIN_MAX | ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)&(minMaxDefaults[0]) } }, /* 0 / Basic / ZCL version*/                                                            \
    { 0x0007, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MIN_MAX | ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)&(minMaxDefaults[1]) } }, /* 1 / Basic / power source*/                                                           \
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x0001 } }, /* 2 / Basic / cluster revision*/                                                                                             \
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT | ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x0001 } }, /* 3 / Time / cluster revision*/                                                                      \
    { 0x0000, ZCL_UTC_TIME_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_MIN_MAX | ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)&(minMaxDefaults[2]) } }, /* 4 / Time / time*/                                       \
    { 0x0001, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_MIN_MAX | ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)&(minMaxDefaults[3]) } }, /* 5 / Time / time status*/                                 \
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x0001 } }, /* 6 / Time / cluster revision*/                                                                                              \
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x0001 } }, /* 7 / Price / cluster revision*/                                                                                                \
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0001 } }, /* 8 / Price / cluster revision*/                                                                                                                 \
    { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x00 } }, /* 9 / Demand Response and Load Control / utility enrollment group*/                                      \
    { 0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x1E } }, /* 10 / Demand Response and Load Control / start randomization minutes*/                                  \
    { 0x0002, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x00 } }, /* 11 / Demand Response and Load Control / duration randomization minutes*/                               \
    { 0x0003, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE | ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x0000UL } }, /* 12 / Demand Response and Load Control / device class value*/                                      \
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x0001 } }, /* 13 / Demand Response and Load Control / cluster revision*/                                                                    \
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0001 } }, /* 14 / Demand Response and Load Control / cluster revision*/                                                                                     \
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x0001 } }, /* 15 / Simple Metering / cluster revision*/                                                                                     \
    { 0x0000, ZCL_INT48U_ATTRIBUTE_TYPE, 6, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t*)&(minMaxDefaults[4]) } }, /* 16 / Simple Metering / current summation delivered*/                                                           \
    { 0x0200, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t*)&(minMaxDefaults[5]) } }, /* 17 / Simple Metering / status*/                                                                               \
    { 0x0300, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t*)&(minMaxDefaults[6]) } }, /* 18 / Simple Metering / unit of measure*/                                                                        \
    { 0x0303, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t*)&(minMaxDefaults[7]) } }, /* 19 / Simple Metering / summation formatting*/                                                                 \
    { 0x0306, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t*)&(minMaxDefaults[8]) } }, /* 20 / Simple Metering / metering device type*/                                                                 \
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0001 } }, /* 21 / Simple Metering / cluster revision*/                                                                                                      \
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x0001 } }, /* 22 / Messaging / cluster revision*/                                                                                           \
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0001 } }, /* 23 / Messaging / cluster revision*/                                                                                                            \
    { 0x0000, ZCL_ENUM16_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_MIN_MAX | ATTRIBUTE_MASK_CLIENT | ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)&(minMaxDefaults[9]) } }, /* 24 / Key Establishment / key establishment suite (client)*/ \
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT | ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x0001 } }, /* 25 / Key Establishment / cluster revision*/                                                        \
    { 0x0000, ZCL_ENUM16_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_MIN_MAX | ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)&(minMaxDefaults[10]) } }, /* 26 / Key Establishment / key establishment suite (server)*/                        \
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x0001 } }, /* 27 / Key Establishment / cluster revision*/                                                                                \
}

// Cluster function static arrays
#define
  const EmberAfGenericClusterFunction emberAfFuncArrayTimeClusterServer[] = { (EmberAfGenericClusterFunction)emberAfTimeClusterServerInitCallback };                                                                                                                                                                                                                                                                                                                                                                                                          \
  const EmberAfGenericClusterFunction emberAfFuncArrayDemandResponseLoadControlClusterServer[] = { (EmberAfGenericClusterFunction)emberAfDemandResponseLoadControlClusterServerInitCallback };                                                                                                                                                                                                                                                                                                                                                                \
  const EmberAfGenericClusterFunction emberAfFuncArraySimpleMeteringClusterServer[] = { (EmberAfGenericClusterFunction)emberAfSimpleMeteringClusterServerInitCallback, (EmberAfGenericClusterFunction)emberAfSimpleMeteringClusterServerDefaultResponseCallback };                                                                                                                                                                                                                                                                                            \
  const EmberAfGenericClusterFunction emberAfFuncArrayMessagingClusterServer[] = { (EmberAfGenericClusterFunction)emberAfMessagingClusterServerInitCallback };                                                                                                                                                                                                                                                                                                                                                                                                \
  const EmberAfGenericClusterFunction emberAfFuncArrayKeyEstablishmentClusterClient[] = { (EmberAfGenericClusterFunction)emberAfKeyEstablishmentClusterClientAttributeChangedCallback, (EmberAfGenericClusterFunction)emberAfKeyEstablishmentClusterClientDefaultResponseCallback, (EmberAfGenericClusterFunction)emberAfKeyEstablishmentClusterClientMessageSentCallback, (EmberAfGenericClusterFunction)emberAfKeyEstablishmentClusterClientPreAttributeChangedCallback };                                                                                  \
  const EmberAfGenericClusterFunction emberAfFuncArrayKeyEstablishmentClusterServer[] = { (EmberAfGenericClusterFunction)emberAfKeyEstablishmentClusterServerInitCallback, (EmberAfGenericClusterFunction)emberAfKeyEstablishmentClusterServerAttributeChangedCallback, (EmberAfGenericClusterFunction)emberAfKeyEstablishmentClusterServerDefaultResponseCallback, (EmberAfGenericClusterFunction)emberAfKeyEstablishmentClusterServerMessageSentCallback, (EmberAfGenericClusterFunction)emberAfKeyEstablishmentClusterServerPreAttributeChangedCallback }; \
  const EmberAfGenericClusterFunction emberAfFuncArrayDemandResponseLoadControlClusterClient[] = { (EmberAfGenericClusterFunction)emberAfDemandResponseLoadControlClusterClientInitCallback };                                                                                                                                                                                                                                                                                                                                                                \
  const EmberAfGenericClusterFunction emberAfFuncArraySimpleMeteringClusterClient[] = { (EmberAfGenericClusterFunction)emberAfSimpleMeteringClusterClientDefaultResponseCallback };                                                                                                                                                                                                                                                                                                                                                                           \
  const EmberAfGenericClusterFunction emberAfFuncArrayMessagingClusterClient[] = { (EmberAfGenericClusterFunction)emberAfMessagingClusterClientInitCallback };                                                                                                                                                                                                                                                                                                                                                                                                \


// Clusters defitions
#define GENERATED_CLUSTERS {                                                                                                                                                                                                                                                                                                                           \
    { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 3, 0, (CLUSTER_MASK_SERVER), NULL, },                                                                                                                                                                                                                                              \
    { 0x000A, (EmberAfAttributeMetadata*)&(generatedAttributes[4]), 3, 0, (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayTimeClusterServer, },                                                                                                                                                                                    \
    { 0x0700, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 1, 2, (CLUSTER_MASK_SERVER), NULL, },                                                                                                                                                                                                                                              \
    { 0x0701, (EmberAfAttributeMetadata*)&(generatedAttributes[14]), 1, 2, (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayDemandResponseLoadControlClusterServer, },                                                                                                                                                              \
    { 0x0702, (EmberAfAttributeMetadata*)&(generatedAttributes[16]), 6, 12, (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION | CLUSTER_MASK_DEFAULT_RESPONSE_FUNCTION), emberAfFuncArraySimpleMeteringClusterServer, },                                                                                                                               \
    { 0x0703, (EmberAfAttributeMetadata*)&(generatedAttributes[23]), 1, 2, (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayMessagingClusterServer, },                                                                                                                                                                              \
    { 0x0800, (EmberAfAttributeMetadata*)&(generatedAttributes[24]), 2, 0, (CLUSTER_MASK_CLIENT | CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION | CLUSTER_MASK_DEFAULT_RESPONSE_FUNCTION | CLUSTER_MASK_MESSAGE_SENT_FUNCTION | CLUSTER_MASK_PRE_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayKeyEstablishmentClusterClient, },                              \
    { 0x0800, (EmberAfAttributeMetadata*)&(generatedAttributes[26]), 2, 0, (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION | CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION | CLUSTER_MASK_DEFAULT_RESPONSE_FUNCTION | CLUSTER_MASK_MESSAGE_SENT_FUNCTION | CLUSTER_MASK_PRE_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayKeyEstablishmentClusterServer, }, \
    { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 3, 0, (CLUSTER_MASK_SERVER), NULL, },                                                                                                                                                                                                                                              \
    { 0x000A, (EmberAfAttributeMetadata*)&(generatedAttributes[3]), 1, 0, (CLUSTER_MASK_CLIENT), NULL, },                                                                                                                                                                                                                                              \
    { 0x0700, (EmberAfAttributeMetadata*)&(generatedAttributes[7]), 1, 2, (CLUSTER_MASK_CLIENT), NULL, },                                                                                                                                                                                                                                              \
    { 0x0701, (EmberAfAttributeMetadata*)&(generatedAttributes[9]), 5, 7, (CLUSTER_MASK_CLIENT | CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayDemandResponseLoadControlClusterClient, },                                                                                                                                                               \
    { 0x0702, (EmberAfAttributeMetadata*)&(generatedAttributes[15]), 1, 2, (CLUSTER_MASK_CLIENT | CLUSTER_MASK_DEFAULT_RESPONSE_FUNCTION), emberAfFuncArraySimpleMeteringClusterClient, },                                                                                                                                                             \
    { 0x0703, (EmberAfAttributeMetadata*)&(generatedAttributes[22]), 1, 2, (CLUSTER_MASK_CLIENT | CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayMessagingClusterClient, },                                                                                                                                                                              \
    { 0x0800, (EmberAfAttributeMetadata*)&(generatedAttributes[24]), 2, 0, (CLUSTER_MASK_CLIENT | CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION | CLUSTER_MASK_DEFAULT_RESPONSE_FUNCTION | CLUSTER_MASK_MESSAGE_SENT_FUNCTION | CLUSTER_MASK_PRE_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayKeyEstablishmentClusterClient, },                              \
    { 0x0800, (EmberAfAttributeMetadata*)&(generatedAttributes[26]), 2, 0, (CLUSTER_MASK_SERVER | CLUSTER_MASK_INIT_FUNCTION | CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION | CLUSTER_MASK_DEFAULT_RESPONSE_FUNCTION | CLUSTER_MASK_MESSAGE_SENT_FUNCTION | CLUSTER_MASK_PRE_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayKeyEstablishmentClusterServer, }, \
}

// Endpoint types
#define GENERATED_ENDPOINT_TYPES {                       \
    { (EmberAfCluster*)&(generatedClusters[0]), 8, 18 }, \
    { (EmberAfCluster*)&(generatedClusters[8]), 8, 13 }, \
}

// Networks
#define EM_AF_GENERATED_NETWORK_TYPES {                  \
    EM_AF_NETWORK_TYPE_ZIGBEE_PRO, /* Coordinator */     \
    EM_AF_NETWORK_TYPE_ZIGBEE_PRO, /* SleepyEndDevice */ \
}
#define EM_AF_GENERATED_ZIGBEE_PRO_NETWORKS { \
    {                                         \
      /* Coordinator */                       \
      ZA_COORDINATOR,                         \
      EMBER_AF_SECURITY_PROFILE_Z3,           \
    },                                        \
    {                                         \
      /* SleepyEndDevice */                   \
      ZA_SLEEPY_END_DEVICE,                   \
      EMBER_AF_SECURITY_PROFILE_SE_TEST,      \
    },                                        \
}
#define EM_AF_GENERATED_NETWORK_STRINGS \
  "Coordinator (pro)",                  \
  "SleepyEndDevice (pro)",              \


// Cluster manufacturer codes
#define GENERATED_CLUSTER_MANUFACTURER_CODES { \
    { 0x00, 0x00 }                             \
}
#define GENERATED_CLUSTER_MANUFACTURER_CODE_COUNT (0)

// Attribute manufacturer codes
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODES { \
    { 0x00, 0x00 }                               \
}
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODE_COUNT (0)

// Largest attribute size is needed for various buffers
#define ATTRIBUTE_LARGEST (6)
// Total size of singleton attributes
#define ATTRIBUTE_SINGLETONS_SIZE (21)

// Total size of attribute storage
#define ATTRIBUTE_MAX_SIZE 31

// Array of endpoints that are supported
#define FIXED_ENDPOINT_ARRAY { 1, 2 }

// Array of profile ids
#define FIXED_PROFILE_IDS { 265, 265 }

// Array of device ids
#define FIXED_DEVICE_IDS { 1280, 1282 }

// Array of device versions
#define FIXED_DEVICE_VERSIONS { 0, 0 }

// Array of endpoint types supported on each endpoint
#define FIXED_ENDPOINT_TYPES { 0, 1 }

// Array of networks supported on each endpoint
#define FIXED_NETWORKS { 0, 1 }

// Code used to configure the cluster event mechanism
#define EMBER_AF_GENERATED_EVENT_CODE                                                                                                                                                                                                            \
  EmberEventControl emberAfTimeClusterServerTickCallbackControl1;                                                                                                                                                                                \
  EmberEventControl emberAfSimpleMeteringClusterServerTickCallbackControl1;                                                                                                                                                                      \
  EmberEventControl emberAfKeyEstablishmentClusterServerTickCallbackControl1;                                                                                                                                                                    \
  EmberEventControl emberAfDemandResponseLoadControlClusterClientTickCallbackControl2;                                                                                                                                                           \
  EmberEventControl emberAfMessagingClusterClientTickCallbackControl2;                                                                                                                                                                           \
  EmberEventControl emberAfKeyEstablishmentClusterServerTickCallbackControl2;                                                                                                                                                                    \
  extern EmberEventControl emberAfPluginButtonJoiningButton0EventControl;                                                                                                                                                                        \
  extern EmberEventControl emberAfPluginButtonJoiningButton1EventControl;                                                                                                                                                                        \
  extern EmberEventControl emberAfPluginConcentratorUpdateEventControl;                                                                                                                                                                          \
  extern EmberEventControl emberAfPluginFormAndJoinCleanupEventControl;                                                                                                                                                                          \
  extern EmberEventControl emberAfPluginInterpanFragmentReceiveEventControl;                                                                                                                                                                     \
  extern EmberEventControl emberAfPluginInterpanFragmentTransmitEventControl;                                                                                                                                                                    \
  extern EmberEventControl emberAfPluginKeyEstablishmentApsDuplicateDetectionEventControl;                                                                                                                                                       \
  extern EmberEventControl emberAfPluginMnPricePassthroughPollAndForwardEsiEventControl;                                                                                                                                                         \
  extern EmberEventControl emberAfPluginNetworkFindTickEventControl;                                                                                                                                                                             \
  extern EmberEventControl emberAfPluginSimpleMeteringServerSamplingEventControl;                                                                                                                                                                \
  extern EmberEventControl emberAfPluginSimpleMeteringServerSupplyEventControl;                                                                                                                                                                  \
  extern void emberAfPluginButtonJoiningButton0EventHandler(void);                                                                                                                                                                               \
  extern void emberAfPluginButtonJoiningButton1EventHandler(void);                                                                                                                                                                               \
  extern void emberAfPluginConcentratorUpdateEventHandler(void);                                                                                                                                                                                 \
  extern void emberAfPluginFormAndJoinCleanupEventHandler(void);                                                                                                                                                                                 \
  extern void emberAfPluginInterpanFragmentReceiveEventHandler(void);                                                                                                                                                                            \
  extern void emberAfPluginInterpanFragmentTransmitEventHandler(void);                                                                                                                                                                           \
  extern void emberAfPluginKeyEstablishmentApsDuplicateDetectionEventHandler(void);                                                                                                                                                              \
  extern void emberAfPluginMnPricePassthroughPollAndForwardEsiEventHandler(void);                                                                                                                                                                \
  extern void emberAfPluginNetworkFindTickEventHandler(void);                                                                                                                                                                                    \
  extern void emberAfPluginSimpleMeteringServerSamplingEventHandler(void);                                                                                                                                                                       \
  extern void emberAfPluginSimpleMeteringServerSupplyEventHandler(void);                                                                                                                                                                         \
  static void networkEventWrapper(EmberEventControl * control, EmberAfNetworkEventHandler handler, uint8_t networkIndex)                                                                                                                         \
  {                                                                                                                                                                                                                                              \
    emberAfPushNetworkIndex(networkIndex);                                                                                                                                                                                                       \
    emberEventControlSetInactive(*control);                                                                                                                                                                                                      \
    (*handler)();                                                                                                                                                                                                                                \
    emberAfPopNetworkIndex();                                                                                                                                                                                                                    \
  }                                                                                                                                                                                                                                              \
  EmberEventControl emberAfPluginEndDeviceSupportMoveNetworkEventControls[2];                                                                                                                                                                    \
  extern void emberAfPluginEndDeviceSupportMoveNetworkEventHandler(void);                                                                                                                                                                        \
  void emberAfPluginEndDeviceSupportMoveNetworkEventWrapper0(void) { networkEventWrapper(&emberAfPluginEndDeviceSupportMoveNetworkEventControls[0], emberAfPluginEndDeviceSupportMoveNetworkEventHandler, 0); }                                  \
  void emberAfPluginEndDeviceSupportMoveNetworkEventWrapper1(void) { networkEventWrapper(&emberAfPluginEndDeviceSupportMoveNetworkEventControls[1], emberAfPluginEndDeviceSupportMoveNetworkEventHandler, 1); }                                  \
  EmberEventControl emberAfPluginEndDeviceSupportPollingNetworkEventControls[2];                                                                                                                                                                 \
  extern void emberAfPluginEndDeviceSupportPollingNetworkEventHandler(void);                                                                                                                                                                     \
  void emberAfPluginEndDeviceSupportPollingNetworkEventWrapper0(void) { networkEventWrapper(&emberAfPluginEndDeviceSupportPollingNetworkEventControls[0], emberAfPluginEndDeviceSupportPollingNetworkEventHandler, 0); }                         \
  void emberAfPluginEndDeviceSupportPollingNetworkEventWrapper1(void) { networkEventWrapper(&emberAfPluginEndDeviceSupportPollingNetworkEventControls[1], emberAfPluginEndDeviceSupportPollingNetworkEventHandler, 1); }                         \
  EmberEventControl emberAfPluginPartnerLinkKeyExchangeTimeoutNetworkEventControls[2];                                                                                                                                                           \
  extern void emberAfPluginPartnerLinkKeyExchangeTimeoutNetworkEventHandler(void);                                                                                                                                                               \
  void emberAfPluginPartnerLinkKeyExchangeTimeoutNetworkEventWrapper0(void) { networkEventWrapper(&emberAfPluginPartnerLinkKeyExchangeTimeoutNetworkEventControls[0], emberAfPluginPartnerLinkKeyExchangeTimeoutNetworkEventHandler, 0); }       \
  void emberAfPluginPartnerLinkKeyExchangeTimeoutNetworkEventWrapper1(void) { networkEventWrapper(&emberAfPluginPartnerLinkKeyExchangeTimeoutNetworkEventControls[1], emberAfPluginPartnerLinkKeyExchangeTimeoutNetworkEventHandler, 1); }       \
  EmberEventControl emberAfPluginSmartEnergyRegistrationTickNetworkEventControls[2];                                                                                                                                                             \
  extern void emberAfPluginSmartEnergyRegistrationTickNetworkEventHandler(void);                                                                                                                                                                 \
  void emberAfPluginSmartEnergyRegistrationTickNetworkEventWrapper0(void) { networkEventWrapper(&emberAfPluginSmartEnergyRegistrationTickNetworkEventControls[0], emberAfPluginSmartEnergyRegistrationTickNetworkEventHandler, 0); }             \
  void emberAfPluginSmartEnergyRegistrationTickNetworkEventWrapper1(void) { networkEventWrapper(&emberAfPluginSmartEnergyRegistrationTickNetworkEventControls[1], emberAfPluginSmartEnergyRegistrationTickNetworkEventHandler, 1); }             \
  static void clusterTickWrapper(EmberEventControl * control, EmberAfTickFunction callback, uint8_t endpoint)                                                                                                                                    \
  {                                                                                                                                                                                                                                              \
    emberAfPushEndpointNetworkIndex(endpoint);                                                                                                                                                                                                   \
    emberEventControlSetInactive(*control);                                                                                                                                                                                                      \
    (*callback)(endpoint);                                                                                                                                                                                                                       \
    emberAfPopNetworkIndex();                                                                                                                                                                                                                    \
  }                                                                                                                                                                                                                                              \
  void emberAfTimeClusterServerTickCallbackWrapperFunction1(void) { clusterTickWrapper(&emberAfTimeClusterServerTickCallbackControl1, emberAfTimeClusterServerTickCallback, 1); }                                                                \
  void emberAfSimpleMeteringClusterServerTickCallbackWrapperFunction1(void) { clusterTickWrapper(&emberAfSimpleMeteringClusterServerTickCallbackControl1, emberAfSimpleMeteringClusterServerTickCallback, 1); }                                  \
  void emberAfKeyEstablishmentClusterServerTickCallbackWrapperFunction1(void) { clusterTickWrapper(&emberAfKeyEstablishmentClusterServerTickCallbackControl1, emberAfKeyEstablishmentClusterServerTickCallback, 1); }                            \
  void emberAfDemandResponseLoadControlClusterClientTickCallbackWrapperFunction2(void) { clusterTickWrapper(&emberAfDemandResponseLoadControlClusterClientTickCallbackControl2, emberAfDemandResponseLoadControlClusterClientTickCallback, 2); } \
  void emberAfMessagingClusterClientTickCallbackWrapperFunction2(void) { clusterTickWrapper(&emberAfMessagingClusterClientTickCallbackControl2, emberAfMessagingClusterClientTickCallback, 2); }                                                 \
  void emberAfKeyEstablishmentClusterServerTickCallbackWrapperFunction2(void) { clusterTickWrapper(&emberAfKeyEstablishmentClusterServerTickCallbackControl2, emberAfKeyEstablishmentClusterServerTickCallback, 2); }                            \


// EmberEventData structs used to populate the EmberEventData table
#define EMBER_AF_GENERATED_EVENTS                                                                                                                    \
  { &emberAfTimeClusterServerTickCallbackControl1, emberAfTimeClusterServerTickCallbackWrapperFunction1 },                                           \
  { &emberAfSimpleMeteringClusterServerTickCallbackControl1, emberAfSimpleMeteringClusterServerTickCallbackWrapperFunction1 },                       \
  { &emberAfKeyEstablishmentClusterServerTickCallbackControl1, emberAfKeyEstablishmentClusterServerTickCallbackWrapperFunction1 },                   \
  { &emberAfDemandResponseLoadControlClusterClientTickCallbackControl2, emberAfDemandResponseLoadControlClusterClientTickCallbackWrapperFunction2 }, \
  { &emberAfMessagingClusterClientTickCallbackControl2, emberAfMessagingClusterClientTickCallbackWrapperFunction2 },                                 \
  { &emberAfKeyEstablishmentClusterServerTickCallbackControl2, emberAfKeyEstablishmentClusterServerTickCallbackWrapperFunction2 },                   \
  { &emberAfPluginButtonJoiningButton0EventControl, emberAfPluginButtonJoiningButton0EventHandler },                                                 \
  { &emberAfPluginButtonJoiningButton1EventControl, emberAfPluginButtonJoiningButton1EventHandler },                                                 \
  { &emberAfPluginConcentratorUpdateEventControl, emberAfPluginConcentratorUpdateEventHandler },                                                     \
  { &emberAfPluginFormAndJoinCleanupEventControl, emberAfPluginFormAndJoinCleanupEventHandler },                                                     \
  { &emberAfPluginInterpanFragmentReceiveEventControl, emberAfPluginInterpanFragmentReceiveEventHandler },                                           \
  { &emberAfPluginInterpanFragmentTransmitEventControl, emberAfPluginInterpanFragmentTransmitEventHandler },                                         \
  { &emberAfPluginKeyEstablishmentApsDuplicateDetectionEventControl, emberAfPluginKeyEstablishmentApsDuplicateDetectionEventHandler },               \
  { &emberAfPluginMnPricePassthroughPollAndForwardEsiEventControl, emberAfPluginMnPricePassthroughPollAndForwardEsiEventHandler },                   \
  { &emberAfPluginNetworkFindTickEventControl, emberAfPluginNetworkFindTickEventHandler },                                                           \
  { &emberAfPluginSimpleMeteringServerSamplingEventControl, emberAfPluginSimpleMeteringServerSamplingEventHandler },                                 \
  { &emberAfPluginSimpleMeteringServerSupplyEventControl, emberAfPluginSimpleMeteringServerSupplyEventHandler },                                     \
  { &emberAfPluginEndDeviceSupportMoveNetworkEventControls[0], emberAfPluginEndDeviceSupportMoveNetworkEventWrapper0 },                              \
  { &emberAfPluginEndDeviceSupportMoveNetworkEventControls[1], emberAfPluginEndDeviceSupportMoveNetworkEventWrapper1 },                              \
  { &emberAfPluginEndDeviceSupportPollingNetworkEventControls[0], emberAfPluginEndDeviceSupportPollingNetworkEventWrapper0 },                        \
  { &emberAfPluginEndDeviceSupportPollingNetworkEventControls[1], emberAfPluginEndDeviceSupportPollingNetworkEventWrapper1 },                        \
  { &emberAfPluginPartnerLinkKeyExchangeTimeoutNetworkEventControls[0], emberAfPluginPartnerLinkKeyExchangeTimeoutNetworkEventWrapper0 },            \
  { &emberAfPluginPartnerLinkKeyExchangeTimeoutNetworkEventControls[1], emberAfPluginPartnerLinkKeyExchangeTimeoutNetworkEventWrapper1 },            \
  { &emberAfPluginSmartEnergyRegistrationTickNetworkEventControls[0], emberAfPluginSmartEnergyRegistrationTickNetworkEventWrapper0 },                \
  { &emberAfPluginSmartEnergyRegistrationTickNetworkEventControls[1], emberAfPluginSmartEnergyRegistrationTickNetworkEventWrapper1 },                \


#define EMBER_AF_GENERATED_EVENT_STRINGS                      \
  "Time Cluster Server EP 1",                                 \
  "Simple Metering Cluster Server EP 1",                      \
  "Key Establishment Cluster Server EP 1",                    \
  "Demand Response and Load Control Cluster Client EP 2",     \
  "Messaging Cluster Client EP 2",                            \
  "Key Establishment Cluster Server EP 2",                    \
  "Button Form/Join Code Plugin Button0",                     \
  "Button Form/Join Code Plugin Button1",                     \
  "Concentrator Support Plugin Update",                       \
  "Form and Join Library Plugin Cleanup",                     \
  "Interpan Plugin FragmentReceive",                          \
  "Interpan Plugin FragmentTransmit",                         \
  "Key Establishment Plugin ApsDuplicateDetection",           \
  "Multi-Network Price Passthrough Plugin PollAndForwardEsi", \
  "Network Find Plugin Tick",                                 \
  "Simple Metering Server Plugin Sampling",                   \
  "Simple Metering Server Plugin Supply",                     \
  "End Device Support Plugin Move NWK 0",                     \
  "End Device Support Plugin Move NWK 1",                     \
  "End Device Support Plugin Polling NWK 0",                  \
  "End Device Support Plugin Polling NWK 1",                  \
  "Partner Link Key Exchange Plugin Timeout NWK 0",           \
  "Partner Link Key Exchange Plugin Timeout NWK 1",           \
  "Smart Energy Registration Plugin Tick NWK 0",              \
  "Smart Energy Registration Plugin Tick NWK 1",              \


// The length of the event context table used to track and retrieve cluster events
#define EMBER_AF_EVENT_CONTEXT_LENGTH 6

// EmberAfEventContext structs used to populate the EmberAfEventContext table
#define EMBER_AF_GENERATED_EVENT_CONTEXT { 0x1, 0xa, false, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfTimeClusterServerTickCallbackControl1 }, \
  { 0x1, 0x702, false, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfSimpleMeteringClusterServerTickCallbackControl1 },                            \
  { 0x1, 0x800, false, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfKeyEstablishmentClusterServerTickCallbackControl1 },                          \
  { 0x2, 0x701, true, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfDemandResponseLoadControlClusterClientTickCallbackControl2 },                  \
  { 0x2, 0x703, true, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfMessagingClusterClientTickCallbackControl2 },                                  \
  { 0x2, 0x800, false, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfKeyEstablishmentClusterServerTickCallbackControl2 }

#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_DECLARATIONS \
  void emberAfPluginConcentratorInitCallback(void);          \
  void emberAfPluginEsiManagementInitCallback(void);         \
  void emberAfPluginFragmentationInitCallback(void);         \
  void emberAfPluginInterpanInitCallback(void);              \
  void emberAfPluginMnPricePassthroughInitCallback(void);    \
  void emberAfPluginNetworkFindInitCallback(void);           \


#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_CALLS \
  emberAfPluginConcentratorInitCallback();            \
  emberAfPluginEsiManagementInitCallback();           \
  emberAfPluginFragmentationInitCallback();           \
  emberAfPluginInterpanInitCallback();                \
  emberAfPluginMnPricePassthroughInitCallback();      \
  emberAfPluginNetworkFindInitCallback();             \


#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_DECLARATIONS            \
  void emberAfPluginAddressTableNcpInitCallback(bool memoryAllocation);     \
  void emberAfPluginConcentratorNcpInitCallback(bool memoryAllocation);     \
  void emberAfPluginFragmentationNcpInitCallback(bool memoryAllocation);    \
  void emberAfPluginInterpanNcpInitCallback(bool memoryAllocation);         \
  void emberAfPluginNcpConfigurationNcpInitCallback(bool memoryAllocation); \


#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_CALLS         \
  emberAfPluginAddressTableNcpInitCallback(memoryAllocation);     \
  emberAfPluginConcentratorNcpInitCallback(memoryAllocation);     \
  emberAfPluginFragmentationNcpInitCallback(memoryAllocation);    \
  emberAfPluginInterpanNcpInitCallback(memoryAllocation);         \
  emberAfPluginNcpConfigurationNcpInitCallback(memoryAllocation); \


#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_DECLARATIONS         \
  void emberAfPluginConcentratorStackStatusCallback(EmberStatus status);     \
  void emberAfPluginEndDeviceSupportStackStatusCallback(EmberStatus status); \
  void emberAfPluginNetworkFindStackStatusCallback(EmberStatus status);      \


#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_CALLS \
  emberAfPluginConcentratorStackStatusCallback(status);       \
  emberAfPluginEndDeviceSupportStackStatusCallback(status);   \
  emberAfPluginNetworkFindStackStatusCallback(status);        \


#define EMBER_AF_GENERATED_PLUGIN_MESSAGE_SENT_FUNCTION_DECLARATIONS               \
  void emberAfPluginConcentratorMessageSentCallback(EmberOutgoingMessageType type, \
                                                    uint16_t indexOrDestination,   \
                                                    EmberApsFrame * apsFrame,      \
                                                    EmberStatus status,            \
                                                    uint16_t messageLength,        \
                                                    uint8_t * messageContents);    \


#define EMBER_AF_GENERATED_PLUGIN_MESSAGE_SENT_FUNCTION_CALLS      \
  emberAfPluginConcentratorMessageSentCallback(type,               \
                                               indexOrDestination, \
                                               apsFrame,           \
                                               status,             \
                                               messageLength,      \
                                               messageContents);   \

// Generated data for the command discovery
#define GENERATED_COMMANDS {                                                                                                                           \
    { 0x0700, 0x00, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Price / PublishPrice */                                          \
    { 0x0700, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Price / GetCurrentPrice */                                       \
    { 0x0700, 0x02, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Price / PriceAcknowledgement */                                  \
    { 0x0701, 0x00, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Demand Response and Load Control / LoadControlEvent */           \
    { 0x0701, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Demand Response and Load Control / ReportEventStatus */          \
    { 0x0701, 0x01, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Demand Response and Load Control / CancelLoadControlEvent */     \
    { 0x0701, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Demand Response and Load Control / GetScheduledEvents */         \
    { 0x0701, 0x02, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Demand Response and Load Control / CancelAllLoadControlEvents */ \
    { 0x0702, 0x00, COMMAND_MASK_INCOMING_CLIENT }, /* Simple Metering / GetProfileResponse */                                                         \
    { 0x0702, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / GetProfile */                                                                 \
    { 0x0702, 0x01, COMMAND_MASK_INCOMING_CLIENT }, /* Simple Metering / RequestMirror */                                                              \
    { 0x0702, 0x02, COMMAND_MASK_INCOMING_CLIENT }, /* Simple Metering / RemoveMirror */                                                               \
    { 0x0702, 0x03, COMMAND_MASK_INCOMING_CLIENT }, /* Simple Metering / RequestFastPollModeResponse */                                                \
    { 0x0702, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / RequestFastPollMode */                                                        \
    { 0x0702, 0x07, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / StartSampling */                                                              \
    { 0x0702, 0x08, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / GetSampledData */                                                             \
    { 0x0702, 0x09, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / MirrorReportAttributeResponse */                                              \
    { 0x0702, 0x0A, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / ResetLoadLimitCounter */                                                      \
    { 0x0702, 0x0B, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / ChangeSupply */                                                               \
    { 0x0702, 0x0C, COMMAND_MASK_INCOMING_CLIENT }, /* Simple Metering / SupplyStatusResponse */                                                       \
    { 0x0702, 0x0C, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / LocalChangeSupply */                                                          \
    { 0x0702, 0x0D, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / SetSupplyStatus */                                                            \
    { 0x0702, 0x0E, COMMAND_MASK_INCOMING_SERVER }, /* Simple Metering / SetUncontrolledFlowThreshold */                                               \
    { 0x0703, 0x00, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Messaging / DisplayMessage */                                    \
    { 0x0703, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Messaging / GetLastMessage */                                    \
    { 0x0703, 0x01, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Messaging / CancelMessage */                                     \
    { 0x0703, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Messaging / MessageConfirmation */                               \
    { 0x0800, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Key Establishment / InitiateKeyEstablishmentRequest */           \
    { 0x0800, 0x00, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Key Establishment / InitiateKeyEstablishmentResponse */          \
    { 0x0800, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Key Establishment / EphemeralDataRequest */                      \
    { 0x0800, 0x01, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Key Establishment / EphemeralDataResponse */                     \
    { 0x0800, 0x02, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Key Establishment / ConfirmKeyDataRequest */                     \
    { 0x0800, 0x02, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Key Establishment / ConfirmKeyDataResponse */                    \
    { 0x0800, 0x03, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Key Establishment / TerminateKeyEstablishment */                 \
}
#define EMBER_AF_GENERATED_COMMAND_COUNT (34)

// Generated reporting configuration defaults
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS { \
}
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS_TABLE_SIZE (0)
#endif // SILABS_AF_ENDPOINT_CONFIG
