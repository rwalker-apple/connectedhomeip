import com.ember.peek.SimulatedNetwork;

source("util.bsh");

if (runArgument.runUsingMultihop) {
  std.print("****TODO: Fix for multi-hop****");
  return;
} else if (runArgument.runUsingHostApps) {
  std.print("****TODO: Fix for host****");
  return;
}

// Create two nodes in the network.
SimulatedNetwork network = createNetwork();
String[] devices = new String[]{"light", "remote"};

String[] socImages = new String[] {
  "build/af-test-apps/ZllColorLight-simulation/ZllColorLight",
    "build/af-test-apps/ZllColorSceneRemote-simulation/ZllColorSceneRemote",
};
String[] hostImages = new String[] {
  "build/af-test-apps/ZllColorLight-simulation-ezsp/ZllColorLight",
    "build/af-test-apps/ZllColorSceneRemote-simulation-ezsp/ZllColorSceneRemote",
};
String ncpImage = "app/ncp/sample-app/ncp-spi/simulation/build/exe/ncp-spi";

// Create network and load devices according to the runArguments provided.
addAndLoadDevices(devices, socImages, hostImages, ncpImage);

// Turn off debug printing for non-essential areas
debugprintOff("remote", "Attributes");
debugprintOff("remote", "Basic");
debugprintOff("remote", "Identify");
debugprintOff("remote", "Groups");
debugprintOff("remote", "Scenes");
debugprintOff("remote", "On/off");
debugprintOff("remote", "Level Control");
debugprintOff("remote", "ZLL Commissioning");

// Set up encryption and touch link the network.
setupEncryption();
expect("light", "plugin zll-commissioning unused", ".*EMBER_NETWORK_UP.*", timeout * 10);
send("remote", "plugin zll-commissioning link");
expect("light", ".*EMBER_NETWORK_UP.*", timeout * 10);
expect("remote", "EMBER_NETWORK_UP.*", timeout * 10);

String nid1 = nodeId("light");
String nid2 = nodeId("remote");

// Color Control plugin tests

//
// MoveToHue command
//

// Move (shortest distance) to 0x0A over the course of 1 second
expect("remote", "zcl color-control movetohue 0x0A 0x00 0x000A 0x00 0x00", "buffer: 01 [0-9a-fA-F]{2} 00 0A 00 0A 00 00 00 ");

expect("remote", "send " + nid1 + " 1 1", ".*TX.*");

String hueAttributeId        = "0x0000";
String saturationAttributeId = "0x0001";

// Sleep for just over 1 second
networkWait(2000);

void checkColorControlAttribute(String sendingNodeName,
                                String receivingNodeId,
                                String attrValueInHex,
                                String attrReturnValueInHex)
{
  checkAttributeRead(sendingNodeName,
                     receivingNodeId,
                     "Color Control",
                     "0x0300",  // cluster ID
                     attrValueInHex,
                     "0x20",      // attritube type ID (hex)
                     attrReturnValueInHex,
                     getSourceFileInfo(),
                     this.namespace.getInvocationLine());
}

checkColorControlAttribute("remote",
                           nid1,
                           hueAttributeId,
                           "0A");     // value

// Move (longest distance) to 0x00 over the course of 5 seconds
expect("remote", "zcl color-control movetohue 0x00 0x01 0x0032 0x00 0x00", "buffer: 01 [0-9a-fA-F]{2} 00 00 01 32 00 00 00 ");

expect("remote", "send " + nid1 + " 1 1", ".*TX.*");

expect("light", ".*MoveToHue.*");

expect("light", ".*hue=.*");

networkWait(5000);

// Ensure that the hue is what we expect
checkColorControlAttribute("remote",
                           nid1,
                           hueAttributeId,
                           "00");     // value

// Move (up) to 0x0A over the course of 1 second
expect("remote", 
       "zcl color-control movetohue 0x0A 0x02 0x000A 0x00 0x00",
       "buffer: 01 [0-9a-fA-F]{2} 00 0A 02 0A 00 00 00 ");

expect("remote", 
       "send " + nid1 + " 1 1",
       "TX buffer.*");

expectMultiline("light",
                "",
                new String[] {
                  ".*MoveToHue.*",
                  "hue=.*"});

networkWait(1000);

// Ensure that the hue is what we expect
checkColorControlAttribute("remote",
                           nid1,
                           hueAttributeId,
                           "0A");     // value

// Move (down) to 0xF5 over the course of 2 seconds
expect("remote", "zcl color-control movetohue 0xF5 0x03 0x0014 0x00 0x00", "buffer: 01 [0-9a-fA-F]{2} 00 F5 03 14 00 00 00 ");

expect("remote", "send " + nid1 + " 1 1", ".*TX.*");

expect("light", ".*MoveToHue.*");

expect("light", ".*hue=.*");


networkWait(2000);

// Ensure that the hue is what we expect
checkColorControlAttribute("remote",
                           nid1,
                           hueAttributeId,
                           "F5");     // value

// Move (up) to 0x00 over the course of .5 seconds
expect("remote", "zcl color-control movetohue 0x00 0x02 0x0005 0x00 0x00", "buffer: 01 [0-9a-fA-F]{2} 00 00 02 05 00 00 00 ");

expect("remote", "send " + nid1 + " 1 1", ".*TX.*");

expect("light", ".*MoveToHue.*");

expect("light", ".*hue=.*");

networkWait(500);

// Ensure that the hue is what we expect
checkColorControlAttribute("remote",
                           nid1,
                           hueAttributeId,
                           "00");     // value

//
// End MoveToHue command
//

// 
// MoveHue command
//

// Move up for 1 second at a rate of 2 moves per second
expect("remote", "zcl color-control movehue 1 2 0x00 0x00", "buffer: 01 [0-9a-fA-F]{2} 01 01 02 00 00 ");

expect("remote", "send " + nid1 + " 1 1", ".*TX.*");

expect("light", ".*MoveHue.*");

expect("light", ".*hue=.*");

// Sleep for just under 1 second
network.sleep(900);

// Issue the stop command
send("remote", "zcl color-control movehue 0 2 0x00 0x00");
send("remote", "send " + nid1 + " 1 1");

// Ensure that the hue is what we expect
send("remote", "zcl global read 0x0300 0x0000");
expectMultiline("remote", 
                "send " + nid1 + " 1 1",
                new String[] {
                  "READ_ATTR_RESP: \\(Color Control\\)",
                  " - attr:0000, status:00",
                  "   type:20, val:02",
                });

// Move down for 1 second at a rate of 4 moves per second
expect("remote", "zcl color-control movehue 3 4 0x00 0x00", "buffer: 01 [0-9a-fA-F]{2} 01 03 04 00 00 ");

expect("remote", "send " + nid1 + " 1 1", ".*TX.*");

expectMultiline("light",
                "",
                new String[] {
                  ".*MoveHue.*",
                  "hue=.*",
                });

// Sleep for just under 1 second
network.sleep(900);

// Issue the stop command
send("remote", "zcl color-control movehue 0 2");
send("remote", "send " + nid1 + " 1 1");

send("remote", "zcl global read 0x0300 0x0000");
expectMultiline("remote", 
                "send " + nid1 + " 1 1",
                new String[] {
                  "READ_ATTR_RESP: \\(Color Control\\)",
                  " - attr:0000, status:00",
                  "   type:20, val:FD"
                });

// Move back up at a rate of 2 moves per second for 1 second
expect("remote", "zcl color-control movehue 1 2 0x00 0x00", "buffer: 01 [0-9a-fA-F]{2} 01 01 02 00 00 ");

expect("remote", "send " + nid1 + " 1 1", ".*TX.*");

expectMultiline("light", 
                "",
                new String[] {
                  ".*MoveHue.*",
                  "hue=.*",
                });

networkWait(900);

// Issue the stop command
send("remote", "zcl color-control movehue 0 2 0x00 0x00");
send("remote", "send " + nid1 + " 1 1");

// Ensure that the hue is what we expect 
checkColorControlAttribute("remote", 
                           nid1,
                           hueAttributeId,
                           "00");     // value


//
// End MoveHue command
// 

// 
// StepHue command
//

// Step up by 2 over the course of 1 second
expect("remote", "zcl color-control stephue 0x01 0x02 0x0A 0x00 0x00", "buffer: 01 [0-9a-fA-F]{2} 02 01 02 0A 00 00 ");

expect("remote", "send " + nid1 + " 1 1", ".*TX.*");

expect("light", ".*StepHue.*");

expect("light", ".*hue=.*");

// Sleep for just 1 second
network.sleep(1000);

// Ensure that the hue is what we expect
checkColorControlAttribute("remote",
                           nid1,
                           hueAttributeId,
                           "02");     // value

// Step down by 2 over the course of 1 second
expect("remote", "zcl color-control stephue 0x03 0x02 0x0A 0x00 0x00", "buffer: 01 [0-9a-fA-F]{2} 02 03 02 0A 00 00 ");

expect("remote", "send " + nid1 + " 1 1", ".*TX.*");

expect("light", ".*StepHue.*");

//expect("remote", "ColorControlClientDefaultResponse:01,01,00");

expect("light", ".*hue=.*");

networkWait(1000);

// Ensure that the hue is what we expect
checkColorControlAttribute("remote",
                           nid1,
                           hueAttributeId,
                           "00");     // value

// 
// MoveToSaturation command
//

// Move to saturation 0x02 over the course of 1 second (up)
expect("remote", "zcl color-control movetosat 0x02 0x000A 0x00 0x00", "buffer: 01 [0-9a-fA-F]{2} 03 02 0A 00 00 00 ");

expect("remote", "send " + nid1 + " 1 1", ".*TX.*");

expect("light", ".*MoveToSaturation.*");

//expect("remote", "ColorControlClientDefaultResponse:01,01,00");

expect("light", ".*saturation=.*");

networkWait(1000);

// Ensure that the saturation is what we expect

// NEW ATTRIBUTE
checkColorControlAttribute("remote",
                           nid1,
                           saturationAttributeId,
                           "02");     // value

// Move to saturation 0x00 over the course of 1 second (down)
expect("remote", "zcl color-control movetosat 0x00 0x000A 0x00 0x00", "buffer: 01 [0-9a-fA-F]{2} 03 00 0A 00 00 00 ");

expect("remote", "send " + nid1 + " 1 1", ".*TX.*");

expect("light", ".*MoveToSaturation.*");

//expect("remote", "ColorControlClientDefaultResponse:01,01,00");

expect("light", ".*saturation=.*");

networkWait(1000);

// Ensure that the saturation is what we expect
checkColorControlAttribute("remote",
                           nid1,
                           saturationAttributeId,
                           "00");     // value

// 
// End MoveToSaturation command
//

// 
// MoveSaturation command
//

// Move up at a rate of 2 moves per second for 1 second
expect("remote", "zcl color-control movesat 1 2 0x00 0x00", "buffer: 01 [0-9a-fA-F]{2} 04 01 02 00 00 ");

expect("remote", "send " + nid1 + " 1 1", ".*TX.*");

expect("light", ".*MoveSaturation.*");

expect("light", ".*saturation=.*");

// Sleep for just under 1 second
network.sleep(900);

// Issue the stop command
send("remote", "zcl color-control movehue 0 2 0x00 0x00");
send("remote", "send " + nid1 + " 1 1");

// Ensure that the saturation is what we expect 
checkColorControlAttribute("remote",
                           nid1,
                           saturationAttributeId,
                           "02");     // value

// Move down at a rate of 2 moves per second for 1 second
expect("remote", "zcl color-control movesat 3 2 0x00 0x00", "buffer: 01 [0-9a-fA-F]{2} 04 03 02 00 00 ");

expect("remote", "send " + nid1 + " 1 1", ".*TX.*");

expect("light", ".*MoveSaturation.*");

expect("light", ".*saturation=.*");

networkWait(900);

// Issue the stop command
send("remote", "zcl color-control movehue 0 2 0x00 0x00");
send("remote", "send " + nid1 + " 1 1");

// Ensure that the saturation is what we expect 
checkColorControlAttribute("remote",
                           nid1,
                           saturationAttributeId,
                           "00");  // value

// 
// 
// End MoveSaturation command
//

//
// StepSaturation command
//

// Step up by 2 over the course of 1 second
expect("remote", "zcl color-control stepsat 0x01 0x02 0x0A 0x00 0x00", "buffer: 01 [0-9a-fA-F]{2} 05 01 02 0A 00 00 ");

expect("remote", "send " + nid1 + " 1 1", ".*TX.*");

expect("light", ".*StepSaturation.*");

expect("light", ".*saturation=.*");

// Sleep for 1 second
network.sleep(1000);

// Ensure that the saturation is what we expect
checkColorControlAttribute("remote",
                           nid1,
                           saturationAttributeId,
                           "02");     // value

// Step down by 4 over the course of 2 seconds (stop at 0)
expect("remote", "zcl color-control stepsat 0x03 0x04 0x0A 0x00 0x00", "buffer: 01 [0-9a-fA-F]{2} 05 03 04 0A 00 00 ");

expect("remote", "send " + nid1 + " 1 1", ".*TX.*");

expect("light", ".*StepSaturation.*");

expect("light", ".*saturation=.*");

networkWait(2000);

// Ensure that the saturation is what we expect
checkColorControlAttribute("remote",
                           nid1,
                           saturationAttributeId,
                           "00");     // value

//
// End StepSaturation command
//

// 
// MoveToHueAndSaturation command
//

// Move both Hue and Saturation by the same amount (+2 over 1 second)
expect("remote", "zcl color-control movetohueandsat 0x02 0x02 0x000A 0x00 0x00", "buffer: 01 [0-9a-fA-F]{2} 06 02 02 0A 00 00 00 ");

expect("remote", "send " + nid1 + " 1 1", ".*TX.*");

expect("light", ".*MoveToHueAndSaturation.*");

expect("light", ".*hue=.*");
expect("light", ".*saturation=.*");

networkWait(1000);

// Ensure that the hue is what we expect
checkColorControlAttribute("remote",
                           nid1,
                           "0x0000", // attribute
                           "02");    // value

// Ensure that the saturation is what we expect
checkColorControlAttribute("remote",
                           nid1,
                           "0x0001", // attribute
                           "02");    // value

// Move hue +4, saturation -2 over 1 second
expect("remote", "zcl color-control movetohueandsat 0x06 0x00 0x000A 0x00 0x00", "buffer: 01 [0-9a-fA-F]{2} 06 06 00 0A 00 00 00 ");

expect("remote", "send " + nid1 + " 1 1", ".*TX.*");

expect("light", ".*MoveToHueAndSaturation.*");

expect("light", ".*hue=.*");
expect("light", ".*saturation=.*");

// Sleep for 1 second
network.sleep(1000);

// Ensure that the hue is what we expect
checkColorControlAttribute("remote",
                           nid1,
                           hueAttributeId,
                           "06");    // value

// Ensure that the saturation is what we expect
checkColorControlAttribute("remote",
                           nid1,
                           "0x0001", // attribute
                           "00");    // value

// Move only hue (-2 over 1 second)
expect("remote", "zcl color-control movetohueandsat 0x04 0x00 0x000A 0x00 0x00", "buffer: 01 [0-9a-fA-F]{2} 06 04 00 0A 00 00 00 ");

expect("remote", "send " + nid1 + " 1 1", ".*TX.*");

expect("light", ".*MoveToHueAndSaturation.*");

expect("light", ".*hue=.*");

networkWait(1000);

// Ensure that the hue is what we expect
checkColorControlAttribute("remote",
                           nid1,
                           hueAttributeId,
                           "04");    // value

// Ensure that the saturation is what we expect
checkColorControlAttribute("remote",
                           nid1,
                           saturationAttributeId,
                           "00");    // value

// Move only saturation (+2 over 1 second)
expect("remote", "zcl color-control movetohueandsat 0x04 0x02 0x000A 0x00 0x00", "buffer: 01 [0-9a-fA-F]{2} 06 04 02 0A 00 00 00 ");

expect("remote", "send " + nid1 + " 1 1", ".*TX.*");

expect("light", ".*MoveToHueAndSaturation.*");

expect("light", ".*saturation=.*");

networkWait(1000);

// Ensure that the hue is what we expect
checkColorControlAttribute("remote",
                           nid1,
                           hueAttributeId,
                           "04");    // value

// Ensure that the saturation is what we expect
checkColorControlAttribute("remote",
                           nid1,
                           saturationAttributeId,
                           "02");    // value

//
// End MoveToHueAndSaturation command
//

//
// End Color Control plugin tests
// 
