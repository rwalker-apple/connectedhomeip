import com.ember.peek.SimulatedNetwork;

// The purpose of this test is to verify behavior of the Color Control color
// temperature based on changes to Level Control level, as enabled by the
// Level Control Options attribute's CoupleColorTempToLevel control bit.


source("util.bsh");

if (runArgument.runUsingMultihop || runArgument.runUsingHostApps) {
  dbg.print("****Multi-hop and Host disabled****");
  return;
}

SimulatedNetwork network = createNetwork();
String[] allDevices = { "controller", "bulb-rgb"};
String[] socImages = new String[] {
  "build/af-test-apps/HaHomeGateway-simulation/HaHomeGateway",
  "build/af-test-apps/Z3ColorControlLight-simulation/Z3ColorControlLight",
};

String[] hostImages = new String[] {
  "",
  "",
};

String[] ncpImages = new String[] {
  "",
  "",
};

// Note: the following call creates a flat network (i.e. every node can
// hear every other node.
addAndLoadDevices(allDevices, socImages, hostImages, ncpImages,
                  false, false, false);

// All commands will be on the same port and have the same timeout.
int port = 1;
int timeout = 10000;

int channel = 12;
int power = 2;
int panId = 0xdc04;
setNetworkParams(channel, power, panId);
setupEncryption();

// Note: reference designs can not use the formAndJoinDevices() API
// because they will all try to join on their own.  As such, calls
// beyond the first to attempt to join to a network will fail (devices
// already joined).

// Coodinator is device [0]
networkForm(allDevices[0]);
send(allDevices[0], "network pjoin 150");

// Allow TC and link key requests on the trust center
send("controller", "option security set-key-request-policy 1 1");

// Let registration complete.
networkWait(75000);

String bulbRgbNodeId = nodeId("bulb-rgb");

lazyExpect = true;

public static final int UP = 0x00;
public static final int DOWN = 0x01;

public static final int LEVEL_MIN = 0x01;
public static final int LEVEL_HALF = 0x7F;
public static final int LEVEL_MAX = 0xFE;

public static final int MIREDS_MIN = 0x00C8;
public static final int MIREDS_HALF = 0x0147;
public static final int MIREDS_MAX = 0x01C6;

public static final int ENABLE_COUPLING = 0x02;
public static final int DISABLE_COUPLING = 0x00;

public static final int COLOR_MODE_TEMP = 0x02;

void sendToBulb()
{
  send("controller", "send " + bulbRgbNodeId + " 1 1");
}

String format8(int value8)
{
  return String.format("%02X", new Object[] { value8 });
}

String format16(int value16)
{
  return String.format("%02X %02X",
                       new Object[] {
                         value16 & 0xFF,
                         (value16 >> 8) & 0xFF,
                       });
}

String formatTransitionTime(int transitionTimeS)
{
  int transitionTimeDs = transitionTimeS * 10;
  return format16(transitionTimeDs);
}

void moveToLevel(int level, int transitionTimeS)
{
  String payload = format8(level) + " " + formatTransitionTime(transitionTimeS) + " 00 00";
  expectMultiline("controller",
                  "zcl level-control mv-to-level " + level + " " + (transitionTimeS * 10) + " 0 0",
                  new String[] {
                    "Msg: clus 0x0008, cmd 0x00, len 8",
                    "buffer: 01 [0-9a-fA-F]{2} 00 " + payload,
                  });
  sendToBulb();
  expect("bulb-rgb",  "T[0-9a-fA-F]{8}:RX len 8, ep 01, clus 0x0008 \\(Level Control\\) FC 01 seq [0-9a-fA-F]{2} cmd 00 payload\\[" + payload + " \\]");
  expect("controller", "T[0-9a-fA-F]{8}:RX len 5, ep 01, clus 0x0008 \\(Level Control\\) FC 08 seq [0-9a-fA-F]{2} cmd 0B payload\\[00 00 \\]");
  networkWait((transitionTimeS > 2 ? transitionTimeS : 2) * 1500);
}

void setLevel(int level)
{
  expect("bulb-rgb", "write 1 0x0008 0x0000 1 0x20 {" + format8(level) + "}", "Success: write");
}

void checkLevel(int level)
{
  expect("bulb-rgb", "read 1 0x0008 0x0000 1", "^" + format8(level) + " $");
}

void setLevelOption(int option)
{
  expect("bulb-rgb", "write 1 0x0008 0x000F 1 0x20 {" + format8(option) + "}", "Success: write");
}

void checkLevelOption(int option)
{
  expect("bulb-rgb", "read 1 0x0008 0x000F 1", "^" + format8(option) + " $");
}

void checkColorTempMinMax(int min, int max)
{
  expect("bulb-rgb", "read 1 0x0300 0x400B 1", "^" + format16(min) + " $");
  expect("bulb-rgb", "read 1 0x0300 0x400C 1", "^" + format16(max) + " $");
}

void checkColorTempCoupleLevelMin(int mireds)
{
  expect("bulb-rgb", "read 1 0x0300 0x400D 1", "^" + format16(mireds) + " $");
}

void moveToColorTemp(int mireds, int transitionTimeS, int mask, int override)
{
  String payload = format16(mireds) + " " + formatTransitionTime(transitionTimeS)
                   + " " + format8(mask) + " " + format8(override);
  expectMultiline("controller",
                  "zcl color-control movetocolortemp " + mireds + " " + (transitionTimeS)
                    + " 0x" + format8(mask) + " 0x" + format8(override) + "",
                  new String[] {
                    "Msg: clus 0x0300, cmd 0x0A, len 9",
                    "buffer: 01 [0-9a-fA-F]{2} 0A " + payload,
                  });
  sendToBulb();
  networkWait((transitionTimeS + 1) * 1500); // timing fudge
}

void checkColorTemp(int mireds)
{
  expect("bulb-rgb", "read 1 0x0300 0x0007 1", "^" + format16(mireds) + " $");
}

void setColorTemp(int mireds)
{
  moveToColorTemp(mireds, 0, 0, 0);
  checkColorTemp(mireds);
}

void checkColorMode(int mode)
{
  expect("bulb-rgb", "read 1 0x0300 0x0008 1", "^" + format8(mode) + " $");
}

void baseTest()
{
  // Coupling disabled
  setLevelOption(DISABLE_COUPLING);
  
  // Set initial values
  // Change level, observe that color temp does not change
  checkColorTempMinMax(MIREDS_MIN, MIREDS_MAX);
  checkColorTempCoupleLevelMin(MIREDS_MIN);
  setLevel(LEVEL_HALF);
  checkLevel(LEVEL_HALF);
  setColorTemp(MIREDS_HALF);
  checkColorMode(COLOR_MODE_TEMP);

  moveToLevel(LEVEL_HALF, 0);
  checkColorTemp(MIREDS_HALF);

  moveToLevel(LEVEL_MIN, 0);
  checkColorTemp(MIREDS_HALF);

  moveToLevel(LEVEL_MAX, 0);
  checkColorTemp(MIREDS_HALF);

  moveToLevel(LEVEL_MIN, 0);
  checkColorTemp(MIREDS_HALF);

  moveToLevel(LEVEL_HALF, 0);
  checkColorTemp(MIREDS_HALF);

  // Coupling enabled
  //
  // Set initial values, then moveToLevel and observe that color temp changes
  // to expected values.

  setLevelOption(DISABLE_COUPLING);
  setColorTemp(MIREDS_MIN);
  setLevel(LEVEL_MIN);
  checkLevel(LEVEL_MIN);
  setLevelOption(ENABLE_COUPLING);
  checkLevelOption(ENABLE_COUPLING);

  moveToLevel(LEVEL_HALF, 0);
  checkColorTemp(MIREDS_HALF);

  moveToLevel(LEVEL_MIN, 0);
  checkColorTemp(MIREDS_MAX);

  moveToLevel(LEVEL_MAX, 0);
  checkColorTemp(MIREDS_MIN);

  moveToLevel(LEVEL_MIN, 0);
  checkColorTemp(MIREDS_MAX);

  moveToLevel(LEVEL_HALF, 0);
  checkColorTemp(MIREDS_HALF);
}

void ccTc08s()
{
  // Initialization -- not part of test case.
  setLevelOption(DISABLE_COUPLING);
  setColorTemp(MIREDS_HALF);
  setLevel(LEVEL_MIN);
  checkLevel(LEVEL_MIN);

  // 1a Read attr CoupleColorTempToLevelMinMireds
  // Note value cctl-min.
  checkColorTempCoupleLevelMin(MIREDS_MIN);
  
  // 1b MoveToColorTemperature to cctl-min.
  setColorTemp(MIREDS_MIN);
  
  // 2 Write attr LevelControl Options to 0x02 (enable coupling)
  setLevelOption(ENABLE_COUPLING);
  checkLevelOption(ENABLE_COUPLING);
  
  // 3a MoveToLevel to 0x7F (mid-range level)
  moveToLevel(LEVEL_HALF, 0);
  
  // 3b Read attr ColorTemperatureMireds
  // Should have value cctl-mid that is > cctl-min.
  checkColorTemp(MIREDS_HALF);
  
  // 4a MoveToLevel to 0xFE (max level)
  moveToLevel(LEVEL_MAX, 0);
  
  // 4b Read attr ColorTemperatureMireds
  // Should have value cctl-min.
  checkColorTemp(MIREDS_MIN);
  
  // 5a MoveToLevel to 0x01 (min level)
  moveToLevel(LEVEL_MIN, 0);
  
  // 5b Read attr ColorTemperatureMireds
  // Should have value cctl-max that is > cctl-mid > cctl-min.
  checkColorTemp(MIREDS_MAX);
  
  // 6a MoveToColorTemperature to cctl-min.
  setColorTemp(MIREDS_MIN);
  
  // 6b Read attr CurrentLevel
  // Should have value 0x01 (i.e. unchanged, no coupling color -> level)
  checkLevel(LEVEL_MIN);
  
  // 7 Write attr LevelControl Options to 0x00 (disable coupling)
  setLevelOption(0x00);
  
  // 8a MoveToLevel to 0x7F (mid-range level)
  moveToLevel(LEVEL_HALF, 0);
  
  // 8b Read attr ColorTemperatureMireds
  // Should have value cctl-min (i.e. unchanged when coupling is disabled)
  checkColorTemp(MIREDS_MIN);
  
}

baseTest();
ccTc08s();

