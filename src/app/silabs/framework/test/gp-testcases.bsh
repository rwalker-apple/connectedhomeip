import java.lang.Math;
import com.ember.peek.SimulatedNetwork;

source("util.bsh");
if (!runArgument.runUsingMultihop) {
  std.print("Only runs multihop");
  return;
}

// Create two nodes in the network.
SimulatedNetwork network = createNetwork();

TestNode[] allNodes = {
  new TestNode("sink",
      "build/af-test-apps/GpComboBasic-simulation/GpComboBasic",
      "build/af-test-apps/GpComboBasic-simulation-ezsp/GpComboBasic",
      "app/ncp/sample-app/ncp-spi-gp-sink/simulation/build/exe/ncp-spi",
      gridLocations[0]),
  new TestNode("THProxy",
      "build/af-test-apps/GpProxyBasic-simulation/GpProxyBasic",
      "build/af-test-apps/GpProxyBasic-simulation-ezsp/GpProxyBasic",
      "app/ncp/sample-app/ncp-spi/simulation/build/exe/ncp-spi",
      gridLocations[1]),
  new TestNode("proxy2",
      "build/af-test-apps/GpProxyBasic-simulation/GpProxyBasic",
      "build/af-test-apps/GpProxyBasic-simulation-ezsp/GpProxyBasic",
      "app/ncp/sample-app/ncp-spi/simulation/build/exe/ncp-spi",
      gridLocations[4]),
  new TestNode("gpd1",
      "build/af-test-apps/GpTestDevice-simulation/GpTestDevice",
      "",
      "",
      gridLocations[2]), //in range of sink (and proxy1 and proxy2)
  new TestNode("gpd2",
      "build/af-test-apps/GpTestDevice-simulation/GpTestDevice",
      "",
      "",
      gridLocations[5]),//in range of proxy1 and proxy2
  new TestNode("gpd3",
      "build/af-test-apps/GpTestDevice-simulation/GpTestDevice",
      "",
      "",
     gridLocations[7]),//in range of proxy2 only
};

TestNode[] realNodes = Arrays.copyOfRange(allNodes,0,3);
TestNode[] testNodes = Arrays.copyOfRange(allNodes,3,6);

// Create network and load devices according
// To the runArguments provided
addAndLoadDevicesWithLocation(realNodes,runArgument.runUsingHostApps);
addAndLoadDevicesWithLocation(testNodes,false);


String[] someDevices = new String[]{"sink", "THProxy", "proxy2"};

// Allow for a little bit of drift in the clocks.
int tolerance = 3;

// Form and join a network and set up encryption.
int channel = 11;
int power = 2;
int panId = 0xDEAD;
setNetworkParams(channel, power, panId);
setupEncryption();
formAndJoinDevices(someDevices);
String sinkId = nodeId("sink");
// set gpd channel to 11
send("gpd1", "plugin green-power-test-device set-phy-channel " + channel);

printNodeIds(allNodes);
networkWait(5000);
networkWait(25000);
// Formating function - copied from color control beanshell file
String format8(int value8)
{
  return String.format("%02X", new Object[] { value8 });
}

String format16(int value16)
{
  return String.format("%02X %02X",
                       new Object[] {
                         value16 & 0xFF,
                         (value16 >> 8) & 0xFF,
                       });
}

// Basic rule of writting the script is to use "networkwait" only if there is not an expect check,
// else the response/notification  may come during the network wait causing it be lost and the expect
// parser will not able to parse it.
// it is OK to wait after an "expect" and before next command is issued.

// GP Functions
// Commissioning
void EnterCommissioning()
{
  send("sink", "plugin green-power-server commission 9 0xffff 0xffff 1");
  networkWait(1000);
}

void ExitCommissioning()
{
  send("sink", "plugin green-power-server commission 8 0xffff 0xffff 1");
  networkWait(3000);
}

void GPcommNotificationChannelRequst()
{
  send("THProxy", "raw 0x0021 {11 18 04 08 08 00 00 00 00 0F 00 00 00 E3 01 00 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
}

//GPS Maximum Sink Table Entries 0x0000
void ReadGPSMaximumSinkTableEntries()
{
  send("THProxy", "zcl global read 0x0021 0x0000");
  send("THProxy", "send " + sinkId + " 242 242");
}

void WriteGPSMaximumSinkTableEntriesTo0F()
{
  send("THProxy", "zcl global write 0x0021 0x0000 0x20 {0F}");
  send("THProxy", "send " + sinkId + " 242 242");
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 04 payload\\[88 00 00 \\]");
}

//Sink Table 0x0001
void SinkTableRequestIndex(int index)
{
  String hex = format8(index);
  // Sink Table Request - raw <clusterId> {ZCL Frame and Payload}
  send("THProxy", "raw 0x0021 {11 1E 0A 08 " + hex + "}");
  // Send the command ,<address> <ep> <ep>
  send("THProxy", "send " + sinkId + " 242 242");
}

// Read sink table
void ReadSinkTable()
{
  // Read sink table  read <clusterId> <attributeId>
  send("THProxy", "zcl global read 0x0021 0x0001");
  // Send the command ,<address> <ep> <ep>
  send("THProxy", "send " + sinkId + " 242 242");
}

void ReadEmptySinkTable()
{
  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 00 00 \\]");
  networkWait(1000);
}

void WriteSinkTable()
{
  send("THProxy", "zcl global write 0x0021 0x0001 0x43 {05 04}");
  send("THProxy", "send " + sinkId + " 242 242");
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 04 payload\\[88 01 00 \\]");
  networkWait(1000);
}

//GP Translation Table
// GP translation Request
void GpTranslationRequestIndex(int index)
{
  String hex = format8(index);
  // Translation table request - raw <clusterId> {ZCL Frame and Payload}
  send("THProxy", "raw 0x0021 {11 03 08 "+ hex +"}");
  // Send the command ,<address> <ep> <ep>
  send("THProxy", "send " + sinkId + " 242 242");
}

void GpTranslationRequestIndex0Empty()
{
  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[8B 00 00 00 00 \\]");
  networkWait(500);
}

//GPS Commissioning Mode 0x0002
// Read GPS Commissioning Mode
void ReadGPSCommissioningMode()
{
  send("THProxy", "zcl global read 0x0021 0x0002");
  send("THProxy", "send " + sinkId + " 242 242");
}

// Read Default GPS Commissioning Mode
void ReadDefaultGPSCommissioningMode()
{
  ReadGPSCommissioningMode();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[02 00 00 18 01 \\]");
  networkWait(500);
}

// Write GPS Commissioning  Mode to 01//
void WriteGPSCommissioningModeTo(int mode)
{
  String hex = format8(mode);
  send("THProxy", "zcl global write 0x0021 0x0002 0x18 {" + hex + "}");
  send("THProxy", "send " + sinkId + " 242 242");
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 04 payload\\[00 \\]");
  networkWait(500);
}

// Write Commissioning Mode To 01 No Response
void WriteGPSCommissioningModeNoResponse(int mode)
{
  String hex = format8(mode);
  send("THProxy", "raw 0x0021 {10 01 05 02 00 18 " + hex + "}");
  send("THProxy", "send " + sinkId + " 242 242");
}

//////////////////////GPS Commissioning Exit Mode 0x0003////////////////////////////////////////
// Read GPS Commissioning Exit Mode
void ReadGPSCommissioningExitMode()
{
  send("THProxy", "zcl global read 0x0021 0x0003");
  send("THProxy", "send " + sinkId + " 242 242");
}

// Write GPS Commissioning Exit Mode to a supplied mode
void WriteCommissioningExitModeTo(int mode)
{
  String hex = format8(mode);
  send("THProxy", "zcl global write 0x0021 0x0003 0x18 {" + hex + "}");
  send("THProxy", "send " + sinkId + " 242 242");
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 04 payload\\[00 \\]");
  networkWait(500);
}

// Write Commissioning Exit Mode To a supplied mode No Response
void WriteCommissioningExitModeNoResponse(int mode)
{
  String hex = format8(mode);
  send("THProxy", "raw 0x0021 {10 01 05 03 00 18 " + hex + "}");
  send("THProxy", "send " + sinkId + " 242 242");
}

//////////////////////GPS Commissioning Window 0x0004////////////////////////////////////////
void ReadGPSCommissioningWindow()
{
  send("THProxy", "zcl global read 0x0021 0x0004");
  send("THProxy", "send " + sinkId + " 242 242");
}

void WriteGPSCommissioningWindowTo(int time)
{
  String hex = format16(time);
  send("THProxy", "zcl global write 0x0021 0x0004 0x21 {" + hex + "}");
  send("THProxy", "send " + sinkId + " 242 242");
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 04 payload\\[00 \\]");
  networkWait(500);
}

////////////////////////////GPS Security Level 0x0005/////////////////////////////////////////////////
//Read GPS Security Level //
void ReadGPSSecurityLevel()
{
  send("THProxy", "zcl global read 0x0021 0x0005");
  send("THProxy", "send " + sinkId + " 242 242");
}

//Read GPS Security Level to 00//
void WriteGPSSecurityLevelTo(int secLevel)
{
  String hex = format8(secLevel);
  send("THProxy", "zcl global write 0x0021 0x0005 0x18 {" + hex + "}");
  send("THProxy", "send " + sinkId + " 242 242");
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 04 payload\\[00 \\]");
  networkWait(500);
}

// Write GPS Security Level To  No Response
void WriteGPSSecurityLevelToNoResponse(int secLevel)
{
  String hex = format8(secLevel);
  send("THProxy", "raw 0x0021 {10 01 05 05 00 18 "+ hex + "}");
  send("THProxy", "send " + sinkId + " 242 242");
}
/////////////////////////////GPS Functionality 0x0006//////////////////////////////////////////////////////
void ReadGPSFunctionality()
{
  send("THProxy", "zcl global read 0x0021 0x0006");
  send("THProxy", "send " + sinkId + " 242 242");
}

void WriteGPSFunctionality()
{
  send("THProxy", "zcl global write 0x0021 0x0006 0x1A {FF FF FF}");
  send("THProxy", "send " + sinkId + " 242 242");
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 04 payload\\[88 06 00 \\]");
  networkWait(500);
}

/////////////////////////////GPS Active Functionality 0x0007////////////////////////////////////////////////
void ReadGPSActiveFunctionality()
{
  send("THProxy", "zcl global read 0x0021 0x0007");
  send("THProxy", "send " + sinkId + " 242 242");
}

void WriteGPSActiveFunctionality()
{
  send("THProxy", "zcl global write 0x0021 0x0007 0x1A {00 00 00}");
  send("THProxy", "send " + sinkId + " 242 242");
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 04 payload\\[88 07 00 \\]");
  networkWait(500);
}
/////////////////////////////GP Shared Security Key Type 0x0020/////////////////////////////////////
void ReadGPSharedSecurityKeyType()
{
  send("THProxy", "zcl global read 0x0021 0x0020");
  send("THProxy", "send " + sinkId + " 242 242");
}

void WriteGPSharedSecurityKeyTypeTo(int keyType)
{
  String hex = format8(keyType);
  send("THProxy", "zcl global write 0x0021 0x0020 0x18 {" + hex + "}");
  send("THProxy", "send " + sinkId + " 242 242");
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 04 payload\\[00 \\]");
  networkWait(500);
}

void WriteGPSharedSecurityKeyTypeToNoResponse(int keyType)
{
  String hex = format8(keyType);
  send("THProxy", "raw 0x0021 {10 01 05 20 00 18 " + hex + "}");
  send("THProxy", "send " + sinkId + " 242 242");
  networkWait(500);
}
/////////////////////////////GP Shared Security Key  0x0021/////////////////////////////////////
void ReadGPSharedSecurityKey()
{
  send("THProxy", "zcl global read 0x0021 0x0021");
  send("THProxy", "send " + sinkId + " 242 242");
}

void WriteGPSharedSecurityKeyTo(String key)
{
  send("THProxy", "zcl global write 0x0021 0x0021 0xF1 {" + key + "}");
  send("THProxy", "send " + sinkId + " 242 242");
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 04 payload\\[00 \\]");
  networkWait(500);
}

/////////////////////////////GP Link Key  0x0022/////////////////////////////////////
void ReadGPLinkKey()
{
  send("THProxy", "zcl global read 0x0021 0x0022");
  send("THProxy", "send " + sinkId + " 242 242");
}

void WriteGPLinkKeyTo(String key)
{
  send("THProxy", "zcl global write 0x0021 0x0022 0xF1 {" + key + "}");
  send("THProxy", "send " + sinkId + " 242 242");
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 04 payload\\[00 \\]");
  networkWait(500);
}

void WriteGPLinkKeyToNoResponse(String key)
{
  send("THProxy", "raw 0x0021 {10 07 05 22 00 F1 " + key + "}");
  send("THProxy", "send " + sinkId + " 242 242");
  networkWait(500);
}

/////////////////////////////Cluster Revision 0xFFFD/////////////////////////////////////
void ReadClusterRevision()
{
  send("THProxy", "zcl global read 0x0021 0xFFFD");
  send("THProxy", "send " + sinkId + " 242 242");
}
////////////////////////////////////////////General Functions//////////////////////////////////////
void sendToGpCluaterRawPayloadToSink(String payload, String address)
{
  send("THProxy", "raw 0x0021 {" + payload + "}");
  send("THProxy", "send " + address + " 242 242");
}
// Gp pairing Config with Raw payload for Unicast to Sink from Proxy
void sendGpPairingConfigWithRawPayload(String payload)
{
  sendToGpCluaterRawPayloadToSink(payload, sinkId);
}
// Gp Notification BCAST with Raw payload
void sendGpNotificationWithRawPayload(String payload)
{
  sendToGpCluaterRawPayloadToSink(payload, "0xffff");
}
// Gp Notification BCAST with Raw payload
void sendGpNotificationWithRawPayloadUcast(String payload, String address)
{
  sendToGpCluaterRawPayloadToSink(payload, address);
}
// Start Test case from here ///
void Test_4_1_2_2()
{
  //print ("\nStart of 4.1.2.2[");
  // Read GPS Commissioning Mode
  ReadDefaultGPSCommissioningMode();
  // Write GPS Commissioning Exit Mode to 03//
  WriteGPSCommissioningModeTo(3);

  ReadGPSCommissioningMode();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[02 00 00 18 03 \\]");

  ReadGPSCommissioningExitMode();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[03 00 00 18 02 \\]");

  WriteCommissioningExitModeTo(7);

  ReadGPSCommissioningExitMode();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[03 00 00 18 07 \\]");

  ReadGPSCommissioningWindow();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[04 00 00 21 FF 00 \\]");

  WriteGPSCommissioningWindowTo(255);

  ReadGPSCommissioningWindow();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[04 00 00 21 FF 00 \\]");

  ReadGPSSecurityLevel();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[05 00 00 18 06 \\]");

  WriteGPSSecurityLevelTo(7);

  ReadGPSSecurityLevel();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[05 00 00 18 07 \\]");

  ReadGPSMaximumSinkTableEntries();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[00 00 00 20 05 \\]");

  WriteGPSMaximumSinkTableEntriesTo0F();

  ReadGPSMaximumSinkTableEntries();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[00 00 00 20 05 \\]");

  ReadEmptySinkTable();

  WriteSinkTable();

  ReadEmptySinkTable();

  ReadGPSFunctionality();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[06 00 00 1A 2F AE 0F \\]");

  WriteGPSFunctionality();

  ReadGPSFunctionality();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[06 00 00 1A 2F AE 0F \\]");

  ReadGPSActiveFunctionality();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[07 00 00 1A FF FF FF \\]");

  WriteGPSActiveFunctionality();

  ReadGPSActiveFunctionality();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[07 00 00 1A FF FF FF \\]");

  WriteGPSCommissioningModeTo(1);

  WriteCommissioningExitModeTo(2);

  WriteGPSCommissioningWindowTo(180);

  WriteGPSSecurityLevelTo(6);

  SinkTableRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 0A payload\\[8B 00 00 00 \\]");

  // Put sink in commissioning mode
  EnterCommissioning();

  // send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 81 FF FF FF FF 0C 78 56 34 12 E0 02 81 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00}");
  networkWait(1500);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 02 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  // Put sink in commissioning mode
  EnterCommissioning();

  // send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 97 FF FF FF FF 88 77 66 55 44 33 22 11 8C 02 99 E0 02 81 F2 25 1A F3 AA A3 CB D6 DD 7F E9 18 36 DD EB 90 BC 24 72 5E FA 0F 00 00 00}");
  networkWait(1500);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 3F 00 28 02 78 56 34 12 02 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 2A 02 88 77 66 55 44 33 22 11 99 02 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  SinkTableRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 0A payload\\[00 02 00 02 28 02 78 56 34 12 02 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 2A 02 88 77 66 55 44 33 22 11 99 02 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  // Put sink in commissioning mode
  EnterCommissioning();

  // send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 AC FF FF FF FF 0C 44 33 22 11 E0 02 81 F2 CB F3 A8 7A 21 63 B6 A3 2D 8E FD 00 8D C6 12 C7 B8 F7 B7 B9 0F 00 00 00}");
  networkWait(1500);

  SinkTableRequestIndex(1);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 0A payload\\[00 03 01 02 2A 02 88 77 66 55 44 33 22 11 99 02 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 28 02 44 33 22 11 02 00 12 0F 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF \\]");

  //Sink Table Request with SrcID = N
  send("THProxy", "raw 0x0021 {11 1E 0A 00 78 56 34 12}");
  send("THProxy", "send " + sinkId + " 242 242");
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 0A payload\\[00 03 FF 01 28 02 78 56 34 12 02 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");


  //GP Sink Table Request with GPD IEEE address = N and Endpoint X.
  send("THProxy", "raw 0x0021 {11 1E 0A 02 88 77 66 55 44 33 22 11 99}");
  send("THProxy", "send " + sinkId + " 242 242");
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 0A payload\\[00 03 FF 01 2A 02 88 77 66 55 44 33 22 11 99 02 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  SinkTableRequestIndex(3);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 0A payload\\[8B 03 03 00 \\]");

  //GP Sink Table Request with SrcID other than N and M.
  send("THProxy", "raw 0x0021 {11 1E 0A 00 00 56 34 12}");
  send("THProxy", "send " + sinkId + " 242 242");
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 0A payload\\[8B 03 FF 00 \\]");

  //Sink Table Request with GPD IEEE address other than N.
  send("THProxy", "raw 0x0021 {11 1E 0A 02 00 77 66 55 44 33 22 11 99}");
  send("THProxy", "send " + sinkId + " 242 242");
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 0A payload\\[8B 03 FF 00 \\]");

  //GP Pairing Configuration
  sendGpPairingConfigWithRawPayload("11 08 09 0C 08 02 78 56 34 12 02 05 12 10 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(3000);

  //GP Pairing Configuration
  sendGpPairingConfigWithRawPayload("11 1E 09 0C 08 02 44 33 22 11 02 05 12 10 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF FE");
  networkWait(3000);

  //GP Pairing Configuration
  sendGpPairingConfigWithRawPayload("11 1E 09 0C 0A 02 88 77 66 55 44 33 22 11 FF 02 05 12 10 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(3000);

  ReadEmptySinkTable();

  //print ("]");
}

void Test_4_3_2()
{
  //print ("\nStart of 4.3.2 [");
  ReadEmptySinkTable();

  WriteGPSCommissioningModeNoResponse(1);

  ReadGPSCommissioningMode();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[02 00 00 18 01 \\]");

  WriteCommissioningExitModeNoResponse(2);

  // Put sink in commissioning mode
  EnterCommissioning();

  // send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 B2 FF FF FF FF 0C 78 56 34 12 E0 02 C1 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00}");
  networkWait(3000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 A8 02 78 56 34 12 02 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  //GP notification
  send("THProxy", "raw 0x0021 {11 0E 00 90 74 78 56 34 12 10 00 00 00 22 FF 00 00 5F}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(3000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 A8 02 78 56 34 12 02 00 12 10 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

   //GP Pairing configuration - Remove GPD
  sendGpPairingConfigWithRawPayload("11 07 09 0C 08 02 78 56 34 12 02 05 12 10 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(3000);

  // Read sink table
  ReadEmptySinkTable();
  //print ("]");
}

void Test_4_3_3_1()
{
  //print ("\nStart of 4.3.3.1 [");

  WriteGPSCommissioningModeTo(1);
  WriteCommissioningExitModeTo(2);
  ReadEmptySinkTable();

  EnterCommissioning();
  networkWait(6000);

  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E4 FF FF FF FF 0C 78 56 34 12 E0 02 81 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00}");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  EnterCommissioning();
  networkWait(6000);

  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 FB FF FF FF FF 0C FF FF 34 12 E0 02 81 F2 BF AE D7 83 B1 8A 1E 62 8D EC 98 7C 7E 64 65 21 69 11 04 73 0F 00 00 00}");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  EnterCommissioning();
  networkWait(6000);

  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 10 FF FF FF FF 0C 00 00 34 12 E0 02 81 F2 65 A3 50 98 19 A9 C7 0B D5 D7 58 16 3B 91 C1 36 2C FB 63 9E 0F 00 00 00}");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  EnterCommissioning();
  networkWait(6000);

  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 27 FF FF FF FF 0C 00 00 FF FF E0 02 81 F2 1D 35 7E 28 D5 71 9F B6 1C 31 AB 18 90 3A 84 4C 73 D7 E1 33 0F 00 00 00}");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  EnterCommissioning();
  networkWait(6000);

  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 3E FF FF FF FF 0C FF FF 00 00 E0 02 81 F2 77 7A 5E BF F0 3A 3E 73 10 89 21 3E 75 B2 24 48 DD CB E9 A7 0F 00 00 00}");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  //GP Pairing configuration
  sendGpPairingConfigWithRawPayload("11 08 09 0C 08 02 78 56 34 12 02 05 12 10 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(3000);

  //GP Pairing configuration
  sendGpPairingConfigWithRawPayload("11 09 09 0C 08 02 FF FF 34 12 02 05 12 10 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(3000);

  //GP Pairing configuration
  sendGpPairingConfigWithRawPayload("11 0A 09 0C 08 02 00 00 34 12 02 05 12 10 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(3000);


  //GP Pairing configuration
  sendGpPairingConfigWithRawPayload("11 0B 09 0C 08 02 FF FF 00 00 02 05 12 10 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(3000);

  //GP Pairing configuration
  sendGpPairingConfigWithRawPayload("11 0C 09 0C 08 02 00 00 FF FF 02 05 12 10 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(3000);

  ReadEmptySinkTable();

  //print ("]");
}
void Test_4_3_4_1()
{
  //print ("\nStart of 4.3.4.1 [");

  ReadEmptySinkTable();
  WriteCommissioningExitModeTo(2);

  //Add group
  send("sink","raw 4 {01 01 00 77 77 00}");
  send("sink","send " + sinkId + " 2 1");
  networkWait(6000);

  WriteGPSCommissioningModeNoResponse(2);
  ReadGPSCommissioningMode();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[02 00 00 18 02 \\]");

  EnterCommissioning();
  networkWait(5000);

  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 5C FF FF FF FF 0C 78 56 34 12 E0 02 81 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00}");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 22 00 30 02 78 56 34 12 02 01 77 77 00 00 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  //GP Pairing configuration
  sendGpPairingConfigWithRawPayload("11 B7 09 0C 10 02 78 56 34 12 02 01 77 77 79 56 05 12 11 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(6000);

  ReadEmptySinkTable();

  WriteGPSCommissioningModeTo(1);

  //Remove all groups
  send("sink","raw 4 {01 01 04}");
  send("sink","send " + sinkId + " 2 1");
  networkWait(6000);

  //print ("]");
}
void Test_4_3_4_3()
{
  //print ("\nStart of 4.3.4.3 [");
  //Add group
  send("sink","raw 4 {01 51 00 01 00 00}");
  send("sink","send " + sinkId + " 2 1");
  networkWait(6000);

  WriteGPSCommissioningModeTo(2);

  ReadGPSSecurityLevel();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[05 00 00 18 01 \\]");

  WriteGPSSecurityLevelTo(0);
  WriteCommissioningExitModeTo(4);
  ReadEmptySinkTable();

  EnterCommissioning();
  networkWait(6000);

  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F4 FF FF FF FF 0C 78 56 34 12 E0 FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20}");
  networkWait(6000);

  // Commissioning // Application Escription
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F9 FF FF FF FF 0C 78 56 34 12 E4 01 01 00 00 07 08 06 04 00 00 18 10 00}");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 22 00 30 02 78 56 34 12 FE 01 01 00 00 00 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 01 00 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 \\]");
  networkWait(6000);

  // Decommissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 15 FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 E1 00 A2 24 BE}");
  networkWait(6000);

  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast // commissioning
  sendGpNotificationWithRawPayload("11 1A 04 00 08 78 56 34 12 22 00 00 00 E0 1C FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Application Escription
  sendGpNotificationWithRawPayload("11 1A 04 00 08 78 56 34 12 22 00 00 00 E4 0D 01 01 00 00 07 08 06 04 00 00 18 10 00 00 00 FC");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 22 00 30 02 78 56 34 12 FE 01 01 00 00 00 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 01 00 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 \\]");
  networkWait(6000);

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast // Decommissioning
  sendGpNotificationWithRawPayload("11 1A 04 20 09 78 56 34 12 10 00 00 00 E1 00 00 00 FC");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();

  //Remove all groups
  send("sink","raw 4 {01 01 04}");
  send("sink","send " + sinkId + " 2 1");
  networkWait(6000);

  //print ("]");
}
void Test_4_3_4_4()
{
  //print ("\nStart of 4.3.4.4 [");
  //Add group
  send("sink","raw 4 {01 51 00 01 00 00}");
  send("sink","send " + sinkId + " 2 1");
  networkWait(6000);

  WriteGPSCommissioningModeTo(2);

  //ReadGPSSecurityLevel();
  //expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[05 00 00 18 01 \\]");

  WriteGPSSecurityLevelTo(0);
  WriteCommissioningExitModeTo(4);
  ReadEmptySinkTable();

  EnterCommissioning();
  networkWait(6000);

  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 88 FF FF FF FF 0C 78 56 34 12 E0 07 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 10 02 05 01}");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 22 00 30 02 78 56 34 12 07 01 01 00 00 00 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  try{
  // Translation table request
  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 02 00 02 78 56 34 12 69 01 04 01 06 00 01 00 03 01 01 FF 78 56 34 12 6A 01 04 01 06 00 01 00 03 01 01 FF \\]");
  }catch (Exception ex){
  //print ("Test is FAILED : The Number of Entries is not as expecetd, Release command is not on Translation Table.");
  }

  // Decommissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A0 FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 E1 00 A2 24 BE}");
  networkWait(6000);

  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast // commissioning
  sendGpNotificationWithRawPayload("11 1A 04 00 08 78 56 34 12 22 00 00 00 E0 1F 07 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 10 02 15 01 00 00 FC");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 22 00 30 02 78 56 34 12 07 01 01 00 00 00 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(2000);

  try{
  // Translation table request
  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 02 00 02 78 56 34 12 69 01 04 01 06 00 01 00 03 01 01 FF 78 56 34 12 6A 01 04 01 06 00 01 00 03 01 01 FF \\]");
  }catch (Exception ex){
  //print ("Test is FAILED : The Number of Entries is not as expecetd, Release command is not on Translation Table.");
  }

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast // Decommissioning
  sendGpNotificationWithRawPayload("11 1A 04 20 09 78 56 34 12 10 00 00 00 E1 00 00 00 FC");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();

 //Remove all groups
  send("sink","raw 4 {01 01 04}");
  send("sink","send " + sinkId + " 2 1");
  networkWait(6000);

  //print ("]");
}
void Test_4_3_4_5()
{
  //print ("\nStart of 4.3.4.5 [");
  //Add group
  send("sink","raw 4 {01 51 00 01 00 00}");
  send("sink","send " + sinkId + " 2 1");
  networkWait(6000);

  WriteGPSCommissioningModeTo(2);

  //ReadGPSSecurityLevel();
  //expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[05 00 00 18 01 \\]");

  WriteGPSSecurityLevelTo(0);
  WriteCommissioningExitModeTo(4);
  ReadEmptySinkTable();

  EnterCommissioning();
  networkWait(6000);

  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F3 FF FF FF FF 0C 78 56 34 12 E0 FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20}");
  networkWait(3000);

  // Commissioning // Application Description
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F8 FF FF FF FF 0C 78 56 34 12 E4 02 01 00 01 96 00 07 08 76 98 00 00 18 10 00}");
  networkWait(3000);

  // Commissioning // Application Description
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 FC FF FF FF FF 8C 00 78 56 34 12 E4 02 01 01 01 96 00 07 08 06 04 00 00 18 10 00}");
  networkWait(3000);

  ExitCommissioning();
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 22 00 30 02 78 56 34 12 FE 01 01 00 00 00 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(2000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 01 00 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 01 00 06 04 00 00 18 01 \\]");
  networkWait(2000);

  // Decommissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 17 FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 E1 00 A2 24 BE}");
  networkWait(10000);

  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();

 //Remove all groups
  send("sink","raw 4 {01 01 04}");
  send("sink","send " + sinkId + " 2 1");
  networkWait(6000);

  //print ("]");
}
void Test_4_3_6()
{
  //print ("\nStart of 4.3.6 [");
  // Read sink table
  ReadEmptySinkTable();

  // Write GPS Commissioning Exit Mode to 02//
  WriteCommissioningExitModeTo(2);

  //Write Commissioning Exit Mode To 03 No Response
  WriteGPSCommissioningModeNoResponse(3);
  networkWait(2000);

  //Read GPS Communication Mode
  ReadGPSCommissioningMode();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[02 00 00 18 03 \\]");

  // Put sink in commissioning mode
  EnterCommissioning();

  // send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 36 FF FF FF FF 0C 78 56 34 12 E0 02 C1 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00}");
  networkWait(1500);

  // Read sink table
  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 B8 02 78 56 34 12 02 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  //GP notification
  send("THProxy", "raw 0x0021 {11 14 00 90 74 78 56 34 12 10 00 00 00 22 FF 00 00 5F}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 B8 02 78 56 34 12 02 00 12 10 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  //GP Pairing configuration
  sendGpPairingConfigWithRawPayload("11 07 09 0C 18 02 78 56 34 12 02 05 12 10 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(3000);

  // Read sink table
  ReadEmptySinkTable();
  //print ("]");
}


void Test_4_3_8_2()
{
  //print ("\nStart of 4.3.8.2 [");
  WriteGPSSecurityLevelTo(0);

  ReadEmptySinkTable();

  //GP Pairing configuration //
  sendGpPairingConfigWithRawPayload("11 00 09 09 18 00 78 56 34 12 02 05 FE");
  networkWait(1000);

  //GP notification
  send("THProxy", "raw 0x0021 {11 02 00 08 00 78 56 34 12 C3 00 00 00 22 FF}");
  send("THProxy", "send " + sinkId + " 242 242");
  networkWait(1000);

  //GP Pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0C 18 00 78 56 34 12 02 05 FE");

  ReadEmptySinkTable();

  WriteGPSSecurityLevelTo(6);
  //print ("]");
}

void Test_4_3_9_2()
{
  //print ("\nStart of 4.3.9.2 [");
  WriteGPSharedSecurityKeyTypeTo(2);

  WriteGPSharedSecurityKeyTo("C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF");

  //GP Pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 09 28 02 78 56 34 12 02 05 0B 00 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 02 05 0B 00 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  //GP notification
  send("THProxy", "raw 0x0021 {11 07 00 D0 52 78 56 34 12 01 00 00 00 22 FF 00 00 C5}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(1000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 02 05 0B 01 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(1000);

  //GP notification
  send("THProxy", "raw 0x0021 {11 07 00 D0 52 78 56 34 12 00 00 00 00 22 FF 00 00 C5}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(1000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 02 05 0B 01 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(1000);

  //GP notification
  send("THProxy", "raw 0x0021 {11 07 00 D0 52 78 56 34 12 00 00 00 00 22 FF 00 00 C5}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(1000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 02 05 0B 01 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(1000);

  //GP notification
  send("THProxy", "raw 0x0021 {11 07 00 D0 52 78 56 34 12 00 00 00 00 22 FF 00 00 C5}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(1000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 02 05 0B 01 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(1000);

  //GP Pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0C 28 02 78 56 34 12 02 05 0B 00 00 00 00 CF CE CD CC CB CA C9 C8 C7 C6 C5 C4 C3 C2 C1 C0 FE");
  networkWait(1000);

  ReadEmptySinkTable();

  WriteGPSharedSecurityKeyTypeTo(0);
  //print ("]");
}

void Test_4_3_9_3()
{
  //print ("\nStart of 4.3.9.3 [");
  ReadEmptySinkTable();

  WriteGPSharedSecurityKeyTypeTo(2);
  WriteGPSharedSecurityKeyTo("C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF");

  //GP Pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 09 28 02 78 56 34 12 02 05 0A 00 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(3000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 02 05 0A 00 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  //GP notification
  send("THProxy", "raw 0x0021 {11 07 00 90 52 78 56 34 12 01 00 00 00 22 FF 00 00 C5}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(1000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 02 05 0A 01 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  //GP notification
  send("THProxy", "raw 0x0021 {11 07 00 90 52 78 56 34 12 00 00 00 00 22 FF 00 00 C5}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(1000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 02 05 0A 01 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  //GP notification
  send("THProxy", "raw 0x0021 {11 07 00 10 52 78 56 34 12 02 00 00 00 22 FF 00 00 C5}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(1000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 02 05 0A 01 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  //GP notification
  send("THProxy", "raw 0x0021 {11 07 00 10 52 78 56 34 12 02 00 00 00 22 FF 00 00 C5}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(1000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 02 05 0A 01 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  //GP Pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0C 28 02 78 56 34 12 02 05 0B 00 00 00 00 CF CE CD CC CB CA C9 C8 C7 C6 C5 C4 C3 C2 C1 C0 FE");
  networkWait(5000);

  ReadEmptySinkTable();

  WriteGPSharedSecurityKeyTypeTo(0);
  //print ("]");
}


void Test_4_3_10()
{
  //print ("\nStart of 4.3.10 [");
  ReadEmptySinkTable();

  WriteCommissioningExitModeTo(2);

  WriteGPSCommissioningModeNoResponse(1);

  ReadGPSCommissioningMode();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[02 00 00 18 01 \\]");

  // Put sink in commissioning mode
  EnterCommissioning();

  // send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 7E FF FF FF FF 0C 78 56 34 12 E0 02 C1 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00}");
  networkWait(2000);

  // Exit sink in commissioning mode
  ExitCommissioning();

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 A8 02 78 56 34 12 02 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(1000);

  //GP notification
  send("THProxy", "raw 0x0021 {11 0E 00 90 14 78 56 34 12 10 00 00 00 22 FF}");
  send("THProxy", "send " + sinkId + " 242 242");
  networkWait(2000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 A8 02 78 56 34 12 02 00 12 10 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  //GP notification
  send("THProxy", "raw 0x0021 {11 0F 00 90 1C 78 56 34 12 11 00 00 00 22 00 00 00 5F}");
  send("THProxy", "send " + sinkId + " 242 242");
  networkWait(2000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 A8 02 78 56 34 12 02 00 12 11 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  //GP Pairing configuration
  sendGpPairingConfigWithRawPayload("11 07 09 0C 08 02 78 56 34 12 02 05 12 12 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(5000);

  ReadEmptySinkTable();
  //print ("]");
}

//////////////////////////////4.4.1.8////////////////////////////////////////

void Test_4_4_1_8()
{
  //print ("\nStart of 4.4.1.8 [");
  WriteCommissioningExitModeTo(4);

  ReadEmptySinkTable();

  // Put sink in commissioning mode
  EnterCommissioning();
  networkWait(5000);

  // Send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 0E FF FF FF FF 8C 00 78 56 34 12 E0 02 80 F2 AB BE AF 79 4C 0D 2D 09 6E B6 DF C6 5D 79 FE A7 67 31 42 6A 10 00 00 00}");
  networkWait(1000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 08 02 78 56 34 12 02 00 12 10 00 00 00 16 68 16 68 16 68 16 68 16 68 16 68 16 68 16 68 \\]");
  networkWait(10000);

  //Toggle
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 0F FF FF FF FF 8C 30 78 56 34 12 0F 00 00 00 22 95 76 E4 24}");
  networkWait(4000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 08 02 78 56 34 12 02 00 12 10 00 00 00 16 68 16 68 16 68 16 68 16 68 16 68 16 68 16 68 \\]");
  networkWait(10000);

  //GP Pairing configuration
  sendGpPairingConfigWithRawPayload("11 07 09 0C 08 02 78 56 34 12 02 05 12 10 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");

  ReadEmptySinkTable();

  // Put sink in commissioning mode
  EnterCommissioning();

  // Send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 0E FF FF FF FF 8C 00 78 56 34 12 E0 02 80 F1 AB BE AF 79 4C 0D 2D 09 6E B6 DF C6 5D 79 FE A7 67 31 42 6A 10 00 00 00}");
  networkWait(3000);

  ReadEmptySinkTable();

  // Exit commissioning mode
  ExitCommissioning();

  // Put sink in commissioning mode
  EnterCommissioning();

  // Send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 0E FF FF FF FF 8C 00 78 56 34 12 E0 02 80 D2 10 00 00 00}");
  networkWait(3000);

  ReadEmptySinkTable();

  // Exit commissioning mode
  ExitCommissioning();

  WriteGPSSecurityLevelTo(6);

  // Put sink in commissioning mode
  EnterCommissioning();

  // Send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 0E FF FF FF FF 8C 00 78 56 34 12 E0 02 80 B2 AB BE AF 79 4C 0D 2D 09 6E B6 DF C6 5D 79 FE A7 10 00 00 00}");
  networkWait(3000);

  ReadEmptySinkTable();

  // Exit commissioning mode
  ExitCommissioning();

  WriteGPSSecurityLevelTo(7);

  // Put sink in commissioning mode
  EnterCommissioning();

  // Send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 0E FF FF FF FF 8C 00 78 56 34 12 E0 02 80 F2 AB BE AF 79 4C 0D 2D 09 6E B6 DF C6 5D 79 FE A7 67 31 42 6A 10 00 00 00}");
  networkWait(3000);

  ReadEmptySinkTable();

  // Exit commissioning mode
  ExitCommissioning();

  WriteGPSSecurityLevelTo(6);

  // Put sink in commissioning mode
  EnterCommissioning();

  // Send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 0E FF FF FF FF 8C 00 78 56 34 12 E0 02 80 F2 AB BE AF 79 4C 0D 2D 09 6E B6 DF C6 5D 79 FE A7 BE BE BE BE 10 00 00 00}");
  networkWait(3000);

  ReadEmptySinkTable();

  // Exit commissioning mode
  ExitCommissioning();

  // Put sink in commissioning mode
  EnterCommissioning();

  // Send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 10 FF FF FF FF CC 00 78 56 34 12 E0 02 80 F2 AB BE AF 79 4C 0D 2D 09 6E B6 DF C6 5D 79 FE A7 67 31 42 6A 10 00 00 00}");
  networkWait(5000);

  // Send Unknown : Reserved
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 11 FF FF FF FF 8F 00 78 56 34 12 E0 02 80 F2 AB BE AF 79 4C 0D 2D 09 6E B6 DF C6 5D 79 FE A7 67 31 42 6A 10 00 00 00}");
  networkWait(5000);

  //Send GPD Data Frame
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 13 FF FF FF FF 8C 03 78 56 34 12 E0 02 80 F2 AB BE AF 79 4C 0D 2D 09 6E B6 DF C6 5D 79 FE A7 67 31 42 6A 10 00 00 00}");
  networkWait(5000);

  // Send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 14 FF FF FF FF 8C 80 78 56 34 12 E0 02 80 F2 AB BE AF 79 4C 0D 2D 09 6E B6 DF C6 5D 79 FE A7 67 31 42 6A 10 00 00 00}");
  networkWait(5000);

  ReadEmptySinkTable();

  // Exit commissioning mode
  ExitCommissioning();

  // Put sink in commissioning mode
  EnterCommissioning();

  // Send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 1E FF FF FF FF 8C 00 00 00 00 00 E0 02 80 F2 82 7C 7C 2B 60 7C B9 F6 3E 9A F3 9C F1 DD 01 0A 4C 71 99 FF 10 00 00 00}");
  networkWait(5000);

  // Send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 C8 20 FF FF FF FF 00 00 00 00 00 00 00 00 00 00 8C 02 00 E0 02 80 F2 82 7C 7C 2B 60 7C B9 F6 3E 9A F3 9C F1 DD 01 0A 4C 71 99 FF 10 00 00 00}");
  networkWait(5000);

  ReadEmptySinkTable();

  // Exit commissioning mode
  ExitCommissioning();

  // Put sink in commissioning mode
  EnterCommissioning();

  // Send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 2A FF FF FF FF 8C 00 78 56 34 12 E0 02 80 F2 AB BE AF 79 4C 0D 2D 09 6E B6 DF C6 5D 79 FE A7 67 31 42 6A 10 00 00 00}");
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 08 02 78 56 34 12 02 00 12 10 00 00 00 16 68 16 68 16 68 16 68 16 68 16 68 16 68 16 68 \\]");
  networkWait(10000);

  // Exit commissioning mode
  ExitCommissioning();

  // Send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 3C FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 E0 02 80 F2 AB BE AF 79 4C 0D 2D 09 6E B6 DF C6 5D 79 FE A7 67 31 42 6A 11 00 00 00 E0 8F AE B1}");
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 08 02 78 56 34 12 02 00 12 10 00 00 00 16 68 16 68 16 68 16 68 16 68 16 68 16 68 16 68 \\]");
  networkWait(10000);

  //GP Pairing configuration
  sendGpPairingConfigWithRawPayload("11 07 09 0C 08 02 78 56 34 12 02 05 12 10 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(1000);

  ReadEmptySinkTable();

  // Put sink in commissioning mode
  EnterCommissioning();

  // Send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 4C FF FF FF FF 8C 00 78 56 34 12 E0 02 88 F2 AB BE AF 79 4C 0D 2D 09 6E B6 DF C6 5D 79 FE A7 67 31 42 6A 10 00 00 00}");
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 08 02 78 56 34 12 02 00 12 10 00 00 00 16 68 16 68 16 68 16 68 16 68 16 68 16 68 16 68 \\]");
  networkWait(10000);

  // Exit commissioning mode
  ExitCommissioning();

  //GP Pairing configuration
  sendGpPairingConfigWithRawPayload("11 17 09 0C 08 02 78 56 34 12 02 05 12 10 00 00 00 16 68 16 68 16 68 16 68 16 68 16 68 16 68 16 68 FE");
  networkWait(1000);

  ReadEmptySinkTable();

  // Put sink in commissioning mode
  EnterCommissioning();

  // Send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 6A FF FF FF FF 88 77 66 55 44 33 22 11 8C 02 FF E0 02 81 F2 25 1A F3 AA A3 CB D6 DD 7F E9 18 36 DD EB 90 BC 24 72 5E FA 0F 00 00 00}");
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 22 00 2A 02 88 77 66 55 44 33 22 11 FF 02 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(10000);

  // Exit commissioning mode
  ExitCommissioning();

  //Toggle
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 80 FF FF FF FF 88 77 66 55 44 33 22 11 8C 32 99 11 00 00 00 22 3C D1 4E 91}");
  networkWait(3000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 22 00 2A 02 88 77 66 55 44 33 22 11 FF 02 00 12 11 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(1000);

  //Toggle
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 84 FF FF FF FF 88 77 66 55 44 33 22 11 8C 32 FF 12 00 00 00 22 CD 36 E8 17}");
  networkWait(3000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 22 00 2A 02 88 77 66 55 44 33 22 11 FF 02 00 12 12 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(1000);

  //GP Pairing configuration
  sendGpPairingConfigWithRawPayload("11 1E 09 0C 0A 02 88 77 66 55 44 33 22 11 FF 02 05 12 10 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(2000);

  ReadEmptySinkTable();
  //print ("]");
}
void Test_4_4_1_11()
{
  //print ("\nStart of 4.4.1.11 [");

  WriteGPSCommissioningModeNoResponse(1);
  WriteCommissioningExitModeNoResponse(4);
  WriteGPSSecurityLevelToNoResponse(6);
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  WriteGPSharedSecurityKeyTypeTo(2);
  WriteGPSharedSecurityKeyTo("B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF");

  EnterCommissioning();
  networkWait(6000);

  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A4 FF FF FF FF 8C 00 78 56 34 12 E0 FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20}");
  networkWait(6000);

  // Application Description
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A9 FF FF FF FF 8C 00 78 56 34 12 E4 01 01 00 00 08 08 06 04 00 00 18 10 00}");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 01 00 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 \\]");
  networkWait(6000);

  // Compact Attribute Reporting
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 BD FF FF FF FF 8C 30 78 56 34 12 12 00 00 00 A8 00 01 02 03 04 7E 7D 3C 1F}");
  networkWait(6000);

  decommissionGPD();

  //print ("]");
}
// Expect commisioning Reply Should be added to the script//////////////
void Test_4_4_1_15()
{
  //print ("\nStart of 4.4.1.15 [");
  WriteGPSCommissioningModeNoResponse(1);

  WriteCommissioningExitModeNoResponse(4);

  WriteGPSSecurityLevelToNoResponse(6);

  ReadEmptySinkTable();
  networkWait(1000);

  // Translation table request
  GpTranslationRequestIndex0Empty();
  WriteGPSharedSecurityKeyTypeTo(2);
  WriteGPSharedSecurityKeyTo("B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF");

  // Put sink in commissioning mode
  EnterCommissioning();

  // Send GPD Channel Request
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 7A FF FF FF FF 0D E3 00}");
  networkWait(5000);

  // Send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 7B FF FF FF FF 8C 40 78 56 34 12 E0 07 A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 14 03 69 6A 69 02 04 01}");
  networkWait(2000);

  // Send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 82 FF FF FF FF 8C 40 78 56 34 12 E0 07 A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 10 00 00 00 14 03 69 6A 69 02 04 01}");
  networkWait(2000);

  // Send Sucess
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 8A FF FF FF FF 8C 10 78 56 34 12 11 00 00 00 E2 48 B7 29 84}");

  //Expect commissioning Notification
  //expect("gpd1","*clus 0x0021 \\(Green Power\\) FC 11 seq .. cmd 04 payload\\[20 0A 78 56 34 12 11 00 00 00 E2 00 72 80 FB 48 B7 29 84 \\]");

  networkWait(1000);

  // Exit commissioning mode
  ExitCommissioning();
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 07 00 0A 11 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF \\]");
  networkWait(1000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 01 00 01 78 56 34 12 69 01 04 01 06 00 02 00 03 01 01 01 \\]");

  // Put sink in commissioning mode
  EnterCommissioning();

  // Send Channel Request
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 9D FF FF FF FF 4D E3 00}");
  networkWait(5000);

  // Send GPD Channel Request
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A4 FF FF FF FF 0D E3 00}");
  networkWait(5000);

  // Send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A5 FF FF FF FF 8C 40 78 56 34 12 E0 07 A5 EA 0D 67 0B A2 EE D0 8D D6 C0 67 73 15 F7 AC 56 70 D0 74 B0 F2 12 00 00 00 14 03 69 6A 69 02 04 02}");
  networkWait(2000);

  // Send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 AB FF FF FF FF 8C 40 78 56 34 12 E0 07 A5 EA 0D 67 0B A2 EE D0 8D D6 C0 67 73 15 F7 AC 56 70 D0 74 B0 F2 13 00 00 00 14 03 69 6A 69 02 04 02}");
  networkWait(2000);

  // Send Sucess
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 B3 FF FF FF FF 8C 10 78 56 34 12 14 00 00 00 E2 C3 AC 9C 0B}");
  networkWait(5000);

  // Exit commissioning mode
  ExitCommissioning();
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 07 00 0A 14 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF \\]");
  networkWait(1000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 02 00 02 78 56 34 12 69 01 04 01 06 00 00 00 03 01 01 01 78 56 34 12 69 01 04 01 06 00 01 00 03 01 02 02 \\]");
  networkWait(5000);

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0C 08 00 78 56 34 12 07 05 FE");
  //Expect GP Pairing
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[30 00 00 78 56 34 12 \\]");
  networkWait(2000);

  ReadEmptySinkTable();

  //Expect Empty Translation Table
  GpTranslationRequestIndex0Empty();
  WriteGPSharedSecurityKeyTypeTo(0);
  WriteGPSharedSecurityKeyTo("00000000000000000000000000000000");
  //print ("]");
}

void Test_4_4_1_19()
{
  //print ("\nStart of 4.4.1.19 [");
  WriteCommissioningExitModeNoResponse(4);

  ReadEmptySinkTable();

  WriteGPSharedSecurityKeyTypeTo(0);
  WriteGPSharedSecurityKeyTo("00000000000000000000000000000000");

  // Put sink in commissioning mode
  EnterCommissioning();

  // Send Channel Request
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 72 FF FF FF FF 4D E3 00}");
  networkWait(2000);
  // Send GPD Channel Request
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 79 FF FF FF FF 0D E3 00}");
  networkWait(5000);

  // Send Commisioning with OOB key with Key request set to trigger generation of commissioning Reply
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 C0 FF FF FF FF 8C 40 78 56 34 12 E0 02 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 00}");
  networkWait(2000);

  // Send Commisioning with OOB key with Key request to get the commissioning reply in the queue
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 C7 FF FF FF FF 8C 40 78 56 34 12 E0 02 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 10 00 00 00 00}");
  networkWait(2000);

  // Send Sucess
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 CE FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 E2 40 5A D3 94}");
  networkWait(5000);

  // Exit sink commissioning mode
  ExitCommissioning();

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 02 00 12 11 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  networkWait(2000);

  // Put sink in commissioning mode
  EnterCommissioning();

  // Send Channel Request
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 72 FF FF FF FF 4D E3 00}");
  networkWait(2000);
  // Send GPD Channel Request
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 79 FF FF FF FF 0D E3 00}");
  networkWait(5000);

  // Send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E9 FF FF FF FF 8C 40 78 56 34 12 E0 02 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 12 00 00 00 00}");
  networkWait(2000);

  // Send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 ED FF FF FF FF 8C 40 78 56 34 12 E0 02 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 13 00 00 00 00}");
  networkWait(2000);

  // Send Sucess
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F1 FF FF FF FF 8C 30 78 56 34 12 14 00 00 00 E2 41 D8 5A D1}");
  networkWait(5000);

  // Exit sink in commissioning mode
  ExitCommissioning();

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 02 00 12 14 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(1000);

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0C 08 00 78 56 34 12 07 05 FE");
  //Expect GP Pairing
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[30 00 00 78 56 34 12 \\]");
  networkWait(1000);

  ReadEmptySinkTable();

  GpTranslationRequestIndex0Empty();
  //print ("]");
}

void Test_4_4_1_20()
{
  //print ("\nStart of 4.4.1.20 [");
  WriteGPSCommissioningModeNoResponse(1);

  WriteCommissioningExitModeNoResponse(4);

  ReadEmptySinkTable();

  WriteGPSharedSecurityKeyTypeTo(0);
  WriteGPSharedSecurityKeyTo("00000000000000000000000000000000");

  // Put sink in commissioning mode
  EnterCommissioning();

  // Send Channel Request
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 72 FF FF FF FF 4D E3 00}");
  networkWait(5000);

  // Send GPD Channel Request
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 79 FF FF FF FF 0D E3 00}");

  // Send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F6 FF FF FF FF 8C 40 78 56 34 12 E0 07 A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 14 03 69 6A 69 02 04 01}");
  networkWait(2000);

  // Send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 FD FF FF FF FF 8C 40 78 56 34 12 E0 07 A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 10 00 00 00 14 03 69 6A 69 02 04 01}");
  networkWait(2000);

  // Send Sucess
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 04 FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 E2 40 5A D3 94}");
  networkWait(5000);

  // Exit sink in commissioning mode
  ExitCommissioning();

  try{
  //Group cast Radius is not as Expected on Sink Table
  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 07 05 12 11 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(1000);
  }catch (Exception ex){
  //print ("Test Warning : Group cast Radius is not as Expected on Sink Table");
  }

  //Number of Entries is not as Expecetd
  try{
  // Translation table request
  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 01 00 01 78 56 34 12 69 0A 04 01 06 00 02 FE 03 01 01 FF \\]");
  }catch (Exception ex){
  //print ("Test is FAILED : Number of Entries is not as Expecetd");
  }

  // Put sink in commissioning mode
  EnterCommissioning();

  // Send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 17 FF FF FF FF 8C 00 78 56 34 12 E0 07 A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 13 00 00 00 14 03 69 6A 69 02 04 02}");
  networkWait(3000);

  // Exit sink commissioning mode
  ExitCommissioning();

  try{
  //Group cast Radius is not as Expected on Sink Table
  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 07 05 12 13 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(1000);
  }catch (Exception ex){
  //print ("Test Warning : Group cast Radius is not as Expected on Sink Table");
  }

  //Number of Entries is not as Expecetd
  try{
  // Translation table request
  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 02 00 02 78 56 34 12 69 0A 04 01 06 00 02 FE 03 01 01 FF 78 56 34 12 69 0A 04 01 06 00 02 FE 03 01 02 FF \\]");
  }catch (Exception ex){
  //print ("Test is FAILED : Number of Entries is not as Expecetd");
  }

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0C 18 00 78 56 34 12 07 05 FE");
  networkWait(2000);

  ReadEmptySinkTable();

  GpTranslationRequestIndex0Empty();
  //print ("]");
}
void Test_4_4_1_21()
{
  //print ("\nStart of 4.4.1.21 [");

  WriteGPSCommissioningModeNoResponse(1);
  WriteCommissioningExitModeNoResponse(4);
  ReadEmptySinkTable();
  WriteGPSharedSecurityKeyTypeTo(0);
  WriteGPSharedSecurityKeyTo("00000000000000000000000000000000");

  EnterCommissioning();
  networkWait(5000);

  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 CA FF FF FF FF 8C 00 78 56 34 12 E0 07 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 11 00 00 00 14 03 69 6A 07 02 04 01}");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 07 00 12 11 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  try{
  // Translation table request
  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 02 00 02 78 56 34 12 69 01 04 01 06 00 01 00 03 01 01 FF 78 56 34 12 6A 01 04 01 08 00 03 00 03 01 01 FF \\]");
  }catch (Exception ex){
  //print ("Test is FAILED : The Number of Entries is not as expecetd, Release command is not on Translation Table.");
  }

  EnterCommissioning();
  networkWait(5000);

  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E2 FF FF FF FF 8C 00 78 56 34 12 E0 07 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 13 00 00 00 14 03 69 6A 07 02 04 02}");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 07 00 12 13 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  try{
  // Translation table request
  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 04 00 04 78 56 34 12 69 01 04 01 06 00 01 00 03 01 01 FF 78 56 34 12 6A 01 04 01 08 00 03 00 03 01 01 FF 78 56 34 12 69 01 04 01 06 00 01 00 03 01 02 FF 78 56 34 12 6A 01 04 01 08 00 03 00 03 01 02 FF \\]");
  }catch (Exception ex){
  //print ("Test is FAILED : The Number of Entries is not as expecetd, Release command is not on Translation Table.");
  }

  decommissionGPD();

  //print ("]");
}
void Test_4_4_2_7_step_1_3()
{
  //print ("\nStart of 4.4.2.7  Step 1-3 [");

  WriteGPSCommissioningModeNoResponse(1);
  networkWait(1000);

  ReadEmptySinkTable();
  networkWait(1000);

  EnterCommissioning();

  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 18 04 00 08 00 00 00 00 0F 00 00 00 E3 01 00 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(10000);

  ExitCommissioning();
  networkWait(10000);

  // Put sink in commissioning mode
  EnterCommissioning();

  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 18 04 00 08 00 00 00 00 0F 00 00 00 E3 01 00 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(10000);

  WriteGPSharedSecurityKeyTypeTo(2);
  networkWait(1000);

  WriteGPSharedSecurityKeyTo("C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF");
  networkWait(1000);

  WriteGPSharedSecurityKeyTypeTo(2);
  networkWait(1000);

  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 18 04 08 08 78 56 34 12 20 00 00 00 E0 1B 02 A1 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 20 00 00 00 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
  //Expect GP  Response
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 78 56 34 12 F0 19 56 9C 12 14 9D 85 AD 2B 10 77 A1 A8 0A 50 DC A0 3F CD 5D 3B 83 21 00 00 00 \\]");
  networkWait(20000);

  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 1A 04 A0 08 78 56 34 12 23 00 00 00 E2 00 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");

  try{
  //Expect GP  Pairing
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 D5 00 78 56 34 12 78 56 02 23 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(5000);
  }catch (Exception ex){
  //print ("Test is FAILED : Forwarding radiuse Present is not as Expected ");
  }
  networkWait(1000);

  ExitCommissioning();
  networkWait(2000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 02 00 0A 23 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(5000);

  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 1A 04 A0 08 78 56 34 12 24 00 00 00 E2 00 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 18 09 0C 08 02 78 56 34 12 02 05 12 26 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");

  try{
  //Expect GP  Pairing
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[10 00 00 78 56 34 12 \\]");
  networkWait(5000);
  }catch (Exception ex){
  //print ("Test is FAILED : Commissioning Mode is not as Expected ");
  }
  networkWait(3000);

  ReadEmptySinkTable();
  networkWait(1000);

  // Put sink in commissioning mode
  EnterCommissioning();

  //GP  commissioning Notification
  GPcommNotificationChannelRequst();
  //Expect GP  Response
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 00 00 00 00 F3 01 10 \\]");
  networkWait(6000);

  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 19 04 08 08 78 56 34 12 21 00 00 00 E0 1B 02 A1 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 21 00 00 00 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");

  networkWait(7000);

  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 7A 04 00 08 78 56 34 12 24 00 00 00 E2 00 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
  //line 240 Golden unif log
  ReadEmptySinkTable();
  networkWait(1000);

  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 1A 04 20 0A 78 56 34 12 20 00 00 00 E2 00 00 00 FC 1C 96 08 20}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(3000);

  ReadEmptySinkTable();
  networkWait(1000);

  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 1A 04 20 0B 78 56 34 12 25 00 00 00 E2 00 00 00 FC CC 6D 2A 5B}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(3000);

  ReadEmptySinkTable();
  networkWait(1000);

  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 1A 04 20 0A 78 56 34 12 25 00 00 00 E2 00 00 00 FC BE BE BE BE}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(3000);

  ReadEmptySinkTable();
  networkWait(1000);

  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 1A 04 20 0A 44 33 22 11 26 00 00 00 E2 00 00 00 FC 0D C1 21 E3}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(3000);

  ReadEmptySinkTable();
  networkWait(1000);

  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 1A 04 A0 08 78 56 34 12 20 00 00 00 E2 00 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(3000);

  ReadEmptySinkTable();
  networkWait(1000);

  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 1A 04 20 09 78 56 34 12 20 00 00 00 E2 00 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(3000);

  ReadEmptySinkTable();
  networkWait(1000);

  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 1A 04 A0 08 44 33 22 11 27 00 00 00 E2 00 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(3000);

  ReadEmptySinkTable();
  networkWait(1000);

  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 1A 04 A0 08 78 56 34 12 00 00 00 00 E2 00 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(3000);

  ReadEmptySinkTable();
  networkWait(1000);

  ExitCommissioning();

  EnterCommissioning();
  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 1A 04 A0 08 78 56 34 12 27 00 00 00 E2 00 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(3000);

  ReadEmptySinkTable();
  networkWait(1000);

  ExitCommissioning();

  EnterCommissioning();
  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 18 04 08 08 00 00 00 00 0F 00 00 00 E3 01 06 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(3000);

  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 39 04 0A 08 88 77 66 55 44 33 22 11 99 22 00 00 00 E0 1B 02 A1 F2 25 1A F3 AA A3 CB D6 DD 7F E9 18 36 DD EB 90 BC 24 72 5E FA 22 00 00 00 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(3000);

  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 5A 04 22 0A 88 77 66 55 44 33 22 11 99 24 00 00 00 E2 00 00 00 FC BE BE BE BE}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(3000);

  ReadEmptySinkTable();
  networkWait(1000);

  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 5A 04 A2 08 00 00 00 00 44 33 22 11 99 25 00 00 00 E2 00 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(3000);

  ReadEmptySinkTable();
  networkWait(1000);

  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 5A 04 A2 08 88 77 66 55 44 33 22 11 55 27 00 00 00 E2 00 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(3000);

  ReadEmptySinkTable();
  networkWait(1000);

  ExitCommissioning();

  WriteGPSharedSecurityKeyTypeToNoResponse(2);
  //print ("]");
}
void Test_4_4_2_7_step_4A()
{
  //print ("\nStart of 4.4.2.7  Step 4A [");
  WriteGPSCommissioningModeNoResponse(1);
  WriteGPSharedSecurityKeyTypeTo(2);
  WriteGPSharedSecurityKeyTo("C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF");
  WriteGPSharedSecurityKeyTypeTo(2);
  ReadEmptySinkTable();

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast // Channel request
  sendGpNotificationWithRawPayload("11 18 04 08 08 00 00 00 00 0F 00 00 00 E3 01 66 00 00 FC");
  networkWait(5000);

  //GP commissioning Notification Bcast // Channel request
  sendGpNotificationWithRawPayload("11 18 04 08 08 00 00 00 00 10 00 00 00 E3 01 66 00 00 FC");
  networkWait(5000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 18 04 08 08 78 56 34 12 20 00 00 00 E0 1B 02 A1 F3 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 20 00 00 00 00 00 FC");
  networkWait(5000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 19 04 08 08 78 56 34 12 21 00 00 00 E0 1B 02 A1 F3 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 21 00 00 00 00 00 FC");
  networkWait(5000);

  //GP commissioning Notification Bcast // command BF
  sendGpNotificationWithRawPayload("11 1A 04 30 0A 78 56 34 12 23 00 00 00 BF 00 00 00 FC 42 2B C9 3C");
  networkWait(5000);

  ExitCommissioning();
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 02 00 0B 23 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  ExitCommissioning();
  networkWait(6000);

  greenPowerServerCleanUp();

  ReadEmptySinkTable();

  WriteGPSharedSecurityKeyTypeToNoResponse(0);
  //print ("]");
}
void Test_4_4_2_7_step_4B()
{
  //print ("\nStart of 4.4.2.7  Step 4B [");
  WriteGPSCommissioningModeNoResponse(1);
  WriteGPSharedSecurityKeyTypeTo(2);
  WriteGPSharedSecurityKeyTo("C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF");
  WriteGPSharedSecurityKeyTypeTo(2);
  ReadEmptySinkTable();

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast // Channel request
  sendGpNotificationWithRawPayload("11 18 04 08 08 00 00 00 00 0F 00 00 00 E3 01 66 00 00 FC");
  networkWait(5000);

  //GP commissioning Notification Bcast // Channel request
  sendGpNotificationWithRawPayload("11 18 04 08 08 00 00 00 00 10 00 00 00 E3 01 66 00 00 FC");
  networkWait(5000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 18 04 08 08 78 56 34 12 20 00 00 00 E0 1B 02 A1 F3 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 20 00 00 00 00 00 FC");
  networkWait(5000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 19 04 08 08 78 56 34 12 21 00 00 00 E0 1B 02 A1 F3 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 21 00 00 00 00 00 FC");
  networkWait(5000);

  //GP commissioning Notification Bcast // Success
  sendGpNotificationWithRawPayload("11 1A 04 20 0A 78 56 34 12 23 00 00 00 E2 00 00 00 FC E4 B1 03 F6");
  networkWait(5000);

  ReadEmptySinkTable();

  ExitCommissioning();
  networkWait(6000);

  WriteGPSharedSecurityKeyTypeToNoResponse(0);

  //print ("]");
}

void Test_4_4_2_7_step_5_6()
{
  //print ("\nStart of 4.4.2.7  Step 5-6 [");
  WriteGPSCommissioningModeTo(1);
  WriteGPSSecurityLevelTo(0);
  WriteGPSharedSecurityKeyTypeTo(2);
  WriteGPSharedSecurityKeyTo("C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF");
  WriteCommissioningExitModeTo(2);
  ReadEmptySinkTable();

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast // Channel request
  sendGpNotificationWithRawPayload("11 18 04 08 08 00 00 00 00 0F 00 00 00 E3 01 66 00 00 FC");
  networkWait(5000);

  //GP commissioning Notification Bcast // Channel request
  sendGpNotificationWithRawPayload("11 18 04 08 08 00 00 00 00 10 00 00 00 E3 01 66 00 00 FC");
  networkWait(5000);

  ExitCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 18 04 08 08 78 56 34 12 20 00 00 00 E0 1B 02 A1 F1 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 20 00 00 00 00 00 FC");
  networkWait(5000);

  ReadEmptySinkTable();

  ExitCommissioning();
  networkWait(6000);

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast // Channel request
  sendGpNotificationWithRawPayload("11 18 04 08 08 00 00 00 00 0F 00 00 00 E3 01 66 00 00 FC");
  networkWait(5000);

  //GP commissioning Notification Bcast // Channel request
  sendGpNotificationWithRawPayload("11 18 04 08 08 00 00 00 00 10 00 00 00 E3 01 66 00 00 FC");
  networkWait(5000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 18 04 08 08 78 56 34 12 20 00 00 00 E0 07 02 81 C2 20 00 00 00 00 00 FC");
  networkWait(5000);

  ReadEmptySinkTable();

  ExitCommissioning();
  networkWait(6000);

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast // Channel request
  sendGpNotificationWithRawPayload("11 18 04 08 08 00 00 00 00 0F 00 00 00 E3 01 66 00 00 FC");
  networkWait(5000);

  //GP commissioning Notification Bcast // Channel request
  sendGpNotificationWithRawPayload("11 18 04 08 08 00 00 00 00 10 00 00 00 E3 01 66 00 00 FC");
  networkWait(5000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 18 04 08 08 00 00 00 00 20 00 00 00 E0 1B 02 A1 F2 82 7C 7C 2B 60 7C B9 F6 3E 9A F3 9C F1 DD 01 0A 4C 71 99 FF 20 00 00 00 00 00 FC");
  networkWait(5000);

  ReadEmptySinkTable();

  ExitCommissioning();
  networkWait(6000);

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast // Channel request
  sendGpNotificationWithRawPayload("11 18 04 08 08 00 00 00 00 0F 00 00 00 E3 01 66 00 00 FC");
  networkWait(5000);

  //GP commissioning Notification Bcast // Channel request
  sendGpNotificationWithRawPayload("11 18 04 08 08 00 00 00 00 10 00 00 00 E3 01 66 00 00 FC");
  networkWait(5000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 18 04 0A 08 00 00 00 00 00 00 00 00 00 20 00 00 00 E0 1B 02 A1 F2 82 7C 7C 2B 60 7C B9 F6 3E 9A F3 9C F1 DD 01 0A 4C 71 99 FF 20 00 00 00 00 00 FC");
  networkWait(5000);

  ReadEmptySinkTable();

  ExitCommissioning();
  networkWait(6000);

  WriteGPSharedSecurityKeyTypeToNoResponse(0);
  //print ("]");
}
void Test_4_4_2_8()
{
  //print ("\n  Start of 4.4.2.8 [");
  WriteGPSCommissioningModeNoResponse(1);
  WriteCommissioningExitModeTo(2);
  WriteGPSSecurityLevelTo(6);
  ReadEmptySinkTable();

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 18 04 00 08 78 56 34 12 20 00 00 00 E0 1B 02 81 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 20 00 00 00 00 00 FC");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 02 00 12 20 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  networkWait(6000);
  greenPowerServerCleanUp();

  ReadEmptySinkTable();

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 18 04 00 08 78 56 34 12 20 00 00 00 E0 1B 02 A1 F1 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 20 00 00 00 00 00 FC");
  networkWait(6000);

  ReadEmptySinkTable();
  networkWait(1000);

  ExitCommissioning();
  networkWait(6000);

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 18 04 00 08 78 56 34 12 20 00 00 00 E0 03 02 81 02 00 00 FC");
  networkWait(6000);

  ReadEmptySinkTable();

  ExitCommissioning();
  networkWait(6000);

  WriteGPSSecurityLevelToNoResponse(6);

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 18 04 00 08 78 56 34 12 20 00 00 00 E0 17 02 A1 B2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 20 00 00 00 00 00 FC");
  networkWait(6000);

  ReadEmptySinkTable();

  ExitCommissioning();
  networkWait(6000);

  WriteGPSSecurityLevelToNoResponse(7);

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 18 04 00 08 78 56 34 12 20 00 00 00 E0 1B 02 81 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 20 00 00 00 00 00 FC");
  networkWait(6000);

  ReadEmptySinkTable();

  ExitCommissioning();
  networkWait(6000);

  WriteGPSSecurityLevelToNoResponse(6);

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast
  sendGpNotificationWithRawPayload("11 78 04 03 08 78 56 34 12 20 00 00 00 E0 1B 02 81 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 20 00 00 00 00 00 FC");
  networkWait(6000);

  ReadEmptySinkTable();

  ExitCommissioning();
  networkWait(6000);

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast
  sendGpNotificationWithRawPayload("11 48 04 00 08 00 00 00 00 20 00 00 00 E0 1B 02 A1 F2 82 7C 7C 2B 60 7C B9 F6 3E 9A F3 9C F1 DD 01 0A 4C 71 99 FF 20 00 00 00 00 00 FC");
  networkWait(6000);

  ReadEmptySinkTable();

  ExitCommissioning();
  networkWait(6000);

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast
  sendGpNotificationWithRawPayload("11 38 04 02 08 00 00 00 00 00 00 00 00 00 20 00 00 00 E0 1B 02 81 F2 82 7C 7C 2B 60 7C B9 F6 3E 9A F3 9C F1 DD 01 0A 4C 71 99 FF 20 00 00 00 00 00 FC");
  networkWait(6000);

  ReadEmptySinkTable();

  ExitCommissioning();
  networkWait(6000);

  greenPowerServerCleanUp();

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast
  sendGpNotificationWithRawPayload("11 18 04 00 08 78 56 34 12 20 00 00 00 E0 1B 02 81 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 20 00 00 00 00 00 FC");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 02 00 12 20 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  networkWait(6000);

  greenPowerServerCleanUp();

  ReadEmptySinkTable();

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast
  sendGpNotificationWithRawPayload("11 18 04 00 08 78 56 34 12 20 00 00 00 E0 20 02 89 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 20 00 00 00 E4 E3 E2 E1 E0 00 00 FC");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 02 00 12 20 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  networkWait(6000);

  greenPowerServerCleanUp();
  ReadEmptySinkTable();

  WriteGPSharedSecurityKeyTypeToNoResponse(0);

  //print ("]");
}
void Test_4_4_2_9()
{
  //print ("\n  Start of 4.4.2.9 [");

  WriteGPSCommissioningModeNoResponse(1);
  WriteCommissioningExitModeNoResponse(4);
  WriteGPSSecurityLevelToNoResponse(6);
  ReadEmptySinkTable();
  WriteGPSharedSecurityKeyTypeTo(0);
  WriteGPSharedSecurityKeyTo("00000000000000000000000000000000");

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 18 04 00 08 78 56 34 12 20 00 00 00 E0 1C FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Application Description
  sendGpNotificationWithRawPayload("11 18 04 00 08 78 56 34 12 2B 00 00 00 E4 0D 01 01 00 00 08 08 06 04 00 00 18 10 00 00 00 FC");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 01 00 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 \\]");

  decommissionGPD();

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 18 04 02 08 88 77 66 55 44 33 22 11 99 20 00 00 00 E0 1C FE 85 F2 25 1A F3 AA A3 CB D6 DD 7F E9 18 36 DD EB 90 BC 24 72 5E FA 0F 00 00 00 20 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Application Description
  sendGpNotificationWithRawPayload("11 18 04 02 08 88 77 66 55 44 33 22 11 99 2B 00 00 00 E4 0D 01 01 00 00 08 08 06 04 00 00 18 10 00 00 00 FC");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 22 00 2A 02 88 77 66 55 44 33 22 11 99 FE 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 0A 01 00 01 88 77 66 55 44 33 22 11 99 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 \\]");

  //GP Pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0C 0A 00 88 77 66 55 44 33 22 11 99 FE 05 FE");
  networkWait(1000);

  ReadEmptySinkTable();
  WriteGPSharedSecurityKeyTypeTo(0);

  //print ("]");
}
void Test_4_4_2_10()
{
  //print ("\n  Start of 4.4.2.10 //[");
  WriteGPSCommissioningModeNoResponse(1);

  WriteCommissioningExitModeNoResponse(4);

  WriteGPSSecurityLevelToNoResponse(6);

  ReadEmptySinkTable();

  GpTranslationRequestIndex0Empty();
  WriteGPSharedSecurityKeyTypeTo(0);
  WriteGPSharedSecurityKeyTo("00000000000000000000000000000000");

  EnterCommissioning();

  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 18 04 00 08 78 56 34 12 20 00 00 00 E0 1C FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(8000);

  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 18 04 00 08 78 56 34 12 2B 00 00 00 E4 0D 03 01 00 00 08 08 76 98 00 00 29 10 00 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(8000);

  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 18 04 00 08 78 56 34 12 2B 00 00 00 E4 0D 03 01 01 00 08 08 76 98 00 00 29 10 00 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(8000);

  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 18 04 00 08 78 56 34 12 2B 00 00 00 E4 0D 03 01 02 00 08 08 06 04 00 00 29 10 00 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(8000);

  ExitCommissioning();

  try{
  //Group cast Radius is not as Expected on Sink Table
  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(1000);
  }catch (Exception ex){
  //print ("Test Warning : Group cast Radius is not as Expected on Sink Table");
  }

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 01 00 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 02 00 06 04 00 00 29 01 \\]");
  networkWait(1000);

  //GP notification
  send("THProxy", "raw 0x0021 {11 0E 00 90 74 78 56 34 12 10 00 00 00 A8 05 02 01 02 03 04 00 00 5F}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(1000);

  //GP Pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0C 08 00 78 56 34 12 FE 05 FE");
  networkWait(1000);

  ReadEmptySinkTable();

  EnterCommissioning();

  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 18 04 00 08 78 56 34 12 20 00 00 00 E0 1C FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(3000);

  //Compact attribute reporting
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 CE FF FF FF FF 8C 30 50 00 5F 01 CE 55 AA AA A8 00 00 1B 10 20 8C}");
  networkWait(3000);
  //Compact attribute reporting
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 CE FF FF FF FF 8C 30 50 00 5F 01 CE 55 AA AA A8 00 00 1B 10 20 8C}");
  networkWait(3000);
  //Compact attribute reporting
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 CE FF FF FF FF 8C 30 50 00 5F 01 CE 55 AA AA A8 00 00 1B 10 20 8C}");
  networkWait(3000);

  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 18 04 00 08 78 56 34 12 2B 00 00 00 E4 0D 02 01 00 00 07 08 06 04 00 00 29 10 00 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(3000);

  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 18 04 00 08 78 56 34 12 2C 00 00 00 E4 0D 02 01 01 00 07 08 06 04 00 00 29 10 00 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(3000);

  ExitCommissioning();
  networkWait(3000);

  try{
  //Group cast Radius is not as Expected on Sink Table
  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(1000);
  }catch (Exception ex){
  //print ("Test Warning : Group cast Radius is not as Expected on Sink Table");
  }

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 02 00 02 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 29 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 01 00 06 04 00 00 29 01 \\]");
  networkWait(1000);

  GpTranslationRequestIndex(1);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 02 01 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 01 00 06 04 00 00 29 01 \\]");
  networkWait(1000);

  //GP notification
  send("THProxy", "raw 0x0021 {11 0E 00 90 74 78 56 34 12 10 00 00 00 A8 05 00 01 02 03 04 00 00 5F}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(1000);

  //GP Pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0C 08 00 78 56 34 12 FE 05 FE");
  networkWait(1000);

  ReadEmptySinkTable();

  EnterCommissioning();

  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 18 04 00 08 78 56 34 12 20 00 00 00 E0 1C FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(5000);

  ExitCommissioning();

  ReadEmptySinkTable();

  GpTranslationRequestIndex0Empty();
  EnterCommissioning();

  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 18 04 00 08 78 56 34 12 20 00 00 00 E0 1C FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(5000);

  ExitCommissioning();

  ReadEmptySinkTable();
  networkWait(1000);

  GpTranslationRequestIndex0Empty();
  EnterCommissioning();

  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 18 04 00 08 78 56 34 12 20 00 00 00 E0 1C FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(5000);

  ReadEmptySinkTable();
  networkWait(1000);

  GpTranslationRequestIndex0Empty();
  networkWait(1000);

  EnterCommissioning();

  //GP  commissioning Notification
  send("THProxy", "raw 0x0021 {11 18 04 00 08 78 56 34 12 2B 00 00 00 E4 0D 02 01 00 00 07 08 02 04 00 00 29 10 00 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(5000);

  ReadEmptySinkTable();

  GpTranslationRequestIndex0Empty();
  networkWait(1000);
  //print ("]");
}

void Test_4_4_2_11()
{
  //print ("\n  Start of 4.4.2.11 [");

  WriteGPSCommissioningModeNoResponse(1);
  WriteCommissioningExitModeNoResponse(4);
  WriteGPSSecurityLevelToNoResponse(6);
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  WriteGPSharedSecurityKeyTypeTo(2);
  WriteGPSharedSecurityKeyTo("B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF");

  EnterCommissioning();

  //GP commissioning Notification Bcast // Channel request
  sendGpNotificationWithRawPayload("11 18 04 08 08 00 00 00 00 0F 00 00 00 E3 01 00 00 00 FC");
  networkWait(5000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 18 04 00 08 78 56 34 12 20 00 00 00 E0 1C FE A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20 00 00 FC");
  networkWait(5000);

  //GP commissioning Notification Bcast // Application Description
  sendGpNotificationWithRawPayload("11 18 04 08 08 78 56 34 12 2B 00 00 00 E4 0D 01 01 00 00 07 08 06 04 00 00 18 10 00 00 00 FC");
  networkWait(5000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 19 04 00 08 78 56 34 12 10 00 00 00 E0 1C FE A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 10 00 00 00 20 00 00 FC");
  networkWait(5000);

  //GP commissioning Notification Bcast // Application Description
  sendGpNotificationWithRawPayload("11 18 04 08 08 78 56 34 12 2C 00 00 00 E4 0D 01 01 00 00 07 08 06 04 00 00 18 10 00 00 00 FC");
  networkWait(5000);

  //GP commissioning Notification Bcast // Success
  sendGpNotificationWithRawPayload("11 1A 04 A0 0A 78 56 34 12 11 00 00 00 E2 00 00 00 FC 48 B7 29 84");
  networkWait(5000);

  ExitCommissioning();

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 00 0A 11 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF \\]");

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 01 00 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 \\]");

  decommissionGPD();

  //print ("]");
}

void Test_4_4_2_12()
{
  //print ("\n  Start of 4.4.2.12  //[");
  WriteGPSCommissioningModeNoResponse(1);
  WriteCommissioningExitModeNoResponse(4);
  WriteGPSSecurityLevelToNoResponse(6);
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();

  WriteGPSharedSecurityKeyTypeTo(2);
  WriteGPSharedSecurityKeyTo("B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF");

  EnterCommissioning();
  networkWait(1000);
  GPcommNotificationChannelRequst();
  networkWait(6000);

  // TODO : Following is commented as there is no need to repeat the commissioning packet - lets review
  //GP  commissioning Notification //commissioning E0
  send("THProxy", "raw 0x0021 {11 18 04 00 08 78 56 34 12 20 00 00 00 E0 1C FE A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(2000);

  //GP  commissioning Notification report id 0 -- simulate as if it is missed.
  //send("THProxy", "raw 0x0021 {11 18 04 00 08 78 56 34 12 2B 00 00 00 E4 0D 03 01 00 00 07 08 06 04 00 00 18 10 00 00 00 FC}");
  //send("THProxy", "send 0xFFFF 242 242");
  //networkWait(2000);

  //GP  commissioning Notification report id 1  -- -- simulate as if it is missed.
  //send("THProxy", "raw 0x0021 {11 18 04 00 08 78 56 34 12 2C 00 00 00 E4 0D 03 01 01 00 07 08 06 04 00 00 18 10 00 00 00 FC}");
  //send("THProxy", "send 0xFFFF 242 242");
  //networkWait(2000);

  //GP  commissioning Notification report id 2 with rxAfterTx bit set
  send("THProxy", "raw 0x0021 {11 18 04 08 08 78 56 34 12 2D 00 00 00 E4 0D 03 01 02 00 07 08 06 04 00 00 18 10 00 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(4000);

  //GP  commissioning Notification  Commisioning E0
  send("THProxy", "raw 0x0021 {11 19 04 00 08 78 56 34 12 10 00 00 00 E0 1C FE A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 10 00 00 00 20 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(2000);

  //GP  commissioning Notification report id 0
  send("THProxy", "raw 0x0021 {11 18 04 00 08 78 56 34 12 2E 00 00 00 E4 0D 03 01 00 00 07 08 06 04 00 00 18 10 00 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(2000);

  //GP  commissioning Notification report id 1
  send("THProxy", "raw 0x0021 {11 88 04 00 08 78 56 34 12 2F 00 00 00 E4 0D 03 01 01 00 07 08 06 04 00 00 18 10 00 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(3000);

  //GP  commissioning Notification report id 2 with rxAfterTx bit set
  send("THProxy", "raw 0x0021 {11 98 04 08 08 78 56 34 12 30 00 00 00 E4 0D 03 01 02 00 07 08 06 04 00 00 18 10 00 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");

  // expect commissioning reply notification
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 78 56 34 12 F0 19 56 22 9B E7 C9 DE A1 F1 49 73 00 C3 36 2F 80 31 29 0B B8 A2 26 11 00 00 00 \\]");
  networkWait(3000);

  //GP  commissioning Notification Sucess E2
  send("THProxy", "raw 0x0021 {11 1A 04 A0 08 78 56 34 12 11 00 00 00 E2 00 00 00 FC}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(2000);

  ExitCommissioning();

  //try{
  //Group cast Radius is not as Expected on Sink Table
  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 00 0A 11 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF \\]");
  networkWait(1000);
  //}catch (Exception ex){
  //print ("Test Warning : Group cast Radius is not as Expected on Sink Table");
  //}

  send("sink", "plugin green-power-server table-print");
  networkWait(1000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 03 00 03 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 01 00 06 04 00 00 18 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 02 00 06 04 00 00 18 01 \\]");
  networkWait(1000);

  //GP notification Compact Attribute Reporting
  send("THProxy", "raw 0x0021 {11 0E 00 90 72 78 56 34 12 13 00 00 00 A8 05 00 01 02 03 04 00 00 5F}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(3000);

  //GP notification Compact Attribute Reporting
  send("THProxy", "raw 0x0021 {11 0E 00 90 72 78 56 34 12 14 00 00 00 A8 05 01 02 02 03 04 00 00 5F}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(3000);

  //GP Pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0C 08 00 78 56 34 12 FE 05 FE");
  networkWait(3000);

  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(6000);

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast // Channel Request
  sendGpNotificationWithRawPayload("11 18 04 08 08 00 00 00 00 0F 00 00 00 E3 01 00 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 18 04 00 08 78 56 34 12 20 00 00 00 E0 1C FE A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0E 00 00 00 20 00 00 FC");
  networkWait(3000);

  //GP commissioning Notification Bcast // Application Description  id 2 // for supported cluster
  sendGpNotificationWithRawPayload("11 18 04 08 08 78 56 34 12 2D 00 00 00 E4 0D 03 01 02 00 07 08 06 04 00 00 18 10 00 00 00 FC");
  networkWait(3000);

  //GP commissioning Notification Bcast // Commissioning - incremented FC
  sendGpNotificationWithRawPayload("11 19 04 00 08 78 56 34 12 10 00 00 00 E0 1C FE A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20 00 00 FC");
  networkWait(3000);

  //GP commissioning Notification Bcast // Application Description  id 1
  sendGpNotificationWithRawPayload("11 18 04 00 08 78 56 34 12 2E 00 00 00 E4 0D 03 01 01 00 07 08 76 98 00 00 18 10 00 00 00 FC");
  networkWait(3000);

  //GP commissioning Notification Bcast // Application Description  id 0
  sendGpNotificationWithRawPayload("11 88 04 00 08 78 56 34 12 2F 00 00 00 E4 0D 03 01 00 00 07 08 76 98 00 00 18 10 00 00 00 FC");
  networkWait(3000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 19 04 00 08 78 56 34 12 10 00 00 00 E0 1C FE A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 10 00 00 00 20 00 00 FC");
  networkWait(3000);

  //GP commissioning Notification Bcast // Application Description  id 2
  sendGpNotificationWithRawPayload("11 98 04 08 08 78 56 34 12 30 00 00 00 E4 0D 03 01 02 00 07 08 06 04 00 00 18 10 00 00 00 FC");
  // expect commissioning reply notification
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 78 56 34 12 F0 19 56 22 9B E7 C9 DE A1 F1 49 73 00 C3 36 2F 80 31 29 0B B8 A2 26 11 00 00 00 \\]");
  networkWait(6000);

  //GP commissioning Notification Bcast // Success
  sendGpNotificationWithRawPayload("11 1A 04 A0 08 78 56 34 12 11 00 00 00 E2 00 00 00 FC");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 00 0A 11 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF \\]");
  networkWait(1000);

  GpTranslationRequestIndex(0);                                                //00 08 02 00 02 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 02 00 06 04 00 00 18 01
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 01 00 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 02 00 06 04 00 00 18 01 \\]");
  networkWait(1000);

  //GP Pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0C 08 00 78 56 34 12 FE 05 FE");
  networkWait(1000);

  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();

  EnterCommissioning();

  //GP commissioning Notification Bcast // Channel Request
  sendGpNotificationWithRawPayload("11 18 04 08 08 00 00 00 00 0F 00 00 00 E3 01 00 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 18 04 00 08 78 56 34 12 20 00 00 00 E0 1C FE A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0E 00 00 00 20 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Application Description Id=0
  sendGpNotificationWithRawPayload("11 18 04 08 08 78 56 34 12 2D 00 00 00 E4 0D 01 01 00 00 07 08 76 98 00 00 18 10 00 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 19 04 00 08 78 56 34 12 10 00 00 00 E0 1C FE A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Application Description Id=0
  sendGpNotificationWithRawPayload("11 18 04 08 08 78 56 34 12 2D 00 00 00 E4 0D 01 01 00 00 07 08 76 98 00 00 18 10 00 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Success
  sendGpNotificationWithRawPayload("11 1A 04 A0 08 78 56 34 12 11 00 00 00 E2 00 00 00 FC");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast // Channel Request
  sendGpNotificationWithRawPayload("11 18 04 08 08 00 00 00 00 0F 00 00 00 E3 01 00 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 18 04 00 08 78 56 34 12 20 00 00 00 E0 1C FE A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0E 00 00 00 20 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 19 04 00 08 78 56 34 12 10 00 00 00 E0 1C FE A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Success
  sendGpNotificationWithRawPayload("11 1A 04 A0 08 78 56 34 12 11 00 00 00 E2 00 00 00 FC");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast // Channel Request
  sendGpNotificationWithRawPayload("11 18 04 08 08 00 00 00 00 0F 00 00 00 E3 01 00 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 18 04 00 08 78 56 34 12 20 00 00 00 E0 1C FE A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0E 00 00 00 20 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Application Description
  sendGpNotificationWithRawPayload("11 18 04 08 08 78 56 34 12 2D 00 00 00 E4 0D 02 01 01 00 07 08 76 98 00 00 18 10 00 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 19 04 00 08 78 56 34 12 10 00 00 00 E0 1C FE A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Application Description
  sendGpNotificationWithRawPayload("11 18 04 08 08 78 56 34 12 2E 00 00 00 E4 0D 02 01 01 00 07 08 76 98 00 00 18 10 00 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Success
  sendGpNotificationWithRawPayload("11 1A 04 A0 08 78 56 34 12 11 00 00 00 E2 00 00 00 FC");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast // Channel Request
  sendGpNotificationWithRawPayload("11 18 04 08 08 00 00 00 00 0F 00 00 00 E3 01 00 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Application Description
  sendGpNotificationWithRawPayload("11 18 04 08 08 78 56 34 12 2D 00 00 00 E4 0D 01 01 00 00 07 08 76 98 00 00 18 10 00 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Application Description
  sendGpNotificationWithRawPayload("11 18 04 08 08 78 56 34 12 2E 00 00 00 E4 0D 01 01 00 00 07 08 76 98 00 00 18 10 00 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Success
  sendGpNotificationWithRawPayload("11 1A 04 A0 08 78 56 34 12 11 00 00 00 E2 00 00 00 FC");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();

  WriteGPSharedSecurityKeyTypeToNoResponse(0);
  //print ("]");
}
void Test_4_4_2_13()
{
  //print ("\n  Start of 4.4.2.13  [");
  WriteGPSCommissioningModeNoResponse(1);
  WriteCommissioningExitModeNoResponse(4);
  WriteGPSSecurityLevelToNoResponse(6);
  ReadEmptySinkTable();
  WriteGPSharedSecurityKeyTypeTo(2);
  WriteGPSharedSecurityKeyTo("B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF");

  EnterCommissioning();

  //GP commissioning Notification Bcast // Channel Request
  sendGpNotificationWithRawPayload("11 18 04 08 08 00 00 00 00 0F 00 00 00 E3 01 00 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 18 04 08 08 78 56 34 12 20 00 00 00 E0 22 07 A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 14 02 69 6A 02 04 01 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Success
  sendGpNotificationWithRawPayload("11 1B 04 20 0A 78 56 34 12 11 00 00 00 E2 00 00 00 FC 48 B7 29 84");
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 07 00 0A 11 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF \\]");

  ExitCommissioning();
  networkWait(1000);

  EnterCommissioning();
  networkWait(1000);

  //GP commissioning Notification Bcast // Channel Request
  sendGpNotificationWithRawPayload("11 18 04 08 08 00 00 00 00 0F 00 00 00 E3 01 00 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 18 04 08 08 78 56 34 12 13 00 00 00 E0 22 07 A5 EA 0D 67 0B A2 EE D0 8D D6 C0 67 73 15 F7 AC 56 70 D0 74 B0 F2 12 00 00 00 14 02 69 6A 02 04 02 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Success
  sendGpNotificationWithRawPayload("11 8A 04 A0 08 78 56 34 12 15 00 00 00 E2 00 00 00 FC");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 07 00 0A 15 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF \\]");

  decommissionGPD();

  WriteGPSharedSecurityKeyTypeToNoResponse(0);
  //print ("]");
}
void Test_4_4_2_14()
{
  //print ("\n  Start of 4.4.2.14  [");
  WriteGPSCommissioningModeNoResponse(1);
  WriteCommissioningExitModeNoResponse(4);
  WriteGPSSecurityLevelToNoResponse(6);
  ReadEmptySinkTable();
  WriteGPSharedSecurityKeyTypeTo(2);
  WriteGPSharedSecurityKeyTo("B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF");

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast // Channel Request
  sendGpNotificationWithRawPayload("11 18 04 08 08 00 00 00 00 0F 00 00 00 E3 01 00 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 18 04 08 08 78 56 34 12 20 00 00 00 E0 22 07 A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 14 02 69 6A 02 04 01 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Success
  sendGpNotificationWithRawPayload("11 1B 04 20 0A 78 56 34 12 11 00 00 00 E2 00 00 00 FC 48 B7 29 84");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 07 00 0A 11 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF \\]");

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 18 04 00 08 78 56 34 12 24 00 00 00 E0 22 07 A5 EA 0D 67 0B A2 EE D0 8D D6 C0 67 73 15 F7 AC 56 70 D0 74 B0 F2 12 00 00 00 14 02 69 6A 02 04 02 00 00 FC");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 07 00 0A 12 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF \\]");

  decommissionGPD();

  WriteGPSharedSecurityKeyTypeToNoResponse(0);
  //print ("]");
}
void Test_4_4_2_15()
{
  //print ("\n  Start of 4.4.2.15  [");
  WriteGPSCommissioningModeNoResponse(1);
  WriteCommissioningExitModeNoResponse(4);
  WriteGPSSecurityLevelToNoResponse(6);
  ReadEmptySinkTable();
  WriteGPSharedSecurityKeyTypeTo(2);
  WriteGPSharedSecurityKeyTo("B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF");

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast // Channel Request
  sendGpNotificationWithRawPayload("11 18 04 08 08 00 00 00 00 0F 00 00 00 E3 01 00 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 18 04 08 08 78 56 34 12 0F 00 00 00 E0 22 07 A5 EB 0D 67 0B A2 EE D0 8D D6 C0 67 73 15 F7 AC 56 70 D0 74 B0 F2 0F 00 00 00 14 02 69 6A 02 04 02 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Success
  sendGpNotificationWithRawPayload("11 1A 04 B0 08 78 56 34 12 11 00 00 00 E2 00 00 00 FC");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 07 00 0B 11 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF \\]");

  decommissionGPD();

  WriteGPSharedSecurityKeyTypeToNoResponse(0);
  //print ("]");
}
void Test_4_4_2_16()
{
  //print ("\n  Start of 4.4.2.16  [");
  WriteGPSCommissioningModeNoResponse(1);
  WriteCommissioningExitModeNoResponse(4);
  WriteGPSSecurityLevelToNoResponse(6);
  ReadEmptySinkTable();
  WriteGPSharedSecurityKeyTypeTo(2);
  WriteGPSharedSecurityKeyTo("B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF");

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 18 04 00 08 78 56 34 12 24 00 00 00 E0 22 07 A5 EB 0D 67 0B A2 EE D0 8D D6 C0 67 73 15 F7 AC 56 70 D0 74 B0 F2 11 00 00 00 14 02 69 6A 02 04 02 00 00 FC");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 07 00 0B 11 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF \\]");

  decommissionGPD();
  WriteGPSharedSecurityKeyTypeToNoResponse(0);

  //print ("]");
}
void Test_4_4_2_17()
{
  //print ("\n  Start of 4.4.2.17  [");
  WriteGPSCommissioningModeNoResponse(1);
  WriteCommissioningExitModeNoResponse(4);
  ReadEmptySinkTable();
  WriteGPSharedSecurityKeyTypeTo(0);
  WriteGPSharedSecurityKeyTo("00000000000000000000000000000000");

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast // Channel Request
  sendGpNotificationWithRawPayload("11 18 04 08 08 00 00 00 00 0E 00 00 00 E3 01 00 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Commissioning with OOB Key, Key Request
  sendGpNotificationWithRawPayload("11 18 04 08 08 78 56 34 12 0F 00 00 00 E0 1C 02 A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 00 00 00 FC");
  // Expect Gp Response with Commissioning Reply with no key key type = OOB
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 78 56 34 12 F0 01 90 \\]");

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 09 04 08 08 78 56 34 12 10 00 00 00 E0 1C 02 A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 10 00 00 00 00 00 00 FC");
  // Expect Gp Response with Commissioning Reply with no key
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 78 56 34 12 F0 01 90 \\]");

  //GP commissioning Notification Bcast // Success
  sendGpNotificationWithRawPayload("11 1A 04 20 0B 78 56 34 12 11 00 00 00 E2 00 00 00 FC 40 5A D3 94");
  // Expect Gp Pairing with with OOB Key type
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E5 02 78 56 34 12 78 56 02 11 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 02 00 12 11 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast // Channel Request
  sendGpNotificationWithRawPayload("11 18 04 08 08 00 00 00 00 0F 00 00 00 E3 01 00 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 18 04 08 08 78 56 34 12 12 00 00 00 E0 1C 02 A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 12 00 00 00 00 00 00 FC");
  // Expect Gp Response with Commissioning Reply with no key
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 78 56 34 12 F0 01 90 \\]");
  networkWait(6000);

  //GP commissioning Notification Bcast // Success
  sendGpNotificationWithRawPayload("11 1A 04 20 09 78 56 34 12 14 00 00 00 E2 00 00 00 FC");
  // Optionally Expect a Gp Pairing for the subsequent time if Sink announces one - else no Gp Pairing
  // expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E5 02 78 56 34 12 78 56 02 14 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 02 00 12 14 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  decommissionGPD();

  WriteGPSharedSecurityKeyTypeToNoResponse(0);

  //print ("]");
}

void Test_4_4_2_18()
{
  //print ("\n  Start of 4.4.2.18  [");
  WriteGPSCommissioningModeNoResponse(1);
  WriteCommissioningExitModeNoResponse(4);
  ReadEmptySinkTable();
  WriteGPSharedSecurityKeyTypeTo(0);
  WriteGPSharedSecurityKeyTo("00000000000000000000000000000000");

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast // Channel Request
  sendGpNotificationWithRawPayload("11 18 04 08 08 00 00 00 00 0F 00 00 00 E3 01 00 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 18 04 08 08 78 56 34 12 20 00 00 00 E0 22 07 A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 14 02 69 22 02 04 01 00 00 FC");
  networkWait(6000);

  //GP commissioning Notification Bcast // Success
  sendGpNotificationWithRawPayload("11 1A 04 20 0B 78 56 34 12 11 00 00 00 E2 00 00 00 FC 40 5A D3 94");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 07 00 12 11 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast // Commissioning
  sendGpNotificationWithRawPayload("11 18 04 00 08 78 56 34 12 24 00 00 00 E0 22 07 A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 12 00 00 00 14 02 69 22 02 04 02 00 00 FC");
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 07 00 12 12 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  ExitCommissioning();
  networkWait(6000);

  decommissionGPD();

  WriteGPSharedSecurityKeyTypeToNoResponse(0);

  //print ("]");
}
void Test_4_4_3_3_step_8()
{
  //print ("\nStart of 4.4.3.3 step 8 [");

  //To clear Sink table ///////////////////

  //GP notification
  send("THProxy", "raw 0x0021 {11 0E 00 90 74 78 56 34 12 10 00 00 00 A8 05 00 01 02 03 04 00 00 5F}");
  send("THProxy", "send 0xFFFF 242 242");
  networkWait(1000);

  //GP Pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0C 08 00 78 56 34 12 FE 05 FE");
  networkWait(1000);
  //To clear Sink table ///////////////////

  // Read sink table
  ReadEmptySinkTable();

  // Translation table request
  GpTranslationRequestIndex0Empty();

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 20");

  // GP pairing configuration Application description
  sendGpPairingConfigWithRawPayload("11 66 09 05 00 04 78 56 34 12 FE 05 FE 20 01 01 00 00 08 08 BB 04 02 00 21 10 00");
  networkWait(5000);

  // Read sink table
  ReadEmptySinkTable();

  // Translation table request
  GpTranslationRequestIndex0Empty();

  // Send a GPD cmmand A8 = Compact attribute reporting
  send("gpd1", "plugin green-power-test-device send-test 0xA8 {00 76 09}");
  //print ("]");
}
void Test_4_4_3_3_step_9()
{
  //print ("\nStart of 4.4.3.3 step 9 [");

  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(1000);

  // 9A -- GP pairing configuration -- Action = 0b010 -- Formatted exactly as in 4.4.3.2.3, step 1A
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 20");
  //Wait for MultiSensorCommissioningTimeout (default 20s).
  networkWait(20000);

  // 9A -- DUT-GPS does NOT have any Sink Table or Translation Table entry
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(1000);

  // 9B -- GP pairing configuration -- Action = 0b101 -- Formatted exactly as in 4.4.3.2.3, step 1B
  sendGpPairingConfigWithRawPayload("11 66 09 05 00 04 78 56 34 12 FE 05 FE 20 01 01 00 00 08 08 06 04 00 00 18 10 00");
  // 9B -- Wait for MultiSensorCommissioningTimeout (default 20s).
  networkWait(20000);

  // 9B -- DUT-GPS does NOT have any Sink Table or Translation Table entry
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();

  // 10A -- GP pairing configuration -- Action = 0b010 -- Formatted exactly as in 4.4.3.2.3, step 1B
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 20");
  networkWait(1000);

  // 10A -- GP pairing configuration -- Action = 0b101 -- Formatted exactly as in 4.4.3.2.3, step 1B
  sendGpPairingConfigWithRawPayload("11 66 09 05 00 04 78 56 34 12 FE 05 FE 20 02 01 00 00 08 08 06 04 00 00 18 10 00");
  //Wait for MultiSensorCommissioningTimeout (default 20s).
  networkWait(20000);

  // 10A -- DUT-GPS does NOT have any Sink Table or Translation Table entry
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(1000);

  // 11A -- GP pairing configuration -- Action = 0b010 -- formatted exactly as in 4.4.3.2.3, step 1A.
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 20");
  networkWait(3000);

  // 11A -- GP pairing configuration -- Action = 0b101 -- ReportId 0 --  formatted exactly as in 4.4.3.2.3, step 1B.
  sendGpPairingConfigWithRawPayload("11 00 09 05 00 04 78 56 34 12 FE 05 FE 20 02 01 00 00 08 08 06 04 00 00 18 10 00");
  networkWait(3000);

  // 11A -- GP pairing configuration -- Action = 0b010
  sendGpPairingConfigWithRawPayload("11 44 09 0A 28 06 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 20");
  networkWait(3000);

  // 11A -- GP pairing configuration -- Action = 0b101 -- ReportId 0
  sendGpPairingConfigWithRawPayload("11 66 09 05 00 04 78 56 34 12 FE 05 FE 20 02 01 00 00 08 08 06 04 00 00 18 10 00");
  expect("sink","Duplicate ReportId 0 - Not Saved");
  networkWait(3000);

  // 11A -- GP pairing configuration  -- Action = 0b101 -- ReportId 1
  sendGpPairingConfigWithRawPayload("11 66 09 05 00 04 78 56 34 12 FE 05 FE 20 02 01 01 00 08 08 06 04 00 00 18 10 00");
  networkWait(3000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  GpTranslationRequestIndex(0); // there should be two entries on the translation table.
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 02 00 02 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 01 00 06 04 00 00 18 01 \\]");

  GpTranslationRequestIndex(1); // Failure // there should be one entry on the translation table.
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 02 01 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 01 00 06 04 00 00 18 01 \\]");
  networkWait(5000);
  // 11B -- Compact attribute reporting for ReportID = 0x00
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 1D FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 A8 00 00 00 F6 B7 62 CD}");
  expect("sink",".*ep 01, clus 0x0406 \\(Occupancy Sensing\\) FC 08 seq .. cmd 0A payload\\[00 00 18 00 \\]");
  networkWait(5000);

  // 11B -- Compact attribute reporting for ReportID = 0x01
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 1F FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 A8 01 00 00 0C 6E 7C 5B}");
  expect("sink",".*ep 01, clus 0x0406 \\(Occupancy Sensing\\) FC 08 seq .. cmd 0A payload\\[00 00 18 01 \\]");
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 05 12 11 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  GpTranslationRequestIndex(0); // there should be two Entries on the translation table.
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 02 00 02 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 01 00 06 04 00 00 18 01 \\]");

  //print ("]");
}
void greenPowerServerCleanUp()
{
  send("sink", "plugin green-power-server additionalInfoTable-clearAll");
  networkWait(1000);
  send("sink", "plugin green-power-server customizedTable-clearAll");
  networkWait(1000);
  send("sink", "plugin green-power-server table-clear");
  networkWait(1000);
  send("sink", "plugin green-power-server sink-table-clear");
  networkWait(1000);
}
void cleanUp()
{
  send("sink","plugin green-power-server commissioning 0 0xffff 0xffff 0xfe");
  networkWait(1000);
  send("proxy2", "plugin green-power-client clear-proxy-table");
  networkWait(1000);
  send("THProxy", "plugin green-power-client clear-proxy-table");
  networkWait(1000);
  send("sink", "plugin green-power-client clear-proxy-table");
  networkWait(1000);
  greenPowerServerCleanUp();
  send("sink", "plugin groups-server clear");
  networkWait(5000);
}

void Test_0xAF()
{
  //  Set up a 0xAF command and then send a 0xA0 and A1 to see it translated
  // GP pairing configuration - to set up reporting wit 0xAF command for cluster 0x0406
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 0C 01 AF 01 06 04");
  networkWait(500);

  //GP notification for A0
  sendGpNotificationWithRawPayload("11 0E 00 90 74 78 56 34 12 10 00 00 00 A0 06 06 04 00 00 18 00 00 00 5F");

  // Check if Sink EP 1 got this forwarded or not
  expect("sink",".*clus 0x0406 \\(Occupancy Sensing\\) FC 08 seq .. cmd 0A payload\\[00 00 18 00 \\]",1000);
  networkWait(1000);

  //GP notification for A1 - with manufacture Id 0x1234
  sendGpNotificationWithRawPayload("11 0E 00 90 74 78 56 34 12 10 00 00 00 A1 08 34 12 06 04 00 00 18 00 00 00 5F");

  // Check if Sink EP 1 got this forwarded or not
  expect("sink",".*clus 0x0406 \\(Occupancy Sensing\\) mfgId 1234 FC 0C seq .. cmd 0A payload\\[00 00 18 00 \\]",1000);
  networkWait(1000);
}
void Test_0xA6()
{
  //  Set up a 0xAF command and then send a 0xA0 and A1 to see it translated
  // GP pairing configuration - to set up reporting wit 0xAF command for cluster 0x0406
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 08 10 06 00");
  networkWait(500);

  //GP notification for A6
  sendGpNotificationWithRawPayload("11 0E 00 90 74 78 56 34 12 10 00 00 00 A6 04 01 06 00 00 00 00 5F");

  // Check if Sink EP 1 got this forwarded or not
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 00 payload\\[\\]",1000);
  networkWait(1000);

  //GP notification for A6 - manufacture specefic
  sendGpNotificationWithRawPayload("11 0E 00 90 74 78 56 34 12 10 00 00 00 A6 06 05 34 12 06 00 00 00 00 5F");

  // Check if Sink EP 1 got this forwarded or not
  expect("sink",".*clus 0x0006 \\(On/off\\) mfgId 1234 FC 05 seq .. cmd 00 payload\\[\\]",1000);
  networkWait(1000);
  decommissionGPD();
  networkWait(10000);
}

void Test_SensorIdWithOutClusterList()
{
  // Set up the commissioning for Occupancy Sensor Id = 0x12 - no application Info (no command list, no cluster list) provided
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 02 78 56 34 12 12 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(500);

  // Check sink entry created!
  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 12 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(5000);
  // Check TT Enties are created as expected for two commands [A6 and AF]
  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 04 00 04 78 56 34 12 AF 01 04 01 FF FF 0A FF 78 56 34 12 AF 02 04 01 FF FF 0A FF 78 56 34 12 A6 01 04 01 FF FF FF FF 78 56 34 12 A6 02 04 01 FF FF FF FF \\]");

  // Check locally the entries are avilable in the Sink
  send("sink", "plugin green-power-server table-print");
  expectMultiline("sink",
                  "",
                  new String[]{
                    "00    01    00                           12345678 AF     01  0104  FFFF     0A   01    00   ",
                    "01    01    00                           12345678 AF     02  0104  FFFF     0A   01    00   ",
                    "02    01    00                           12345678 A6     01  0104  FFFF     FF   01    00   ",
                    "03    01    00                           12345678 A6     02  0104  FFFF     FF   01    00   "
                  });

  //GP notification for A0
  sendGpNotificationWithRawPayload("11 0E 00 90 74 78 56 34 12 10 00 00 00 A0 06 06 04 00 00 18 00 00 00 5F");
  // Check if Sink EP 1 got this forwarded or not
  expect("sink",".*clus 0x0406 \\(Occupancy Sensing\\) FC 08 seq .. cmd 0A payload\\[00 00 18 00 \\]");

  //GP notification for A1 - with manufacture Id 0x1234
  sendGpNotificationWithRawPayload("11 0E 00 90 74 78 56 34 12 10 00 00 00 A1 08 34 12 06 04 00 00 18 00 00 00 5F");
  // Check if Sink EP 1 got this forwarded or not
  expect("sink",".*clus 0x0406 \\(Occupancy Sensing\\) mfgId 1234 FC 0C seq .. cmd 0A payload\\[00 00 18 00 \\]");
  networkWait(5000);
}
void Test_4_1_1()
{
  // Test GPEP DeviceID read-out - Not done in the beanshell
}
void Test_4_1_2_3()
{
  //print ("\nStart of 4.1.2.3 [");
  // Common attributes this test is just reading and writting the attributes hence not placed in the beanshell
  ReadGPSharedSecurityKeyType();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[20 00 00 18 03 \\]");

  WriteGPSharedSecurityKeyTypeTo(7);

  ReadGPSharedSecurityKeyType();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[20 00 00 18 07 \\]");

  ReadGPSharedSecurityKey();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[21 00 00 F1 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \\]");

  WriteGPSharedSecurityKeyTo("B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF");

  ReadGPSharedSecurityKey();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[21 00 00 F1 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF \\]");

  ReadGPLinkKey();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[22 00 00 F1 5A 69 67 42 65 65 41 6C 6C 69 61 6E 63 65 30 39 \\]");

  WriteGPLinkKeyTo("C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF");

  ReadGPLinkKey();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[22 00 00 F1 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  ReadClusterRevision();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[FD FF 00 21 02 00 \\]");

  WriteGPLinkKeyToNoResponse("5A6967426565416C6C69616E63653039");

  WriteGPSharedSecurityKeyTypeToNoResponse(0);

  WriteGPSharedSecurityKeyTo("00000000000000000000000000000000");

  //print ("]");
}

void Test_4_1_3()
{
  // Functionality support - Reading one attribute, not done in beanshell.
}
void Test_4_1_4()
{
  // Persistent storage of Sink table - resetting and reading back the sink table, SoC is tested in gp.bsh beanshell
}
void Test_4_2_2_1()
{
  // ApplicationID = 0b000
  //print ("\nStart of 4.2.2.1 [");
  WriteGPSCommissioningModeTo(1);
  //ReadGPSSecurityLevel();
  //expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[05 00 00 18 01 \\]");

  WriteGPSSecurityLevelTo(0);
  WriteCommissioningExitModeTo(2);
  ReadEmptySinkTable();

  EnterCommissioning();
  networkWait(6000);

  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 C2 FF FF FF FF 0C 78 56 34 12 E0 02 C1 00}");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 0C 00 A8 00 78 56 34 12 02 00 .. 00 00 00 \\]");

  // Toggle
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 C3 FF FF FF FF 8C 00 78 56 34 12 22}");
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 0C 00 A8 00 78 56 34 12 02 00 .. 00 00 00 \\]");

  // Toggle
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 C4 FF FF FF FF 0C 78 56 34 12 22}");
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 0C 00 A8 00 78 56 34 12 02 00 .. 00 00 00 \\]");

  // Unknown
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 C5 FF FF FF FF 8E 00 78 56 34 12 22}");
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 0C 00 A8 00 78 56 34 12 02 00 .. 00 00 00 \\]");

  // Unknown
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 C6 FF FF FF FF 8F 00 78 56 34 12 22}");
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 0C 00 A8 00 78 56 34 12 02 00 .. 00 00 00 \\]");

  // Toggle
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 C7 FF FF FF FF 8D 00 78 56 34 12 22}");
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 0C 00 A8 00 78 56 34 12 02 00 .. 00 00 00 \\]");

  // Scene 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 C8 FF FF FF FF 0C 00 78 56 34 12 22}");
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 0C 00 A8 00 78 56 34 12 02 00 .. 00 00 00 \\]");

  // GPD Data Frame
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 C9 FF FF FF FF 8C 78 56 34 12 22}");
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 0C 00 A8 00 78 56 34 12 02 00 .. 00 00 00 \\]");

  // Reserved
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 CA FF FF FF FF 8C 01 78 56 34 12 22}");
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 0C 00 A8 00 78 56 34 12 02 00 .. 00 00 00 \\]");

  // GPD Data Frame
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 CB FF FF FF FF 8C 03 78 56 34 12 22}");
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 0C 00 A8 00 78 56 34 12 02 00 .. 00 00 00 \\]");

  // Toggle
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 CC FF FF FF FF 8C 80 78 56 34 12 22}");
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 0C 00 A8 00 78 56 34 12 02 00 .. 00 00 00 \\]");

  // Toggle
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 CD FF FF FF FF 8C 00 78 56 34 12 22}");
  networkWait(6000);

  // Toggle
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 CE FF FF FF FF 8C 00 78 56 34 12 22}");
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 0C 00 A8 00 78 56 34 12 02 00 .. 00 00 00 \\]");

  // Toggle
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 CF FF FF FF FF CC 40 78 56 34 12 22}");
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 0C 00 A8 00 78 56 34 12 02 00 .. 00 00 00 \\]");

  // Toggle
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 D0 FF FF FF FF 8C 00 00 00 00 00 22}");
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 0C 00 A8 00 78 56 34 12 02 00 .. 00 00 00 \\]");

  // Toggle
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 D1 FF FF FF FF 8C 00 78 56 34 02 22}");
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 0C 00 A8 00 78 56 34 12 02 00 .. 00 00 00 \\]");

  // Toggle
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 D2 FF FF FF FF 8C 30 78 56 34 12 D2 00 00 00 22 77 F4 23 E3}");
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 0C 00 A8 00 78 56 34 12 02 00 .. 00 00 00 \\]");

  // Toggle
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 D3 FF FF FF FF 8C 00 78 56 34 12 22}");
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 0C 00 A8 00 78 56 34 12 02 00 .. 00 00 00 \\]");

  // Toggle
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 D4 FF FF FF FF 8C 40 78 56 34 12 22}");
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 0C 00 A8 00 78 56 34 12 02 00 .. 00 00 00 \\]");

  sendGpPairingConfigWithRawPayload("11 00 09 0C 18 00 78 56 34 12 02 05 FE");
  networkWait(6000);

  ReadEmptySinkTable();
  WriteGPSSecurityLevelTo(1);

  //print ("]");
}
void Test_4_2_2_2()
{
  // ApplicationID = 0b010
  //print ("\nStart of 4.2.2.2 [");
  WriteGPSCommissioningModeTo(1);
  networkWait(6000);

  ReadGPSSecurityLevel();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[05 00 00 18 01 \\]");

  WriteGPSSecurityLevelTo(0);
  WriteCommissioningExitModeTo(2);

  ReadEmptySinkTable();

  EnterCommissioning();
  networkWait(6000);

  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 C2 FF FF FF FF 88 77 66 55 44 33 22 11 8C 02 99 E0 02 C1 00}");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 11 00 AA 00 88 77 66 55 44 33 22 11 99 02 00 .. 00 00 00 \\]");

  // Toggle
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 C3 FF FF FF FF 88 77 66 55 44 33 22 11 8C 02 99 22}");
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 11 00 AA 00 88 77 66 55 44 33 22 11 99 02 00 .. 00 00 00 \\]");

  // Toggle
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 C4 FF FF FF FF 88 77 66 55 44 33 22 11 8C 02 00 22}");
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 11 00 AA 00 88 77 66 55 44 33 22 11 99 02 00 .. 00 00 00 \\]");

  // Toggle
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 C5 FF FF FF FF 88 77 66 55 44 33 22 11 8C 02 FF 22}");
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 11 00 AA 00 88 77 66 55 44 33 22 11 99 02 00 .. 00 00 00 \\]");

  // Toggle
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 C6 FF FF FF FF 88 77 66 55 44 33 22 11 8C 02 33 22}");
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 11 00 AA 00 88 77 66 55 44 33 22 11 99 02 00 .. 00 00 00 \\]");

  // Toggle
  send("gpd1", "plugin green-power-test-device send-test 255 {41 88 C7 FF FF FF FF FF FF 8C 02 99 22}");
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 11 00 AA 00 88 77 66 55 44 33 22 11 99 02 00 .. 00 00 00 \\]");

  // Toggle
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 D0 FF FF FF FF 00 00 00 00 00 00 00 00 8C 02 99 22}");
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 11 00 AA 00 88 77 66 55 44 33 22 11 99 02 00 .. 00 00 00 \\]");

  // Toggle
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 CA FF FF FF FF 88 77 66 55 44 33 22 11 8C 02 99 22}");
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 11 00 AA 00 88 77 66 55 44 33 22 11 99 02 00 .. 00 00 00 \\]");

  sendGpPairingConfigWithRawPayload("11 00 09 0C 0A 00 88 77 66 55 44 33 22 11 FF 02 05 FE");
  networkWait(6000);

  ReadEmptySinkTable();
  WriteGPSSecurityLevelTo(1);

  //print ("]");
}
void Test_4_2_3_2()
{
  // Security level = 0b10
}
void Test_4_2_3_3()
{
  // Security level = 0b11
}
void Test_4_3_1()
{
  // Basic test - clubbed into other tests hence no script available
}
void Test_4_3_8_3()
{
  //print ("\nStart of 4.3.8.3[");
  // Increment GPD MAC sequence number
  WriteGPSSecurityLevelTo(0); // Write Security Level to 0 - attribute 05 data type 18 value 0
  // expect write response is success

  sendGpPairingConfigWithRawPayload("11 00 09 09 38 00 78 56 34 12 02 05 C2 00 00 00 FE");
  //expect GpPairing - 19 05 01 68 41 00 78 56 34 12 E7 56 31 FE FF 57 0B 00 13 4C 02 00 00 00 00
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[68 41 00 78 56 34 12 00 00 00 00 00 00 00 0. 00 00 02 C2 00 00 00 \\]");

  networkWait(10000);
  // 1
  // Send Gp Notification for Toggle
  sendGpNotificationWithRawPayloadUcast("11 00 00 08 00 78 56 34 12 C3 00 00 00 22 FF", sinkId);
  // read attribute 0 - Sink table
  ReadSinkTable();
  // expect read response - 08 02 01 01 00 00 43 0C 00 38 00 78 56 34 12 02 05 C3 00 00 00
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 0C 00 38 00 78 56 34 12 02 05 C3 00 00 00 \\]");
  networkWait(10000);

  // 2
  // Send Gp Notification for Toggle
  sendGpNotificationWithRawPayloadUcast("11 01 00 08 00 78 56 34 12 C3 00 00 00 22 FF", sinkId);
  // read attribute 0 - Sink table
  ReadSinkTable();
  // expect read response - 08 03 01 01 00 00 43 0C 00 38 00 78 56 34 12 02 05 C3 00 00 00
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 0C 00 38 00 78 56 34 12 02 05 C3 00 00 00 \\]");
  networkWait(10000);

  // 3
  // Send Gp Notification for Toggle
  sendGpNotificationWithRawPayloadUcast("11 02 00 08 00 78 56 34 12 C2 00 00 00 22 FF", sinkId);
  // read attribute 0 - Sink table
  ReadSinkTable();
  // expect read response - 08 04 01 01 00 00 43 0C 00 38 00 78 56 34 12 02 05 C2 00 00 00
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 0C 00 38 00 78 56 34 12 02 05 C2 00 00 00 \\]");
  networkWait(10000);

  // 4
  // Send Gp Notification for Toggle
  sendGpNotificationWithRawPayloadUcast("11 03 00 08 00 78 56 34 12 C5 00 00 00 22 FF", sinkId);
  // read attribute 0 - Sink table
  ReadSinkTable();
  // expect read response - 08 05 01 01 00 00 43 0C 00 38 00 78 56 34 12 02 05 C5 00 00 00
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 0C 00 38 00 78 56 34 12 02 05 C5 00 00 00 \\]");
  networkWait(10000);

  // 5
  // Send Gp Notification for Toggle
  sendGpNotificationWithRawPayloadUcast("11 04 00 08 00 78 56 34 12 05 00 00 00 22 FF", sinkId);
  // read attribute 0 - Sink table
  ReadSinkTable();
  // expect read response - 08 06 01 01 00 00 43 0C 00 38 00 78 56 34 12 02 05 05 00 00 00
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 0C 00 38 00 78 56 34 12 02 05 05 00 00 00 \\]");
  networkWait(10000);

  sendGpPairingConfigWithRawPayload("11 00 09 0C 00 00 78 56 34 12 02 05 FE");
  // expect Gp Pairing - 19 13 01 30 00 00 78 56 34 12

  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[70 00 00 78 56 34 12 \\]"); // Communication Mode 30 or 70 issue

  // read attribute 0 - Sink table, empty
  ReadEmptySinkTable();

  WriteGPSSecurityLevelTo(6); // Write Security Level to 0 - attribute 05 data type 18 value 6
  // expect write response is success
  networkWait(1000);
  //print ("]");
}
void test44112Setup()
{
  WriteGPSCommissioningModeNoResponse(1);
  WriteCommissioningExitModeNoResponse(4);
  WriteGPSSecurityLevelToNoResponse(6);
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  WriteGPSharedSecurityKeyTypeTo(2);
  WriteGPSharedSecurityKeyTo("B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF");
}
void decommissionGPD()
{
  sendGpPairingConfigWithRawPayload("11 00 09 0C 18 00 78 56 34 12 FE 05 FE");
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[30 00 00 78 56 34 12 \\]");
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(5000);
}
void Test_4_4_1_12_Step1_3_6()
{
  //print ("\nStart of 4.4.1.12 Step1,3 - 6[");
  // Sink Set Up
  test44112Setup();

  //Step -1
  // Sink enters commissioning
  EnterCommissioning();
  // E0 - Application description follows
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 B4 FF FF FF FF 8C 00 78 56 34 12 E0 FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20}");
  networkWait(2000);
  // E4 Report 1/3 - Report Id = 0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 B8 FF FF FF FF 8C 00 78 56 34 12 E4 03 01 00 00 08 08 76 98 00 00 29 10 00}");
  networkWait(2000);
  // E4 Report 2/3 - Report Id = 1
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 BC FF FF FF FF 8C 00 78 56 34 12 E4 03 01 01 00 08 08 76 98 00 00 29 10 00}");
  networkWait(2000);
  // E4 Report 3/3 - Report Id = 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 C1 FF FF FF FF 8C 00 78 56 34 12 E4 03 01 02 00 08 08 06 04 00 00 29 10 00}");
  //networkWait(2000);
  // Expect GpPairing - 19 76 01 28 E5 02 78 56 34 12 78 56 FE 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 05
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E5 02 78 56 34 12 78 56 FE 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]"); // Issue radius 0 --> 5

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 01 00 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 02 00 06 04 00 00 29 01 \\]");
  networkWait(5000);

  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 D0 FF FF FF FF 8C 30 78 56 34 12 12 00 00 00 A8 02 01 02 03 04 A1 12 84 BC}");
  expect("sink",".*clus 0x0406 \\(Occupancy Sensing\\) FC 08 seq .. cmd 0A payload\\[00 00 29 02 01 \\]");
  networkWait(5000);
  // End of Step 1

  // Step 3 - Additional attribute record:
  decommissionGPD();

  EnterCommissioning(); // Sink Enters Commissioning
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 03 FF FF FF FF 7B 70 04 30 00 5F 15 00 4D E3 00}"); // Channel Request
  //networkWait(500);
  //send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 08 FF FF FF FF 7B 70 04 30 00 5F 15 00 4D E3 00}");
  networkWait(6000); // This should not be more than 5 seconds proxy should return to ch 11 as soon as it delivers the channel config
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 DE FF FF FF FF 8C 00 78 56 34 12 E0 FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20}"); // E0
  networkWait(2000);
  // E4 Report 1/1 - Report Id = 0, 2 attributes one supported one not supported MSP, no manufactureId present
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E8 FF FF FF FF 8C 00 78 56 34 12 E4 01 01 00 01 96 00 0D 09 06 04 99 00 18 21 55 66 00 00 18 10 00}");
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E5 02 78 56 34 12 78 56 FE 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(3000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]"); // Issue radius 0 --> 5
  networkWait(5000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 01 00 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 \\]");
  networkWait(5000);

  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F8 FF FF FF FF 8C 30 78 56 34 12 12 00 00 00 A8 00 01 02 03 04 7E 7D 3C 1F}");
  expect("sink",".*clus 0x0406 \\(Occupancy Sensing\\) FC 08 seq .. cmd 0A payload\\[00 00 18 00 \\]");
  networkWait(5000);
  // End of Step 3

  // Step 4 - Additional MSP attribute record:
  decommissionGPD();

  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 04 FF FF FF FF 8C 00 78 56 34 12 E0 FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20}"); // E0
  networkWait(1000);
  // E4 - with two attributes one is MSP range and the other is 0 - manufacture Id supplied
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 07 FF FF FF FF 8C 00 78 56 34 12 E4 01 01 00 01 96 00 0F 19 06 04 34 12 00 50 29 10 00 00 00 18 10 02}");
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E5 02 78 56 34 12 78 56 FE 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");// Issue radius 0 --> 5
  networkWait(5000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 01 00 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 02 06 04 00 00 18 01 \\]");
  networkWait(5000);

  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 16 FF FF FF FF 8C 30 78 56 34 12 12 00 00 00 A8 00 01 02 03 04 7E 7D 3C 1F}");
  expect("sink",".*clus 0x0406 \\(Occupancy Sensing\\) FC 08 seq .. cmd 0A payload\\[00 00 18 02 \\]");
  networkWait(5000);
  // End of Step 4

  //Step 5 - Same data point descriptors in 2 separate reports:
  decommissionGPD();

  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 04 FF FF FF FF 8C 00 78 56 34 12 E0 FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20}"); // E0
  networkWait(1000);
  // E4 - with report Id 0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 28 FF FF FF FF 8C 00 78 56 34 12 E4 02 01 00 00 08 08 06 04 00 00 18 10 00}");
  networkWait(5000);
  // E4 - duplicate report Id 1
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 2C FF FF FF FF 8C 00 78 56 34 12 E4 02 01 01 00 08 08 06 04 00 00 18 10 00}");
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E5 02 78 56 34 12 78 56 FE 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");// Issue radius 0 --> 5
  networkWait(5000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 02 00 02 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 01 00 06 04 00 00 18 01 \\]");
  networkWait(5000);

  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 16 FF FF FF FF 8C 30 78 56 34 12 12 00 00 00 A8 00 01 02 03 04 7E 7D 3C 1F}"); // A8 with report Id 0
  expect("sink",".*clus 0x0406 \\(Occupancy Sensing\\) FC 08 seq .. cmd 0A payload\\[00 00 18 00 \\]");
  networkWait(5000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 40 FF FF FF FF 8C 30 78 56 34 12 13 00 00 00 A8 01 01 02 03 04 F3 03 E3 3C}");  // A8 with report id 1
  expect("sink",".*clus 0x0406 \\(Occupancy Sensing\\) FC 08 seq .. cmd 0A payload\\[00 00 18 01 \\]");
  networkWait(5000);
  // Step 5 end

  //Step 6 - Same data point descriptors in 2 separate GPD Application Description commands, changed order:
  decommissionGPD();

  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 04 FF FF FF FF 8C 00 78 56 34 12 E0 FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20}"); // E0
  networkWait(1000);
  // E4 - with report Id 1                                    01 08 53 FF FF FF FF 8C 00 78 56 34 12 E4 02 01 01 00 08 08 02 04 00 00 29 10 00
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 28 FF FF FF FF 8C 00 78 56 34 12 E4 02 01 01 00 08 08 06 04 00 00 18 10 00}");
  networkWait(5000);
  // E4 - duplicate report Id 0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 28 FF FF FF FF 8C 00 78 56 34 12 E4 02 01 00 00 08 08 06 04 00 00 18 10 00}");
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E5 02 78 56 34 12 78 56 FE 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");// Issue radius 0 --> 5
  networkWait(5000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 02 00 02 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 01 00 06 04 00 00 18 01 \\]");
  networkWait(5000);

  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 16 FF FF FF FF 8C 30 78 56 34 12 12 00 00 00 A8 00 01 02 03 04 7E 7D 3C 1F}"); // A8 with report Id 0
  expect("sink",".*clus 0x0406 \\(Occupancy Sensing\\) FC 08 seq .. cmd 0A payload\\[00 00 18 00 \\]");
  networkWait(5000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 40 FF FF FF FF 8C 30 78 56 34 12 13 00 00 00 A8 01 01 02 03 04 F3 03 E3 3C}");  // A8 with report id 1
  expect("sink",".*clus 0x0406 \\(Occupancy Sensing\\) FC 08 seq .. cmd 0A payload\\[00 00 18 01 \\]");
  networkWait(5000);
  // Step 6 end
  decommissionGPD();
  //print ("]");
}

void Test_4_4_1_12_Step7_8()
{
  //print ("\nStart of 4.4.1.12 Step 7 8[");
  // Sink Set Up
  test44112Setup();

  // Step 7 - 2 Data point descriptors in the same report, only one supported:
  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 84 FF FF FF FF 8C 00 78 56 34 12 E0 FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20}"); // E0
  networkWait(1000);
  // E4 - with report Id 0                                    01 08 89 FF FF FF FF 8C 00 78 56 34 12 E4 01 01 00 00 10 08 76 98 00 00 29 10 00 08 02 04 00 00 29 10 02
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 28 FF FF FF FF 8C 00 78 56 34 12 E4 01 01 00 00 10 08 76 98 00 00 29 10 00 08 06 04 00 00 18 10 02}");
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E5 02 78 56 34 12 78 56 FE 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");// Issue radius 0 --> 5
  networkWait(5000);

  GpTranslationRequestIndex(0);//                                                00 08 01 00 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 02 06 04 00 00 18 01
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 01 00 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 02 06 04 00 00 18 01 \\]");
  networkWait(5000);

  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 16 FF FF FF FF 8C 30 78 56 34 12 12 00 00 00 A8 00 01 02 03 04 7E 7D 3C 1F}"); // A8 with report Id 0
  expect("sink",".*clus 0x0406 \\(Occupancy Sensing\\) FC 08 seq .. cmd 0A payload\\[00 00 18 02 \\]");
  networkWait(5000);
  // Step 7 end

  // Step 8 - Same Data point reportable via GPD Compact Attribute Reporting and GPD Attribute Reporting:
  decommissionGPD();
  networkWait(5000);

  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A7 FF FF FF FF 8C 00 78 56 34 12 E0 FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 28 01 06 04}"); // E0
  networkWait(2000);
  // E4 - with report Id 0                                    01 08 AB FF FF FF FF 8C 00 78 56 34 12 E4 01 01 00 01 96 00 07 08 02 04 00 00 29 10 00
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 AB FF FF FF FF 8C 00 78 56 34 12 E4 01 01 00 01 96 00 07 08 06 04 00 00 18 10 00}");
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E5 02 78 56 34 12 78 56 FE 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(5000);

  ReadSinkTable();                                                             // 01 00 00 43 1D 00 28 02 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");// Issue radius 0 --> 5
  networkWait(5000);

  GpTranslationRequestIndex(0);                                                //00 00 03 00 02 78 56 34 12 AF 0A 04 01 02 04 FF FE 78 56 34 12 A6 0A 04 01 02 04 FF FF
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 03 00 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 \\]");
  networkWait(5000);

  GpTranslationRequestIndex(1);                                                //00 00 03 01 01 78 56 34 12 A6 0A 04 01 02 04 FF FF
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 03 01 02 78 56 34 12 AF 01 04 01 FF FF 0A FF 78 56 34 12 A6 01 04 01 FF FF FF FF \\]");
  networkWait(5000);

  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 BD FF FF FF FF 8C 30 78 56 34 12 12 00 00 00 A8 00 01 02 03 04 7E 7D 3C 1F}"); // A8 with report Id 0
  expect("sink",".*clus 0x0406 \\(Occupancy Sensing\\) FC 08 seq .. cmd 0A payload\\[00 00 18 00 \\]");
  networkWait(5000);
  //send("gpd1", "plugin green-power-test-device send-test 255 {01 08 C1 FF FF FF FF 8C 30 78 56 34 12 13 00 00 00 A0 06 04 00 00 29 66 55 44 16 69 BD}");  // A0 - a correct packet for cluster 0x406 is needed
  //expect("sink",".*clus 0x0406 \\(Occupancy Sensing\\) FC 08 seq .. cmd 0A payload\\[00 00 18 01 \\]");
  //networkWait(5000);
  // Step 8 end
  decommissionGPD();
  //print ("]");
}
void Test_4_4_1_12_Step9_14()
{
  //print ("\nStart of 4.4.1.12 Step 9 - 14[");
  // Sink Set Up
  test44112Setup();

  // Step 9 - Negative test: no cluster match:
  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E4 FF FF FF FF 8C 00 78 56 34 12 E0 FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20}"); // E0
  networkWait(1000);
  // E4 - with cluster not supported
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E8 FF FF FF FF 8C 00 78 56 34 12 E4 01 01 00 00 08 08 76 98 00 00 29 10 00}");
  networkWait(5000);

  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(200000);
  // end of step 9

  // Step 10 - Negative test: no GPD Application Description
  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E4 FF FF FF FF 8C 00 78 56 34 12 E0 FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20}"); // E0
  networkWait(40000);  // No E4 until it times out the Application Description Commissioning Timer
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(200000);
  // End of Step 10

  // Step 11 - Negative test: missing second GPD Application Description:
  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 02 FF FF FF FF 8C 00 78 56 34 12 E0 FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20}"); // E0
  networkWait(1000);
  // E4 - 1/2 - Report Id 0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 06 FF FF FF FF 8C 00 78 56 34 12 E4 02 01 00 00 08 08 02 04 00 00 29 10 00}");
  networkWait(40000);  // No more E4 until it times out the Application Description Commissioning Timer

  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(200000);
  // end of step 11

  // Step 12 - Negative test: missing GPD Commissioning command:
  EnterCommissioning();
  networkWait(1000);
  // Just E4 - 1/1 - Report Id 0 without any E0 priorto it
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 13 FF FF FF FF 8C 00 78 56 34 12 E4 01 01 00 00 08 08 02 04 00 00 29 10 00}");
  networkWait(40000);

  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(200000);
  // end of step 12

  // Step 13 - Negative test: malformed GPD Application Description:
  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 1F FF FF FF FF 8C 00 78 56 34 12 E0 FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20}"); // E0
  networkWait(1000);
  // E4 - 1/1 - Total number of reports 0, number of reports 1
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 24 FF FF FF FF 8C 00 78 56 34 12 E4 00 01 00 00 08 08 6 04 00 00 18 10 00}");
  networkWait(2000);
  // E4 - 1/1 - Total number of reports 1, number of reports 0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 28 FF FF FF FF 8C 00 78 56 34 12 E4 01 00 00 00 08 08 06 04 00 00 18 10 00}");
  networkWait(40000);  // No more E4 until it times out the Application Description Commissioning Timer

  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(200000);
  // end of step 13

  // Step 14 - Negative test: malformed GPD Application Description:
  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 35 FF FF FF FF 8C 00 78 56 34 12 E0 FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20}"); // E0
  networkWait(1000);
  // E4 - 1/1 - Total number of reports 1, number of reports 1
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 3A FF FF FF FF 8C 00 78 56 34 12 E4 01 01 00 00 06 08 06 04 00 00 18 00}");
  networkWait(40000);  // No more E4 until it times out the Application Description Commissioning Timer

  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(200000);
  // end of step 14
  //print ("]");
}
void Test_4_4_1_12_Step2_1B()
{
  //print ("\nStart of 4.4.1.12 Step 2 1B[");
  // Sink Set Up
  test44112Setup();

  // Step 2 - 1B
  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 55 FF FF FF FF 8C 00 78 56 34 12 E0 FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20}"); // E0
  networkWait(1000);
  // E4
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 5A FF FF FF FF 8C 00 78 56 34 12 E4 01 01 00 01 96 00 08 08 06 04 00 00 18 31 00 01}");
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E5 02 78 56 34 12 78 56 FE 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");// Issue radius 0 --> 5
  networkWait(5000);

  GpTranslationRequestIndex(0);                                                //00 08 01 00 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 01 00 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 \\]");
  networkWait(5000);

  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 16 FF FF FF FF 8C 30 78 56 34 12 12 00 00 00 A8 00 01 02 03 04 7E 7D 3C 1F}"); // A8 with report Id 0
  expect("sink",".*clus 0x0406 \\(Occupancy Sensing\\) FC 08 seq .. cmd 0A payload\\[00 00 18 00 \\]");
  networkWait(200000);
  // end of step 2
  decommissionGPD();
  //print ("]");
}
void Test_4_4_1_13()
{
  //print ("\nStart of 4.4.1.13[");
  // Sink Set Up
  test44112Setup();

  EnterCommissioning();
  networkWait(1000);
  //send("gpd1", "plugin green-power-test-device send-test 255 {01 08 6A FF FF FF FF 4D E3 00}"); // Channel Request with Auto commissioning =1
  //networkWait(2000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 71 FF FF FF FF 0D E3 00}"); // Channel Request with Auto commissioning = 0
  networkWait(6000);
  // E0 - with rxAfterTx = 0, E4 to follow
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 72 FF FF FF FF 0C 78 56 34 12 E0 FE A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20}");
  networkWait(6000);
  // E4 with rxAfterTx = 1
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 76 FF FF FF FF 8C 40 78 56 34 12 E4 01 01 00 00 08 08 06 04 00 00 18 10 00}");
  // expect Gp response with Channel Configuration                                  00 00 00 00 00 00 00 00 F3 01 10
  //expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 00 00 00 00 F3 01 10 \\]");
  networkWait(10000);
  // E0 - with rxAfterTx = 0, E4 to follow with incremented frame counter
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 7E FF FF FF FF 0C 78 56 34 12 E0 FE A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 10 00 00 00 20}");
  networkWait(6000);
  // E4 with rxAfterTx = 1
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 82 FF FF FF FF 8C 40 78 56 34 12 E4 01 01 00 00 08 08 06 04 00 00 18 10 00}");
  // expect Gp response with Commissioning Reply
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 78 56 34 12 F0 19 56 22 9B E7 C9 DE A1 F1 49 73 00 C3 36 2F 80 31 29 0B B8 A2 26 11 00 00 00 \\]");
  networkWait(6000);
  // send a sucess
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 89 FF FF FF FF 8C 10 78 56 34 12 11 00 00 00 E2 48 B7 29 84}");

  // Expect GP Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 D5 02 78 56 34 12 78 56 FE 11 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF 00 \\]"); // radius 00 --> 5 ?
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 00 0A 11 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF \\]");// Issue radius 0 --> 5
  networkWait(5000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 01 00 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 \\]");
  networkWait(5000);

  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 99 FF FF FF FF 8C 10 78 56 34 12 12 00 00 00 A8 00 01 02 03 04 9D 06 53 6F}"); // A8 with report Id 0
  expect("sink",".*clus 0x0406 \\(Occupancy Sensing\\) FC 08 seq .. cmd 0A payload\\[00 00 18 00 \\]");
  networkWait(200000);
  // end of step 2
  decommissionGPD();
  //print ("]");
}
void Test_4_4_1_14_Step1()
{
  //print ("\nStart of 4.4.1.14 Step 1[");
  // Sink Set Up
  test44112Setup();

  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E2 FF FF FF FF 4D E3 00}"); // Channel Request with Auto commissioning = 0
  // expect Gp response with Channel Configuration                                  00 00 00 00 00 00 00 00 F3 01 10
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 00 00 00 00 F3 01 10 \\]");
  networkWait(6000);

  // E0 - with rxAfterTx = 0, E4 to follow
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 EA FF FF FF FF 0C 78 56 34 12 E0 FE A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20}");
  networkWait(6000);
  // E4 1/3
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 EE FF FF FF FF 0C 78 56 34 12 E4 03 01 00 01 96 00 08 08 34 12 00 00 29 10 00}");
  networkWait(6000);
  // E4 2/3
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F3 FF FF FF FF 0C 78 56 34 12 E4 03 01 01 01 96 00 08 08 34 12 00 00 29 10 00}");
  networkWait(3000);
  // E4 3/3     - rxAfterTx = 1
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F7 FF FF FF FF 8C 40 78 56 34 12 E4 03 01 02 01 96 00 08 08 06 04 00 00 18 10 00}");

  // expect Gp response with Commissioning Reply
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 78 56 34 12 F0 19 56 82 52 C9 C7 7D 20 43 DB FD 71 CA 1C CA 4B 74 2F D3 01 DF 4F 10 00 00 00 \\]");
  networkWait(1000);

  // E0 - with rxAfterTx = 0, E4 to follow
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 FE FF FF FF FF 0C 78 56 34 12 E0 FE A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20}");
  networkWait(8000);
  // E4 1/3
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 03 FF FF FF FF 0C 78 56 34 12 E4 03 01 00 01 96 00 08 08 34 12 00 00 29 10 00}");
  networkWait(1000);
  // E4 2/3
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 06 FF FF FF FF 0C 78 56 34 12 E4 03 01 01 01 96 00 08 08 34 12 00 00 29 10 00}");
  networkWait(3000);
  // E4 3/3     - rxAfterTx = 1
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 0A FF FF FF FF 8C 40 78 56 34 12 E4 03 01 02 01 96 00 08 08 06 04 00 00 18 10 00}");

  // expect Gp response with Commissioning Reply
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 78 56 34 12 F0 19 56 82 52 C9 C7 7D 20 43 DB FD 71 CA 1C CA 4B 74 2F D3 01 DF 4F 10 00 00 00 \\]");
  networkWait(3000);

  // send success
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 12 FF FF FF FF 8C 10 78 56 34 12 11 00 00 00 E2 48 B7 29 84}");

  // Expect GP Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 D5 02 78 56 34 12 78 56 FE 11 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF 00 \\]"); // radius 00 --> 5 ?
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 00 0A 11 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF \\]");// Issue radius 0 --> 5
  networkWait(5000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 01 00 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 02 00 06 04 00 00 18 01 \\]");
  networkWait(5000);

  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 25 FF FF FF FF 8C 10 78 56 34 12 12 00 00 00 A8 02 01 02 03 04 0E 3C 82 73}"); // A8 with report Id 2
  expect("sink",".*clus 0x0406 \\(Occupancy Sensing\\) FC 08 seq .. cmd 0A payload\\[00 00 18 02 \\]");
  networkWait(200000);
  // end of step 2
  decommissionGPD();
  //print ("]");
}
void Test_4_4_1_14_Step2()
{
  //print ("\nStart of 4.4.1.14 Step 2[");
  // Sink Set Up
  test44112Setup();

  EnterCommissioning();
  networkWait(5000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A2 FF FF FF FF 4D E3 00}"); // Channel Request with Auto commissioning = 0
  // expect Gp response with Channel Configuration                                  00 00 00 00 00 00 00 00 F3 01 10
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 00 00 00 00 F3 01 10 \\]");
  networkWait(6000);

  // E0 - with rxAfterTx = 0, E4 to follow
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 AA FF FF FF FF 0C 78 56 34 12 E0 FE A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20}");
  networkWait(3000);
  // E4 3/3 - ReportId = 2 : as in Step 1C
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 AF FF FF FF FF 8C 40 78 56 34 12 E4 03 01 02 01 96 00 08 08 06 04 00 00 18 10 00}");
  networkWait(3000);
  // E4 1/3 and 2/3  - ReportId = 0 and 1 in two packets : as in step 1B
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 BB FF FF FF FF 0C 78 56 34 12 E4 03 01 00 01 96 00 08 08 34 12 00 00 29 10 00}");
  networkWait(2000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 BB FF FF FF FF 0C 78 56 34 12 E4 03 01 01 01 96 00 08 08 34 12 00 00 29 10 00}");
  networkWait(3000);

  // E0 - with rxAfterTx = 0, E4 to follow incremented FC
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 B7 FF FF FF FF 0C 78 56 34 12 E0 FE A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 10 00 00 00 20}");
  networkWait(3000);
  // E4 1/3 and 2/3  - ReportId = 0 and 1 in two packets : as in step 1B
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 BB FF FF FF FF 0C 78 56 34 12 E4 03 01 00 01 96 00 08 08 34 12 00 00 29 10 00}");
  networkWait(2000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 BB FF FF FF FF 0C 78 56 34 12 E4 03 01 01 01 96 00 08 08 34 12 00 00 29 10 00}");
  networkWait(3000);

  // E4 3/3 - ReportId = 2 : as in Step 1C
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 AF FF FF FF FF 8C 40 78 56 34 12 E4 03 01 02 01 96 00 08 08 06 04 00 00 18 10 00}");
  // expect Gp response with Commissioning Reply
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 78 56 34 12 F0 19 56 22 9B E7 C9 DE A1 F1 49 73 00 C3 36 2F 80 31 29 0B B8 A2 26 11 00 00 00 \\]");
  networkWait(3000);

  // E4 3/3 - ReportId = 2 : as in Step 1C - even if the report collection is over - this is to get a commReply with the last reportId frame
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 AF FF FF FF FF 8C 40 78 56 34 12 E4 03 01 02 01 96 00 08 08 06 04 00 00 18 10 00}");
  // expect Gp response with Commissioning Reply
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 78 56 34 12 F0 19 56 22 9B E7 C9 DE A1 F1 49 73 00 C3 36 2F 80 31 29 0B B8 A2 26 11 00 00 00 \\]");
  networkWait(3000);

  // send success
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 12 FF FF FF FF 8C 10 78 56 34 12 11 00 00 00 E2 48 B7 29 84}");

  // Expect GP Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 D5 02 78 56 34 12 78 56 FE 11 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF 00 \\]"); // radius 00 --> 5 ?
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 00 0A 11 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF \\]");// Issue radius 0 --> 5
  networkWait(5000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 01 00 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 02 00 06 04 00 00 18 01 \\]");
  networkWait(5000);

  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 25 FF FF FF FF 8C 10 78 56 34 12 12 00 00 00 A8 02 01 02 03 04 0E 3C 82 73}"); // A8 with report Id 2
  expect("sink",".*clus 0x0406 \\(Occupancy Sensing\\) FC 08 seq .. cmd 0A payload\\[00 00 18 02 \\]");
  networkWait(200000);
  // end of step 2
  decommissionGPD();
  //print ("]");
}

//Negative test: no cluster match:
void Test_4_4_1_14_Step3()
{
  //print ("\nStart of 4.4.1.14 Step 3[");
  // Sink Set Up
  test44112Setup();

  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A2 FF FF FF FF 4D E3 00}"); // Channel Request with Auto commissioning = 0
  // expect Gp response with Channel Configuration                                  00 00 00 00 00 00 00 00 F3 01 10
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 00 00 00 00 F3 01 10 \\]");
  networkWait(6000);

  // E0 - with rxAfterTx = 0, E4 to follow
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 00 FF FF FF FF 0C 78 56 34 12 E0 FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20}");
  networkWait(6000);
  // E4 1/1 - Negative test: no cluster match:
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 04 FF FF FF FF 8C 40 78 56 34 12 E4 01 01 00 01 96 00 08 08 34 12 00 00 29 10 00}");
  networkWait(1000);

  // E0 - with rxAfterTx = 0, E4 to follow
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 08 FF FF FF FF 0C 78 56 34 12 E0 FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 10 00 00 00 20}");
  networkWait(8000);
  // E4 1/1
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 0C FF FF FF FF 8C 40 78 56 34 12 E4 01 01 00 01 96 00 08 08 34 12 00 00 29 10 00}");

  // Don't expect Gp response with Commissioning Reply
  nexpect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[*");
  networkWait(3000);

  // send success voluentirily
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 11 FF FF FF FF 8C 10 78 56 34 12 11 00 00 00 E2 40 5A D3 94}");

  // Don't Expect GP Pairing
  nexpect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[*");
  networkWait(5000);
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(200000);
  // end of step 3
  //print ("]");
}

//Negative test: no GPD Application Description:
void Test_4_4_1_14_Step4()
{
  //print ("\nStart of 4.4.1.14 Step 4[");
  // Sink Set Up
  test44112Setup();

  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A3 FF FF FF FF 4D E3 00}"); // Channel Request with Auto commissioning = 0
  // expect Gp response with Channel Configuration                                  00 00 00 00 00 00 00 00 F3 01 10
  //expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 00 00 00 00 F3 01 10 \\]"); //TODO : why it is failing here !
  networkWait(6000);

  // E0 - with rxAfterTx = 0, E4 to follow
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 57 FF FF FF FF 8C 40 78 56 34 12 E0 FE A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20}");
  networkWait(2000);

  // E0 - with rxAfterTx = 0, E4 to follow
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 08 FF FF FF FF 0C 78 56 34 12 E0 FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 10 00 00 00 20}");
  networkWait(3000);

  // send success voluentirily
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 60 FF FF FF FF 8C 10 78 56 34 12 11 00 00 00 E2 40 5A D3 94}");

  // Don't Expect GP Pairing
  nexpect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[*");
  networkWait(5000);
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(200000);
  // end of step 4
  //print ("]");
}

//Negative test: missing second GPD Application Description:
void Test_4_4_1_14_Step5()
{
  //print ("\nStart of 4.4.1.14 Step 5[");
  // Sink Set Up
  test44112Setup();
  EnterCommissioning();
  networkWait(5000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A2 FF FF FF FF 4D E3 00}"); // Channel Request with Auto commissioning = 0
  // expect Gp response with Channel Configuration                                00 00 00 00 00 00 00 00 F3 01 10
  //expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 00 00 00 00 F3 01 10 \\]"); //TODO : why it is failing here !
  networkWait(6000);

  // E0 - with rxAfterTx = 0, E4 to follow
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 84 FF FF FF FF 0C 78 56 34 12 E0 FE A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20}");
  networkWait(6000);

  // E0 - with rxAfterTx = 0, E4 to follow
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 8C FF FF FF FF 0C 78 56 34 12 E0 FE A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 10 00 00 00 20}");
  networkWait(2000);

  // E4 - 1/3
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 90 FF FF FF FF 8C 40 78 56 34 12 E4 03 01 02 01 96 00 08 08 06 04 00 00 18 10 00}");
  networkWait(2000);

  // send success before other E4s
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 95 FF FF FF FF 8C 10 78 56 34 12 11 00 00 00 E2 40 5A D3 94}");

  // Don't Expect GP Pairing
  nexpect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[*");
  networkWait(5000);
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(200000);
  // end of step 5
  //print ("]");
}

//Negative test: missing GPD Commissioning command:
void Test_4_4_1_14_Step6()
{
  //print ("\nStart of 4.4.1.14 Step 6[");
  // Sink Set Up
  test44112Setup();

  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A2 FF FF FF FF 4D E3 00}"); // Channel Request with Auto commissioning = 0
  // expect Gp response with Channel Configuration                                  00 00 00 00 00 00 00 00 F3 01 10
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 00 00 00 00 F3 01 10 \\]");
  networkWait(2000);

  // E4 without any E0 prior to it.
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 B8 FF FF FF FF 8C 40 78 56 34 12 E4 01 01 00 01 96 00 08 08 06 04 00 00 29 10 00}");
  networkWait(2000);

  // Don't Expect GP Pairing
  nexpect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[*");
  networkWait(5000);
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(200000);
  // end of step 5
  //print ("]");
}
void Test_4_4_1_16()
{
  //print ("\nStart of 4.4.1.16[");
  // Sink Set Up
  test44112Setup();

  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A2 FF FF FF FF 4D E3 00}"); // Channel Request with Auto commissioning = 0
  // expect Gp response with Channel Configuration                                00 00 00 00 00 00 00 00 F3 01 10
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 00 00 00 00 F3 01 10 \\]");
  networkWait(2000);
  // E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 96 FF FF FF FF 8C 40 78 56 34 12 E0 07 A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 14 03 69 6A 69 02 04 01}");
  networkWait(6000);
  // E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 9E FF FF FF FF 8C 40 78 56 34 12 E0 07 A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 10 00 00 00 14 03 69 6A 69 02 04 01}");
  // expect Gp response with Commissioning Reply
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 78 56 34 12 F0 19 56 22 9B E7 C9 DE A1 F1 49 73 00 C3 36 2F 80 31 29 0B B8 A2 26 11 00 00 00 \\]");
  networkWait(10000);
  // send success
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A5 FF FF FF FF 8C 10 78 56 34 12 11 00 00 00 E2 48 B7 29 84}");

  // Expect GP Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 D5 02 78 56 34 12 78 56 07 11 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF 00 \\]"); // radius 00 --> 5 ?
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 07 00 0A 11 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF \\]");// Issue radius 0 --> 5
  networkWait(5000);

  GpTranslationRequestIndex(0); // To run this against switch
  //expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 01 00 01 78 56 34 12 69 0A 04 01 06 00 02 FE 03 01 01 FF \\]");
  networkWait(6000);

  EnterCommissioning();
  networkWait(1000);
  // Commissioning with a different contact status
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 30 FF FF FF FF 8C 00 78 56 34 12 E0 07 A5 EA 0D 67 0B A2 EE D0 8D D6 C0 67 73 15 F7 AC 56 70 D0 74 B0 F2 13 00 00 00 14 03 69 6A 69 02 04 02}");
  // Expect GP Pairing
  // expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 D5 02 78 56 34 12 78 56 07 11 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF 00 \\]"); // radius 00 --> 5 ?
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 07 00 0A 13 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF \\]");// Issue radius 0 --> 5
  networkWait(5000);

  GpTranslationRequestIndex(0);
  //expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 01 00 01 78 56 34 12 69 0A 04 01 06 00 02 FE 03 01 01 FF \\]");
  networkWait(200000);
  decommissionGPD();
  //print ("]");
}

void Test_GenericSwitchComands()
{

//print ("\nStart GenericSwitchComands unit tests//[");
ReadEmptySinkTable();

GpTranslationRequestIndex0Empty();

//GP Pairing configuration -pair GPD//
sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 07 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 10 02 14 0B");
networkWait(100);
send("sink", "plugin green-power-server table-print");
networkWait(1000);
send("THProxy", "raw 0x0021 {11 00 09 0A 28 06 78 56 34 12 07 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 10 02 14 0F}");
send("THProxy", "send " + sinkId + " 242 242");
networkWait(100);
send("sink", "plugin green-power-server table-print");
networkWait(1000);

GpTranslationRequestIndex(0);

//GP notification - GP command//
send("THProxy", "raw 0x0021 {8C 30 78 56 34 12 10 00 00 00 69 01 3B 3F 24 FB}");
send("THProxy", "send " + sinkId + " 242 242");
networkWait(1000);
//GP Pairing configuration -remove GPD//
sendGpPairingConfigWithRawPayload("11 00 09 0C 18 00 78 56 34 12 07 05 FE");

//print ("]");
}

void Test_4_4_1_17()
{
  //print ("\nStart of 4.4.1.17[");
  // Sink Set Up
  WriteGPSCommissioningModeNoResponse(1);
  WriteCommissioningExitModeNoResponse(4);
  WriteGPSSecurityLevelToNoResponse(6);
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  WriteGPSharedSecurityKeyTypeTo(2);
  WriteGPSharedSecurityKeyTo("B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF");

  EnterCommissioning();
  networkWait(3000);

  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A2 FF FF FF FF 4D E3 00}"); // Channel Request with Auto commissioning = 1
  // expect Gp response with Channel Configuration                                00 00 00 00 00 00 00 00 F3 01 10
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 00 00 00 00 F3 01 10 \\]");
  networkWait(2000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A2 FF FF FF FF 4D E3 00}"); // Channel Request with Auto commissioning = 0 to pull the channel configuration
  networkWait(5000);

  // E0 -- 1st Commissioning frame to get trigger the commissiong reply formation
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 45 FF FF FF FF 8C 40 78 56 34 12 E0 02 A5 EA 0D 67 0B A2 EE D0 8D D6 C0 67 73 15 F7 AC 56 70 D0 74 B0 F2 12 00 00 00 00}");
  networkWait(5000);
  // E0 -- 2nd to pull the commissioning reply
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 4C FF FF FF FF 8C 40 78 56 34 12 E0 02 A5 EA 0D 67 0B A2 EE D0 8D D6 C0 67 73 15 F7 AC 56 70 D0 74 B0 F2 13 00 00 00 00}");
  // expect Gp response with Commissioning Reply
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 78 56 34 12 F0 01 50 \\]");
  networkWait(5000);

  // send success
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 53 FF FF FF FF 8C 10 78 56 34 12 14 00 00 00 E2 C3 AC 9C 0B}");
  // Expect GP Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 D5 02 78 56 34 12 78 56 02 14 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF 00 \\]");
  networkWait(5000);
  ExitCommissioning();
  networkWait(5000);
  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 02 00 0A 14 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF \\]");
  decommissionGPD();
  //print ("]");
}

void Test_4_4_1_18()
{
  //print ("\nStart of 4.4.1.18[");

  WriteGPSCommissioningModeNoResponse(1);
  WriteCommissioningExitModeNoResponse(4);
  WriteGPSSecurityLevelToNoResponse(6);
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  WriteGPSharedSecurityKeyTypeTo(2);
  WriteGPSharedSecurityKeyTo("B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF");

  EnterCommissioning();
  networkWait(6000);

  // Unidirectional Commissioning With Shared Key type
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 86 FF FF FF FF 8C 00 78 56 34 12 E0 02 85 EA 0D 67 0B A2 EE D0 8D D6 C0 67 73 15 F7 AC 56 70 D0 74 B0 F2 13 00 00 00 00}");

    // Expect GP Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 D5 02 78 56 34 12 78 56 02 13 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF 00 \\]");
  networkWait(5000);

  ExitCommissioning();
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 02 00 0A 13 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF \\]");

  try{
  // Translation table request
  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 02 00 02 78 56 34 12 69 01 04 01 06 00 01 00 03 01 02 FF 78 56 34 12 6A 01 04 01 08 00 03 00 03 01 02 FF \\]");
  }catch (Exception ex){
  //print ("Test is FAILED : The Number of Entries is not as expecetd, Release command is not on Translation Table.");
  }

  decommissionGPD();

  WriteGPSharedSecurityKeyTypeTo(0);
  WriteGPSharedSecurityKeyTo("00000000000000000000000000000000");

  //print ("]");
}

void Test_4_4_3_3_step_1_3()
{
  //print ("\nStart of 4.4.3.3_step_1_3[");
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();

  // GP pairing configuration -
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 20");
  networkWait(10000);

  // GP pairing configuration -
  sendGpPairingConfigWithRawPayload("11 00 09 05 00 04 78 56 34 12 FE 05 FE 20 01 01 00 01 00 64 0A 08 06 04 00 00 18 32 00 09 76");
  networkWait(2000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 01 00 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 \\]");
  networkWait(1000);

  //Compact attribute reporting
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 35 FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 A8 00 76 09 CB 22 6B C3}");
  networkWait(1000);

  decommissionGPD();

  networkWait(20000);
  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 20");
  networkWait(3000);

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 05 00 04 78 56 34 12 FE 05 FE 20 01 01 00 01 00 64 0E 09 06 04 00 00 18 10 00 01 00 18 21 89 99");
  networkWait(2000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 01 00 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 \\]");

  //Compact attribute reporting
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 4B FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 A8 00 76 09 CB 22 6B C3}");
  networkWait(5000);

  decommissionGPD();
  networkWait(20000);

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 20");
  networkWait(2000);

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 05 00 04 78 56 34 12 FE 05 FE 20 01 01 00 01 00 64 0E 09 06 04 01 00 18 21 89 99 00 00 18 10 00");
  networkWait(2000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 01 00 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 \\]");

  //Compact attribute reporting
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 D0 FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 A8 00 76 09 CB 22 6B C3}");
  networkWait(5000);

  decommissionGPD();
  networkWait(20000);

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 20");
  networkWait(2000);

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 05 00 04 78 56 34 12 FE 05 FE 20 01 01 00 01 00 64 0F 19 06 04 34 12 02 50 18 10 02 00 00 18 10 00");
  networkWait(2000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 01 00 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 \\]");

  //Compact attribute reporting
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 EA FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 A8 00 76 09 CB 22 6B C3}");
  networkWait(5000);

  decommissionGPD();
  networkWait(20000);

  //print ("]");
}

void Test_4_4_3_3_step_4_7()
{
  //print ("\nStart of 4.4.3.3_step_4_7[");

  ReadEmptySinkTable();

  GpTranslationRequestIndex0Empty();

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 20");
  networkWait(2000);

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 09 09 05 00 04 78 56 34 12 FE 05 FE 20 02 02 00 01 00 64 0A 08 06 04 00 00 18 32 00 09 76 01 01 00 64 0A 08 06 04 00 00 18 32 00 09 76");
  networkWait(2000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 02 00 02 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 01 00 06 04 00 00 18 01 \\]");

  GpTranslationRequestIndex(1);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 02 01 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 01 00 06 04 00 00 18 01 \\]");

  //Compact attribute reporting
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A3 FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 A8 00 76 09 CB 22 6B C3}");
  networkWait(5000);

  //Compact attribute reporting
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A5 FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 A8 01 76 09 BE 0C 17 6D}");
  networkWait(5000);

  decommissionGPD();
  networkWait(20000);

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 20");
  networkWait(2000);

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 05 00 04 78 56 34 12 FE 05 FE 20 02 01 01 01 00 64 08 08 06 04 00 00 18 10 00");
  networkWait(2000);

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 05 00 04 78 56 34 12 FE 05 FE 20 02 01 00 01 00 64 08 08 06 04 00 00 18 10 00");
  networkWait(2000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 02 00 02 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 01 00 06 04 00 00 18 01 \\]");

  GpTranslationRequestIndex(1);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 02 01 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 01 00 06 04 00 00 18 01 \\]");

  //Compact attribute reporting
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 C2 FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 A8 00 76 09 CB 22 6B C3}");
  networkWait(5000);

  //Compact attribute reporting
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 C4 FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 A8 01 76 09 BE 0C 17 6D}");
  networkWait(5000);

  decommissionGPD();
  networkWait(20000);

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 20");
  networkWait(2000);

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 66 09 05 00 04 78 56 34 12 FE 05 FE 20 01 01 00 00 10 08 BB 04 02 00 21 10 00 08 06 04 00 00 18 10 02");
  networkWait(2000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 01 00 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 02 06 04 00 00 18 01 \\]");

  //Compact attribute reporting
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 DE FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 A8 00 76 09 CB 22 6B C3}");
  networkWait(5000);

  decommissionGPD();
  networkWait(20000);

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 20");
  networkWait(2000);

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 05 00 04 78 56 34 12 FE 05 FE 20 02 01 01 00 0A 18 DD DD 34 12 00 00 21 10 00");
  networkWait(2000);

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 05 00 04 78 56 34 12 FE 05 FE 20 02 01 00 00 08 08 06 04 00 00 18 10 00");
  networkWait(2000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 01 00 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 \\]");

  //Compact attribute reporting
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 FA FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 A8 00 76 09 CB 22 6B C3}");
  networkWait(5000);

  decommissionGPD();
  networkWait(20000);

  //print ("]");
}

void Test_4_4_3_4_step_1()
{
  //print ("\nStart of 4.4.3.4_step_1[");

  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 20");
  networkWait(10000);

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 09 09 05 00 04 78 56 34 12 FE 05 FE 20 01 01 00 00 10 08 06 04 00 00 18 10 18 08 06 04 00 00 18 10 02");
  networkWait(4000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 02 00 02 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 18 06 04 00 00 18 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 02 06 04 00 00 18 01 \\]");

  GpTranslationRequestIndex(1);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 02 01 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 02 06 04 00 00 18 01 \\]");

  //Compact attribute reporting
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 2B FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 A8 00 11 22 00 33 00 00 00 00 9B 85 B9 85}");
  networkWait(5000);

  decommissionGPD();
  networkWait(20000);

  //print ("]");
}

void Test_4_4_3_4_step_2()
{
  //print ("\nStart of 4.4.3.4_step_2[");

  ReadEmptySinkTable();

  GpTranslationRequestIndex0Empty();

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 20");
  networkWait(4000);

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 09 09 05 00 04 78 56 34 12 FE 05 FE 20 02 02 00 00 08 08 06 04 00 00 18 10 00 01 00 08 08 06 04 00 00 18 10 00");
  networkWait(4000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 02 00 02 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 01 00 06 04 00 00 18 01 \\]");

  GpTranslationRequestIndex(1);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 02 01 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 01 00 06 04 00 00 18 01 \\]");

  //Compact attribute reporting
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 55 FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 A8 00 00 00 00 00 0E CF B2 85}");
  networkWait(5000);

  //Compact attribute reporting
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 57 FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 A8 01 00 00 00 00 9D D7 BF 69}");
  networkWait(5000);

  decommissionGPD();
  networkWait(20000);

  //print ("]");
}

void Test_4_4_3_4_step_3()
{
  //print ("\nStart of 4.4.3.4_step_3[");

  ReadEmptySinkTable();

  GpTranslationRequestIndex0Empty();

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 20");
  networkWait(4000);

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 09 09 05 00 04 78 56 34 12 FE 05 FE 20 02 01 00 00 08 08 06 04 00 00 18 10 00");
  networkWait(4000);

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 09 09 05 00 04 78 56 34 12 FE 05 FE 20 02 01 01 00 08 08 06 04 00 00 18 10 00");
  networkWait(4000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 02 00 02 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 01 00 06 04 00 00 18 01 \\]");

  GpTranslationRequestIndex(1);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 02 01 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 01 00 06 04 00 00 18 01 \\]");

  //Compact attribute reporting
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 8B FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 A8 00 11 22 00 00 E1 A5 0F A3}");
  networkWait(5000);

  //Compact attribute reporting
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 8D FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 A8 01 01 00 00 00 86 50 62 E7}");
  networkWait(5000);

  decommissionGPD();
  networkWait(20000);

  //print ("]");
}

void Test_4_4_3_5()
{
  //print ("\nStart of 4.4.3.5[");

  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 20");
  networkWait(4000);

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 09 09 05 00 04 78 56 34 12 FE 05 FE 20 01 01 00 00 0D 09 06 04 00 00 18 10 00 00 00 18 10 02");
  networkWait(4000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 02 00 02 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 02 06 04 00 00 18 01 \\]");

  GpTranslationRequestIndex(1);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 02 01 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 02 06 04 00 00 18 01 \\]");

  //Compact attribute reporting
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 C2 FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 A8 00 11 22 00 00 00 00 00 00 28 AB A9 6B}");
  networkWait(5000);

  decommissionGPD();
  networkWait(20000);

  //print ("]");
}

void Test_4_4_3_6()
{
  //print ("\nStart of 4.4.3.6[");

  WriteCommissioningExitModeTo(4);
  WriteGPSCommissioningModeTo(1);
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 07 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 10 02 14 01");
  networkWait(10000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 07 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  // There is one entry in translation table instead of two//
  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 01 00 01 78 56 34 12 69 01 04 01 06 00 02 00 03 01 01 01 \\]");
  //print ("There is one entry in translation table instead of two");

  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F4 FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 69 01 3B 3F 24 FB}");
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F6 FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 6A 00 0A FE 64 38}");
  networkWait(5000);

  decommissionGPD();
  networkWait(20000);

  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 00 FF FF FF FF 8C 30 78 56 34 12 12 00 00 00 69 01 ED F8 3D 1E}");
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 02 FF FF FF FF 8C 30 78 56 34 12 13 00 00 00 6A 00 B8 C5 8C 89}");
  networkWait(5000);

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0A 2A 06 88 77 66 55 44 33 22 11 99 07 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 10 02 14 01");
  networkWait(10000);

  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 22 00 2A 02 88 77 66 55 44 33 22 11 99 07 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  // There is one entry in translation table instead of two//
  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 0A 01 00 01 88 77 66 55 44 33 22 11 99 69 01 04 01 06 00 02 00 03 01 01 01 \\]");
  //print ("There is one entry in translation table instead of two");
  networkWait(5000);

  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 11 FF FF FF FF 88 77 66 55 44 33 22 11 8C 32 99 10 00 00 00 69 01 8C F4 FD 97}");
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 13 FF FF FF FF 88 77 66 55 44 33 22 11 8C 32 99 11 00 00 00 6A 00 CA 91 13 33}");
  networkWait(5000);

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0C 1A 00 88 77 66 55 44 33 22 11 99 07 05 FE");
  networkWait(10000);

  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  //print ("]");
}

void Test_4_4_5_1()
{
  //print ("\nStart of 4.4.5.1[");

  GpTranslationRequestIndex0Empty();
  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 02 78 56 34 12 02 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(10000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 0B 00 05 78 56 34 12 00 01 04 01 03 00 00 02 00 3C 78 56 34 12 20 01 04 01 06 00 00 00 78 56 34 12 20 02 04 01 06 00 00 00 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 \\]");

  // GP Translation table Update: Toggle
  sendGpPairingConfigWithRawPayload("11 02 07 20 00 78 56 34 12 FF 99 01 04 01 06 00 02 00");
  networkWait(3000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 0C 00 05 78 56 34 12 00 01 04 01 03 00 00 02 00 3C 78 56 34 12 20 01 04 01 06 00 00 00 78 56 34 12 20 02 04 01 06 00 00 00 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 \\]");

  GpTranslationRequestIndex(3);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 0C 03 05 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 78 56 34 12 22 01 04 01 06 00 02 00 78 56 34 12 22 02 04 01 06 00 02 00 78 56 34 12 13 01 04 01 05 00 05 03 FF FF 03 \\]");

  GpTranslationRequestIndex(12);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[8B 00 0C 00 00 \\]");

  GpTranslationRequestIndex(3);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 0C 03 05 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 78 56 34 12 22 01 04 01 06 00 02 00 78 56 34 12 22 02 04 01 06 00 02 00 78 56 34 12 13 01 04 01 05 00 05 03 FF FF 03 \\]");

  //Send GPD Data Frame Reservd
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 D6 FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 99 FC F1 A7 65}");
  networkWait(5000);

  // GP Translation table Update: Toggle
  sendGpPairingConfigWithRawPayload("11 02 07 28 00 78 56 34 12 FF 23 01 04 01 06 00 02 00");
  networkWait(3000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 0D 00 05 78 56 34 12 00 01 04 01 03 00 00 02 00 3C 78 56 34 12 20 01 04 01 06 00 00 00 78 56 34 12 20 02 04 01 06 00 00 00 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 \\]");

  GpTranslationRequestIndex(3);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 0D 03 05 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 78 56 34 12 22 01 04 01 06 00 02 00 78 56 34 12 22 02 04 01 06 00 02 00 78 56 34 12 13 01 04 01 05 00 05 03 FF FF 03 \\]");

  GpTranslationRequestIndex(13);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[8B 00 0D 00 00 \\]");

  GpTranslationRequestIndex(3);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 0D 03 05 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 78 56 34 12 22 01 04 01 06 00 02 00 78 56 34 12 22 02 04 01 06 00 02 00 78 56 34 12 13 01 04 01 05 00 05 03 FF FF 03 \\]");

  GpTranslationRequestIndex(4);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 0D 04 05 78 56 34 12 21 02 04 01 06 00 01 00 78 56 34 12 22 01 04 01 06 00 02 00 78 56 34 12 22 02 04 01 06 00 02 00 78 56 34 12 13 01 04 01 05 00 05 03 FF FF 03 78 56 34 12 1B 01 04 01 05 00 04 03 FF FF 03 \\]");

  //Send GPD Data Frame Release
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E5 FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 23 74 D5 46 11}");
  networkWait(5000);

  //Send GPD Data Frame Reserved
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 EA FF FF FF FF 8C 30 78 56 34 12 12 00 00 00 99 97 49 4C 44}");
  networkWait(5000);

  // GP Translation table Update: Reserved
  sendGpPairingConfigWithRawPayload("11 04 07 28 00 78 56 34 12 FF 23 01 04 01 06 00 AA 00");
  networkWait(3000);

  GpTranslationRequestIndex(4);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 0D 04 05 78 56 34 12 21 02 04 01 06 00 01 00 78 56 34 12 22 01 04 01 06 00 02 00 78 56 34 12 22 02 04 01 06 00 02 00 78 56 34 12 13 01 04 01 05 00 05 03 FF FF 03 78 56 34 12 1B 01 04 01 05 00 04 03 FF FF 03 \\]");

  //Send GPD Data Frame Reserved
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F1 FF FF FF FF 8C 30 78 56 34 12 13 00 00 00 99 96 B9 0F 6D}");
  networkWait(5000);

  //Send GPD Data Frame Release
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F5 FF FF FF FF 8C 30 78 56 34 12 14 00 00 00 23 1B 77 74 BC}");
  networkWait(5000);

  // GP Translation table Update: Reserved
  sendGpPairingConfigWithRawPayload("11 06 07 50 00 78 56 34 12 FF 23 01 04 01 06 00 AA 00 FF 99 01 04 01 06 00 02 00");
  networkWait(3000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 0B 00 05 78 56 34 12 00 01 04 01 03 00 00 02 00 3C 78 56 34 12 20 01 04 01 06 00 00 00 78 56 34 12 20 02 04 01 06 00 00 00 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 \\]");

  decommissionGPD();
  networkWait(20000);

  //print ("]");
}

void Test_4_4_5_3()
{
  //print ("\nStart of 4.4.5.3[");

  GpTranslationRequestIndex0Empty();

  send("sink","plugin green-power-server table-print");
  networkWait(1000);

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 02 78 56 34 12 02 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(3000);

  //print ("\nGP pairing configuration");
  send("sink","plugin green-power-server table-print");
  networkWait(1000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 0B 00 05 78 56 34 12 00 01 04 01 03 00 00 02 00 3C 78 56 34 12 20 01 04 01 06 00 00 00 78 56 34 12 20 02 04 01 06 00 00 00 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 \\]");

  // GP Translation table Update Command with action Add
  sendGpPairingConfigWithRawPayload("11 02 07 20 00 78 56 34 12 20 88 FF 04 01 06 00 02 00");
  networkWait(3000);

  //print ("\nupdate Command with action Add");
  send("sink","plugin green-power-server table-print");
  networkWait(1000);

  // GP pairing configuration - replace sink entry
  sendGpPairingConfigWithRawPayload("11 00 09 0A 2A 02 88 77 66 55 44 33 22 11 99 02 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(3000);

  //print ("\nGP pairing configuration replcae sink entry");
  send("sink","plugin green-power-server table-print");
  networkWait(1000);

  // GP Translation table Update Command with action Add
  sendGpPairingConfigWithRawPayload("11 02 07 22 00 88 77 66 55 44 33 22 11 99 40 99 FF 04 01 06 00 02 00");
  networkWait(3000);

  //print ("\nupdate Command with action Add");
  send("sink","plugin green-power-server table-print");
  networkWait(1000);

  GpTranslationRequestIndex(0);

  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 18 00 05 78 56 34 12 00 01 04 01 03 00 00 02 00 3C 78 56 34 12 20 01 04 01 06 00 00 00 78 56 34 12 20 02 04 01 06 00 00 00 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(3);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 18 03 05 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 78 56 34 12 22 01 04 01 06 00 02 00 78 56 34 12 22 02 04 01 06 00 02 00 78 56 34 12 13 01 04 01 05 00 05 03 FF FF 03 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(5);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 18 05 04 78 56 34 12 22 01 04 01 06 00 02 00 78 56 34 12 22 02 04 01 06 00 02 00 78 56 34 12 13 01 04 01 05 00 05 03 FF FF 03 78 56 34 12 1B 01 04 01 05 00 04 03 FF FF 03 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x18);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[8B 00 18 00 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(40);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[8B 00 18 00 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x17);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 18 17 01 88 77 66 55 44 33 22 11 99 99 FF 04 01 06 00 02 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(8);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 18 08 04 78 56 34 12 1B 01 04 01 05 00 04 03 FF FF 03 78 56 34 12 40 01 04 01 00 03 01 02 00 FF 78 56 34 12 30 01 04 01 08 00 01 01 00 78 56 34 12 88 FF 04 01 06 00 02 00 \\]");
  networkWait(3000);

  // GP Translation table Update Command with action Replace
  sendGpPairingConfigWithRawPayload("11 04 07 28 00 78 56 34 12 11 88 FF 04 01 06 00 AA 00");
  networkWait(3000);

  //print ("\nupdate Command with action Replace");
  send("sink","plugin green-power-server table-print");
  networkWait(1000);

  send("sink","plugin green-power-server table-print");
  networkWait(1000);
  GpTranslationRequestIndex(17);
  //expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 12 11 01 88 77 66 55 44 33 22 11 99 99 FF 04 01 06 00 02 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(8);
  //expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 12 08 01 78 56 34 12 88 FF 04 01 06 00 AA 00 \\]");
  networkWait(3000);

  // GP Translation table Update Command with action Remove
  sendGpPairingConfigWithRawPayload("11 04 07 30 00 78 56 34 12 11 88 FF 04 01 06 00 02 00");
  networkWait(3000);

  //print ("\nupdate Command with action Remove");
  send("sink","plugin green-power-server table-print");
  networkWait(1000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 17 00 05 78 56 34 12 00 01 04 01 03 00 00 02 00 3C 78 56 34 12 20 01 04 01 06 00 00 00 78 56 34 12 20 02 04 01 06 00 00 00 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(8);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 17 08 03 78 56 34 12 1B 01 04 01 05 00 04 03 FF FF 03 78 56 34 12 40 01 04 01 00 03 01 02 00 FF 78 56 34 12 30 01 04 01 08 00 01 01 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(4);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 17 04 05 78 56 34 12 21 02 04 01 06 00 01 00 78 56 34 12 22 01 04 01 06 00 02 00 78 56 34 12 22 02 04 01 06 00 02 00 78 56 34 12 13 01 04 01 05 00 05 03 FF FF 03 78 56 34 12 1B 01 04 01 05 00 04 03 FF FF 03 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x17);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 17 17 01 88 77 66 55 44 33 22 11 99 99 FF 04 01 06 00 02 00 \\]");
  networkWait(3000);

  // GP Translation table Update Command with action Replace (different IEEE)
  sendGpPairingConfigWithRawPayload("11 02 07 2A 00 88 77 66 55 44 33 22 00 99 FF 99 FF 04 01 06 00 02 00 ");
  networkWait(3000);

  //print ("\nupdate Command with action Replace  (different IEEE)");
  send("sink","plugin green-power-server table-print");
  networkWait(1000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 18 00 05 78 56 34 12 00 01 04 01 03 00 00 02 00 3C 78 56 34 12 20 01 04 01 06 00 00 00 78 56 34 12 20 02 04 01 06 00 00 00 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x0B);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 18 0B 03 88 77 66 55 44 33 22 00 99 99 FF 04 01 06 00 02 00 88 77 66 55 44 33 22 11 99 00 01 04 01 03 00 00 02 00 3C 88 77 66 55 44 33 22 11 99 20 01 04 01 06 00 00 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x17);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 18 17 01 88 77 66 55 44 33 22 11 99 99 FF 04 01 06 00 02 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x0B);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 18 0B 03 88 77 66 55 44 33 22 00 99 99 FF 04 01 06 00 02 00 88 77 66 55 44 33 22 11 99 00 01 04 01 03 00 00 02 00 3C 88 77 66 55 44 33 22 11 99 20 01 04 01 06 00 00 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x17);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 18 17 01 88 77 66 55 44 33 22 11 99 99 FF 04 01 06 00 02 00 \\]");
  networkWait(3000);

  // GP Translation table Update Command with action Remove
  sendGpPairingConfigWithRawPayload("11 02 07 32 00 88 77 66 55 44 33 22 00 99 FF 99 FF 04 01 06 00 02 00 ");
  networkWait(3000);

  //print ("\nupdate Command with action Remove");
  send("sink","plugin green-power-server table-print");
  networkWait(1000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 17 00 05 78 56 34 12 00 01 04 01 03 00 00 02 00 3C 78 56 34 12 20 01 04 01 06 00 00 00 78 56 34 12 20 02 04 01 06 00 00 00 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x0C);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 17 0C 03 88 77 66 55 44 33 22 11 99 00 01 04 01 03 00 00 02 00 3C 88 77 66 55 44 33 22 11 99 20 01 04 01 06 00 00 00 88 77 66 55 44 33 22 11 99 20 02 04 01 06 00 00 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(5);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 17 05 04 78 56 34 12 22 01 04 01 06 00 02 00 78 56 34 12 22 02 04 01 06 00 02 00 78 56 34 12 13 01 04 01 05 00 05 03 FF FF 03 78 56 34 12 1B 01 04 01 05 00 04 03 FF FF 03 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x17);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 17 17 01 88 77 66 55 44 33 22 11 99 99 FF 04 01 06 00 02 00 \\]");
  networkWait(3000);

  // GP Translation table Update Command with action Replace (different GPD endpoint)
  sendGpPairingConfigWithRawPayload("11 02 07 2A 00 88 77 66 55 44 33 22 11 55 FF 99 FF 04 01 06 00 02 00");
  networkWait(3000);

  //print ("\nupdate Command with action Replace (different GPD endpoint)");
  send("sink","plugin green-power-server table-print");
  networkWait(1000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 18 00 05 78 56 34 12 00 01 04 01 03 00 00 02 00 3C 78 56 34 12 20 01 04 01 06 00 00 00 78 56 34 12 20 02 04 01 06 00 00 00 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x0B);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 18 0B 03 88 77 66 55 44 33 22 11 55 99 FF 04 01 06 00 02 00 88 77 66 55 44 33 22 11 99 00 01 04 01 03 00 00 02 00 3C 88 77 66 55 44 33 22 11 99 20 01 04 01 06 00 00 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x0C);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 18 0C 03 88 77 66 55 44 33 22 11 99 00 01 04 01 03 00 00 02 00 3C 88 77 66 55 44 33 22 11 99 20 01 04 01 06 00 00 00 88 77 66 55 44 33 22 11 99 20 02 04 01 06 00 00 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x17);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 18 17 01 88 77 66 55 44 33 22 11 99 99 FF 04 01 06 00 02 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x0B);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 18 0B 03 88 77 66 55 44 33 22 11 55 99 FF 04 01 06 00 02 00 88 77 66 55 44 33 22 11 99 00 01 04 01 03 00 00 02 00 3C 88 77 66 55 44 33 22 11 99 20 01 04 01 06 00 00 00 \\]");
  networkWait(3000);

  // GP Translation table Update Command with action Remove
  sendGpPairingConfigWithRawPayload("11 02 07 32 00 88 77 66 55 44 33 22 11 55 FF 99 FF 04 01 06 00 02 00");
  networkWait(3000);

  //print ("\nupdate Command with action Remove");
  send("sink","plugin green-power-server table-print");
  networkWait(1000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 17 00 05 78 56 34 12 00 01 04 01 03 00 00 02 00 3C 78 56 34 12 20 01 04 01 06 00 00 00 78 56 34 12 20 02 04 01 06 00 00 00 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x0B);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 17 0B 03 88 77 66 55 44 33 22 11 99 00 01 04 01 03 00 00 02 00 3C 88 77 66 55 44 33 22 11 99 20 01 04 01 06 00 00 00 88 77 66 55 44 33 22 11 99 20 02 04 01 06 00 00 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x0C);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 17 0C 03 88 77 66 55 44 33 22 11 99 00 01 04 01 03 00 00 02 00 3C 88 77 66 55 44 33 22 11 99 20 01 04 01 06 00 00 00 88 77 66 55 44 33 22 11 99 20 02 04 01 06 00 00 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x17);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 17 17 01 88 77 66 55 44 33 22 11 99 99 FF 04 01 06 00 02 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x0C);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 17 0C 03 88 77 66 55 44 33 22 11 99 00 01 04 01 03 00 00 02 00 3C 88 77 66 55 44 33 22 11 99 20 01 04 01 06 00 00 00 88 77 66 55 44 33 22 11 99 20 02 04 01 06 00 00 00 \\]");
  networkWait(3000);

  // GP Translation table Update Command with action Replace (different ZCL cluster)
  sendGpPairingConfigWithRawPayload("11 02 07 2A 00 88 77 66 55 44 33 22 11 99 FF 99 FF 04 01 08 00 02 00");
  networkWait(3000);

  //print ("\nupdate Command with action Replace (different ZCL cluster)");
  send("sink","plugin green-power-server table-print");
  networkWait(1000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 18 00 05 78 56 34 12 00 01 04 01 03 00 00 02 00 3C 78 56 34 12 20 01 04 01 06 00 00 00 78 56 34 12 20 02 04 01 06 00 00 00 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x0B);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 18 0B 03 88 77 66 55 44 33 22 11 99 99 FF 04 01 08 00 02 00 88 77 66 55 44 33 22 11 99 00 01 04 01 03 00 00 02 00 3C 88 77 66 55 44 33 22 11 99 20 01 04 01 06 00 00 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x0C);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 18 0C 03 88 77 66 55 44 33 22 11 99 00 01 04 01 03 00 00 02 00 3C 88 77 66 55 44 33 22 11 99 20 01 04 01 06 00 00 00 88 77 66 55 44 33 22 11 99 20 02 04 01 06 00 00 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x17);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 18 17 01 88 77 66 55 44 33 22 11 99 99 FF 04 01 06 00 02 00 \\]");
  networkWait(3000);

  // GP Translation table Update Command with action Remove
  sendGpPairingConfigWithRawPayload("11 02 07 32 00 88 77 66 55 44 33 22 11 99 FF 99 FF 04 01 08 00 02 00");
  networkWait(3000);

  //print ("\nupdate Command with action Remove");
  send("sink","plugin green-power-server table-print");
  networkWait(1000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 17 00 05 78 56 34 12 00 01 04 01 03 00 00 02 00 3C 78 56 34 12 20 01 04 01 06 00 00 00 78 56 34 12 20 02 04 01 06 00 00 00 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x0C);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 17 0C 03 88 77 66 55 44 33 22 11 99 00 01 04 01 03 00 00 02 00 3C 88 77 66 55 44 33 22 11 99 20 01 04 01 06 00 00 00 88 77 66 55 44 33 22 11 99 20 02 04 01 06 00 00 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x0D);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 17 0D 03 88 77 66 55 44 33 22 11 99 20 01 04 01 06 00 00 00 88 77 66 55 44 33 22 11 99 20 02 04 01 06 00 00 00 88 77 66 55 44 33 22 11 99 21 01 04 01 06 00 01 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x17);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 17 17 01 88 77 66 55 44 33 22 11 99 99 FF 04 01 06 00 02 00 \\]");
  networkWait(3000);

  // GP Translation table Update Command with action Replace (different sink endpoint)
  sendGpPairingConfigWithRawPayload("11 02 07 2A 00 88 77 66 55 44 33 22 11 99 FF 99 01 04 01 06 00 02 00");
  networkWait(3000);

  //print ("\nupdate Command with action Replace (different sink endpoint)");
  send("sink","plugin green-power-server table-print");
  networkWait(1000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 18 00 05 78 56 34 12 00 01 04 01 03 00 00 02 00 3C 78 56 34 12 20 01 04 01 06 00 00 00 78 56 34 12 20 02 04 01 06 00 00 00 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x0B);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 18 0B 03 88 77 66 55 44 33 22 11 99 99 01 04 01 06 00 02 00 88 77 66 55 44 33 22 11 99 00 01 04 01 03 00 00 02 00 3C 88 77 66 55 44 33 22 11 99 20 01 04 01 06 00 00 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x0C);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 18 0C 03 88 77 66 55 44 33 22 11 99 00 01 04 01 03 00 00 02 00 3C 88 77 66 55 44 33 22 11 99 20 01 04 01 06 00 00 00 88 77 66 55 44 33 22 11 99 20 02 04 01 06 00 00 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x17);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 18 17 01 88 77 66 55 44 33 22 11 99 99 FF 04 01 06 00 02 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(8);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 18 08 03 78 56 34 12 1B 01 04 01 05 00 04 03 FF FF 03 78 56 34 12 40 01 04 01 00 03 01 02 00 FF 78 56 34 12 30 01 04 01 08 00 01 01 00 \\]");
  networkWait(3000);

  // GP Translation table Update Command with action Remove
  sendGpPairingConfigWithRawPayload("11 02 07 32 00 88 77 66 55 44 33 22 11 99 FF 99 01 04 01 06 00 02 00");
  networkWait(3000);

  //print ("\nupdate Command with action Remove");
  send("sink","plugin green-power-server table-print");
  networkWait(1000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 17 00 05 78 56 34 12 00 01 04 01 03 00 00 02 00 3C 78 56 34 12 20 01 04 01 06 00 00 00 78 56 34 12 20 02 04 01 06 00 00 00 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x0C);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 17 0C 03 88 77 66 55 44 33 22 11 99 00 01 04 01 03 00 00 02 00 3C 88 77 66 55 44 33 22 11 99 20 01 04 01 06 00 00 00 88 77 66 55 44 33 22 11 99 20 02 04 01 06 00 00 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x0D);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 17 0D 03 88 77 66 55 44 33 22 11 99 20 01 04 01 06 00 00 00 88 77 66 55 44 33 22 11 99 20 02 04 01 06 00 00 00 88 77 66 55 44 33 22 11 99 21 01 04 01 06 00 01 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x17);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 17 17 01 88 77 66 55 44 33 22 11 99 99 FF 04 01 06 00 02 00 \\]");
  networkWait(3000);

  // GP Translation table Update Command with action Replace (different ProfileId)
  sendGpPairingConfigWithRawPayload("11 02 07 2A 00 88 77 66 55 44 33 22 11 99 FF 99 FF 09 01 06 00 02 00");
  networkWait(3000);

  //print ("\nupdate Command with action Replace (different ProfileId)");
  send("sink","plugin green-power-server table-print");
  networkWait(1000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 18 00 05 78 56 34 12 00 01 04 01 03 00 00 02 00 3C 78 56 34 12 20 01 04 01 06 00 00 00 78 56 34 12 20 02 04 01 06 00 00 00 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x0B);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 18 0B 03 88 77 66 55 44 33 22 11 99 99 FF 09 01 06 00 02 00 88 77 66 55 44 33 22 11 99 00 01 04 01 03 00 00 02 00 3C 88 77 66 55 44 33 22 11 99 20 01 04 01 06 00 00 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x0C);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 18 0C 03 88 77 66 55 44 33 22 11 99 00 01 04 01 03 00 00 02 00 3C 88 77 66 55 44 33 22 11 99 20 01 04 01 06 00 00 00 88 77 66 55 44 33 22 11 99 20 02 04 01 06 00 00 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x17);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 18 17 01 88 77 66 55 44 33 22 11 99 99 FF 04 01 06 00 02 00 \\]");
  networkWait(3000);

  // GP Translation table Update Command with action Remove
  sendGpPairingConfigWithRawPayload("11 02 07 2A 00 88 77 66 55 44 33 22 11 99 FF 99 FF 09 01 06 00 02 00");
  networkWait(3000);

  //print ("\nupdate Command with action Remove");
  send("sink","plugin green-power-server table-print");
  networkWait(1000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 18 00 05 78 56 34 12 00 01 04 01 03 00 00 02 00 3C 78 56 34 12 20 01 04 01 06 00 00 00 78 56 34 12 20 02 04 01 06 00 00 00 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x0B);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 18 0B 03 88 77 66 55 44 33 22 11 99 99 FF 09 01 06 00 02 00 88 77 66 55 44 33 22 11 99 00 01 04 01 03 00 00 02 00 3C 88 77 66 55 44 33 22 11 99 20 01 04 01 06 00 00 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x0C);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 18 0C 03 88 77 66 55 44 33 22 11 99 00 01 04 01 03 00 00 02 00 3C 88 77 66 55 44 33 22 11 99 20 01 04 01 06 00 00 00 88 77 66 55 44 33 22 11 99 20 02 04 01 06 00 00 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x17);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 18 17 01 88 77 66 55 44 33 22 11 99 99 FF 04 01 06 00 02 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(0x0B);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 18 0B 03 88 77 66 55 44 33 22 11 99 99 FF 09 01 06 00 02 00 88 77 66 55 44 33 22 11 99 00 01 04 01 03 00 00 02 00 3C 88 77 66 55 44 33 22 11 99 20 01 04 01 06 00 00 00 \\]");
  networkWait(3000);

  // GP pairing configuration - remove GPD
  sendGpPairingConfigWithRawPayload("11 00 09 0C 1A 00 88 77 66 55 44 33 22 11 99 02 05 FE");
  networkWait(3000);

  //print ("\npairing configuration remove gpd");
  send("sink","plugin green-power-server table-print");
  networkWait(1000);

  // GP pairing configuration - remove GPD
  sendGpPairingConfigWithRawPayload("11 00 09 0C 18 00 78 56 34 12 02 05 FE");
  networkWait(3000);

  //print ("\npairing configuration remove gpd");
  send("sink","plugin green-power-server table-print");
  networkWait(1000);

  ReadEmptySinkTable();

  GpTranslationRequestIndex0Empty();

  //print ("]");
}

void Test_4_4_5_4()
{
  //print ("\nStart of 4.4.5.4[");

  GpTranslationRequestIndex0Empty();

  // GP pairing configuration Create the pairings for all the endpoints that is able to accept 0x0406 cluster reports
  sendGpPairingConfigWithRawPayload("11 00 09 0A 2A 06 88 77 66 55 44 33 22 11 99 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 08 01 06 04");
  networkWait(3000);

  GpTranslationRequestIndex(0);
  // Check 4 entries = 2 endpoints and AF and A6 for each endpoint.
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 04 00 03 88 77 66 55 44 33 22 11 99 AF 01 04 01 FF FF 0A FF 88 77 66 55 44 33 22 11 99 AF 02 04 01 FF FF 0A FF 88 77 66 55 44 33 22 11 99 A6 01 04 01 FF FF FF FF \\]");
  networkWait(1000);

  // GP Translation table Update Command for comamnd A8 with reportId = 0 for Endpoint 1
  sendGpPairingConfigWithRawPayload("11 02 07 22 01 88 77 66 55 44 33 22 11 99 FF A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01");
  networkWait(3000);

  GpTranslationRequestIndex(4);
   // Check the updated entry (added)is in the TT for endpoint 1 for report Id = 0
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 0A 05 04 01 88 77 66 55 44 33 22 11 99 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 \\]");
  networkWait(1000);

  GpTranslationRequestIndex(5);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[8B 00 05 00 00 \\]");
  networkWait(1000);

  //Compact Attribute Reporting
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 8F FF FF FF FF 88 77 66 55 44 33 22 11 8C 32 99 10 00 00 00 A8 00 01 00 00 00 03 DB 25 74}");
  expect("sink",".*ep 01, clus 0x0406 \\(Occupancy Sensing\\) FC 08 seq .. cmd 0A payload\\[00 00 18 00 \\]");
  networkWait(10000);

  // GP Translation table Update Command for reportId = 1
  sendGpPairingConfigWithRawPayload("11 02 07 22 01 88 77 66 55 44 33 22 11 99 FF A8 01 04 01 FF FF 0A FE 09 07 01 00 06 04 00 00 18 01");
  networkWait(3000);

  GpTranslationRequestIndex(4);
  // Check the translation table for A8 reportId 1 and 0 both are present
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 0A 06 04 02 88 77 66 55 44 33 22 11 99 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 88 77 66 55 44 33 22 11 99 A8 01 04 01 FF FF 0A FE 09 07 01 00 06 04 00 00 18 01 \\]");
  networkWait(1000);

  //Compact Attribute Reporting
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 5A FF FF FF FF 88 77 66 55 44 33 22 11 8C 32 99 11 00 00 00 A8 00 02 00 00 00 44 70 AC 99}");
  //- forwarding as expected
  expect("sink",".*ep 01, clus 0x0406 \\(Occupancy Sensing\\) FC 08 seq .. cmd 0A payload\\[00 00 18 00 \\]");
  networkWait(10000);

  //Compact Attribute Reporting
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 5F FF FF FF FF 88 77 66 55 44 33 22 11 8C 32 99 12 00 00 00 A8 01 03 00 00 00 BE F8 00 63}");
  //- forwarding as expected
  expect("sink",".*ep 01, clus 0x0406 \\(Occupancy Sensing\\) FC 08 seq .. cmd 0A payload\\[00 00 18 01 \\]");
  networkWait(10000);

  // GP Translation table Update Command - Remove Translation for A8 for endpoint 1
  sendGpPairingConfigWithRawPayload("11 02 07 32 00 88 77 66 55 44 33 22 11 99 FF A8 01 04 01 FF FF 0A FE");
  networkWait(3000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 04 00 03 88 77 66 55 44 33 22 11 99 AF 01 04 01 FF FF 0A FF 88 77 66 55 44 33 22 11 99 AF 02 04 01 FF FF 0A FF 88 77 66 55 44 33 22 11 99 A6 01 04 01 FF FF FF FF \\]");
  networkWait(1000);

  //Compact Attribute Reporting
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 67 FF FF FF FF 88 77 66 55 44 33 22 11 8C 32 99 13 00 00 00 A8 00 04 00 00 00 33 9A 31 77}");
  // No forwarding as expected
  nexpect("sink",".*ep 01, clus 0x0406 \\(Occupancy Sensing\\) FC 08 seq .. cmd 0A payload\\[00 00 18 00 \\]");
  networkWait(10000);

  //Compact Attribute Reporting
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 6B FF FF FF FF 88 77 66 55 44 33 22 11 8C 32 99 14 00 00 00 A8 01 05 00 00 00 DA B1 EE 6D}");
  //No forwarding as expected
  nexpect("sink",".*ep 01, clus 0x0406 \\(Occupancy Sensing\\) FC 08 seq .. cmd 0A payload\\[00 00 18 01 \\]");
  networkWait(10000);

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0C 1A 00 88 77 66 55 44 33 22 11 99 02 05 FE");
  networkWait(3000);

  ReadEmptySinkTable();

  //print ("]");
}

void Test_4_4_5_5()
{
  //print ("\nStart of 4.4.5.5[");

  GpTranslationRequestIndex0Empty();
  networkWait(1000);
  send("sink","plugin green-power-server table-print");

  networkWait(3000);
  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0A 2A 02 88 77 66 55 44 33 22 11 99 02 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(3000);

  send("sink","plugin green-power-server table-print");
  networkWait(1000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 0B 00 03 88 77 66 55 44 33 22 11 99 00 01 04 01 03 00 00 02 00 3C 88 77 66 55 44 33 22 11 99 20 01 04 01 06 00 00 00 88 77 66 55 44 33 22 11 99 20 02 04 01 06 00 00 00 \\]");

  // GP Translation table Update Command add the generic switch command 0x69
  sendGpPairingConfigWithRawPayload("11 02 07 22 01 88 77 66 55 44 33 22 11 99 FF 69 01 04 01 06 00 02 FE 03 01 01 01");
  networkWait(3000);

  // Test all the table entries are there - including the last added for generic switch
  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 0C 00 03 88 77 66 55 44 33 22 11 99 00 01 04 01 03 00 00 02 00 3C 88 77 66 55 44 33 22 11 99 20 01 04 01 06 00 00 00 88 77 66 55 44 33 22 11 99 20 02 04 01 06 00 00 00 \\]");

  GpTranslationRequestIndex(3);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 0C 03 03 88 77 66 55 44 33 22 11 99 21 01 04 01 06 00 01 00 88 77 66 55 44 33 22 11 99 21 02 04 01 06 00 01 00 88 77 66 55 44 33 22 11 99 22 01 04 01 06 00 02 00 \\]");

  GpTranslationRequestIndex(6);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 0C 06 03 88 77 66 55 44 33 22 11 99 22 02 04 01 06 00 02 00 88 77 66 55 44 33 22 11 99 13 01 04 01 05 00 05 03 FF FF 03 88 77 66 55 44 33 22 11 99 1B 01 04 01 05 00 04 03 FF FF 03 \\]");

  GpTranslationRequestIndex(9);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 0C 09 02 88 77 66 55 44 33 22 11 99 40 01 04 01 00 03 01 02 00 FF 88 77 66 55 44 33 22 11 99 30 01 04 01 08 00 01 01 00 \\]");

  GpTranslationRequestIndex(11);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 0A 0C 0B 01 88 77 66 55 44 33 22 11 99 69 01 04 01 06 00 02 FE 03 01 01 01 \\]");

  GpTranslationRequestIndex(12);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[8B 00 0C 00 00 \\]");
  networkWait(3000);

  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 27 FF FF FF FF 88 77 66 55 44 33 22 11 8C 32 99 10 00 00 00 69 01 8C F4 FD 97}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 2B FF FF FF FF 88 77 66 55 44 33 22 11 8C 32 99 11 00 00 00 6A 00 CA 91 13 33}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);

  // GP Translation table Update Command -- added one more switch with different contact status
  sendGpPairingConfigWithRawPayload("11 22 07 22 01 88 77 66 55 44 33 22 11 99 FF 69 01 04 01 06 00 02 FE 03 01 02 02");
  networkWait(3000);

  // Test all the table entries are there - including the last added for generic switch
  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 0D 00 03 88 77 66 55 44 33 22 11 99 00 01 04 01 03 00 00 02 00 3C 88 77 66 55 44 33 22 11 99 20 01 04 01 06 00 00 00 88 77 66 55 44 33 22 11 99 20 02 04 01 06 00 00 00 \\]");

  GpTranslationRequestIndex(3);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 0D 03 03 88 77 66 55 44 33 22 11 99 21 01 04 01 06 00 01 00 88 77 66 55 44 33 22 11 99 21 02 04 01 06 00 01 00 88 77 66 55 44 33 22 11 99 22 01 04 01 06 00 02 00 \\]");

  GpTranslationRequestIndex(6);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 0D 06 03 88 77 66 55 44 33 22 11 99 22 02 04 01 06 00 02 00 88 77 66 55 44 33 22 11 99 13 01 04 01 05 00 05 03 FF FF 03 88 77 66 55 44 33 22 11 99 1B 01 04 01 05 00 04 03 FF FF 03 \\]");

  GpTranslationRequestIndex(9);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 0D 09 02 88 77 66 55 44 33 22 11 99 40 01 04 01 00 03 01 02 00 FF 88 77 66 55 44 33 22 11 99 30 01 04 01 08 00 01 01 00 \\]");

  GpTranslationRequestIndex(0x0B);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 0A 0D 0B 02 88 77 66 55 44 33 22 11 99 69 01 04 01 06 00 02 FE 03 01 01 01 88 77 66 55 44 33 22 11 99 69 01 04 01 06 00 02 FE 03 01 02 02 \\]");

  GpTranslationRequestIndex(0x0D);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[8B 00 0D 00 00 \\]");
  networkWait(5000);

  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 3E FF FF FF FF 88 77 66 55 44 33 22 11 8C 32 99 12 00 00 00 69 01 23 CD 48 BB}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 43 FF FF FF FF 88 77 66 55 44 33 22 11 8C 32 99 13 00 00 00 6A 00 86 FE 02 51}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);
  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 47 FF FF FF FF 88 77 66 55 44 33 22 11 8C 32 99 14 00 00 00 69 02 41 94 C4 F2}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 4B FF FF FF FF 88 77 66 55 44 33 22 11 8C 32 99 15 00 00 00 6A 00 B2 EE 67 AB}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);

  send("sink","plugin green-power-server table-print");
  networkWait(1000);

  // GP Translation table Update Command - Remove entry for command 69
  sendGpPairingConfigWithRawPayload("11 02 07 32 00 88 77 66 55 44 33 22 11 99 FF 69 01 04 01 06 00 02 FE");
  networkWait(3000);

  send("sink","plugin green-power-server table-print");
  networkWait(1000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 0B 00 03 88 77 66 55 44 33 22 11 99 00 01 04 01 03 00 00 02 00 3C 88 77 66 55 44 33 22 11 99 20 01 04 01 06 00 00 00 88 77 66 55 44 33 22 11 99 20 02 04 01 06 00 00 00 \\]");
  networkWait(5000);

  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 52 FF FF FF FF 88 77 66 55 44 33 22 11 8C 32 99 16 00 00 00 69 01 79 DB C4 A8}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 57 FF FF FF FF 88 77 66 55 44 33 22 11 8C 32 99 17 00 00 00 6A 00 63 4E 65 50}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 11 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);
  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 5B FF FF FF FF 88 77 66 55 44 33 22 11 8C 32 99 18 00 00 00 69 02 38 68 95 AE}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 11 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 5F FF FF FF FF 88 77 66 55 44 33 22 11 8C 32 99 19 00 00 00 6A 00 36 24 53 06}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 11 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);

  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0C 1A 00 88 77 66 55 44 33 22 11 99 02 05 FE");
  networkWait(3000);

  ReadEmptySinkTable();

  GpTranslationRequestIndex0Empty();

  //print ("]");
}
void Test_MultiClusterAttributeReporting()
{
  //  Set up a 0xAF command and then send a 0xA0, A1, A2 and A3 to see it translated
  // GP pairing configuration - to set up reporting wit 0xAF command for cluster 0x0406 and 0x0006
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 0C 01 AF 02 06 04 06 00");
  networkWait(500);

  //GP notification for A0 with cluster 0x0406 attribute 0
  sendGpNotificationWithRawPayload("11 0E 00 90 74 78 56 34 12 10 00 00 00 A0 06 06 04 00 00 18 00 00 00 5F");

  // Check if Sink EP 1 got this forwarded or not
  expect("sink",".*clus 0x0406 \\(Occupancy Sensing\\) FC 08 seq .. cmd 0A payload\\[00 00 18 00 \\]",1000);
  networkWait(1000);

  //GP notification for A1 - with manufacture Id 0x1234 with cluster 0x0406 attribute 0
  sendGpNotificationWithRawPayload("11 0E 00 90 74 78 56 34 12 10 00 00 00 A1 08 34 12 06 04 00 00 18 00 00 00 5F");

  // Check if Sink EP 1 got this forwarded or not
  expect("sink",".*clus 0x0406 \\(Occupancy Sensing\\) mfgId 1234 FC 0C seq .. cmd 0A payload\\[00 00 18 00 \\]",1000);
  networkWait(1000);

  //GP notification for A2 - with manufacture Id 0x1234 with cluster 0x0406 attribute 0 and cluster 0x0006 with attribute 0
  sendGpNotificationWithRawPayload("11 0E 00 90 74 78 56 34 12 10 00 00 00 A2 0C 06 04 00 00 18 00 06 00 00 00 10 01 00 00 5F");

  // Check if Sink EP 1 got this forwarded or not
  expect("sink",".*clus 0x0406 \\(Occupancy Sensing\\) FC 08 seq .. cmd 0A payload\\[00 00 18 00 \\]",1000);
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 08 seq .. cmd 0A payload\\[00 00 10 01 \\]",1000);
  networkWait(1000);

  //GP notification for A1 - with manufacture Id 0x1234 with cluster 0x0406 attribute 0 and cluster 0x0006 with attribute 0
  sendGpNotificationWithRawPayload("11 0E 00 90 74 78 56 34 12 10 00 00 00 A3 0E 34 12 06 04 00 00 18 00 06 00 00 00 10 01 00 00 5F");

  // Check if Sink EP 1 got this forwarded or not
  expect("sink",".*clus 0x0406 \\(Occupancy Sensing\\) mfgId 1234 FC 0C seq .. cmd 0A payload\\[00 00 18 00 \\]",1000);
  expect("sink",".*clus 0x0006 \\(On/off\\) mfgId 1234 FC 0C seq .. cmd 0A payload\\[00 00 10 01 \\]",1000);
  networkWait(1000);

  //GP notification for A1 - with manufacture Id 0x1234 with cluster 0x0406 attribute 0 and cluster 0x0006 with attribute 0
  sendGpNotificationWithRawPayload("11 0E 00 90 74 78 56 34 12 10 00 00 00 A3 15 34 12 06 04 00 00 18 00 06 00 00 00 10 01 08 00 01 00 21 34 12 00 00 5F");

  // Check if Sink EP 1 got this forwarded or not
  expect("sink",".*clus 0x0406 \\(Occupancy Sensing\\) mfgId 1234 FC 0C seq .. cmd 0A payload\\[00 00 18 00 \\]",1000);
  expect("sink",".*clus 0x0006 \\(On/off\\) mfgId 1234 FC 0C seq .. cmd 0A payload\\[00 00 10 01 \\]",1000);
  expect("sink",".*clus 0x0008 \\(Level Control\\) mfgId 1234 FC 0C seq .. cmd 0A payload\\[01 00 21 34 12 \\]",1000);

  networkWait(1000);
  send("sink","plugin green-power-server table-print");
  networkWait(1000);
}

void Test_4_7_14_step1_2()
{
  //print ("\nStart of 4.7.14  Step1_2 //[");
  // First Commissioning  Switch Type UNKNOWN
  test44112Setup();
  EnterCommissioning();
  networkWait(5000);

  // Commissioning with a different contact status
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 8F FF FF FF FF 0C 78 56 34 12 E0 07 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 10 02 04 01}");

  // Expect GP Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E5 02 78 56 34 12 78 56 07 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 07 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");// Issue radius 0 --> 5
  networkWait(5000);

  // Exit commissioning mode
  ExitCommissioning();
  networkWait(5000);

  send("sink", "plugin green-power-server table-print");
  networkWait(5000);

  GpTranslationRequestIndex(0);
  networkWait(5000);

  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 9F FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 69 01 3B 3F 24 FB}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A3 FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 6A 00 0A FE 64 38}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);

  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A7 FF FF FF FF 8C 30 78 56 34 12 12 00 00 00 69 03 57 DA 88 1B}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);  //TODO : This needs to be communicated to Legrand
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 AF FF FF FF FF 8C 30 78 56 34 12 13 00 00 00 6A 00 B8 C5 8C 89}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);

  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 49 FF FF FF FF 8C 30 78 56 34 12 14 00 00 00 69 11 B8 E8 2E 0D}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000); //TODO : This needs to be communicated to Legrand
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 B5 FF FF FF FF 8C 30 78 56 34 12 15 00 00 00 6A 00 23 5D 89 4F}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);

  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 51 FF FF FF FF 8C 30 78 56 34 12 16 00 00 00 69 04 95 3B E2 52}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);
  // release
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 56 FF FF FF FF 8C 30 78 56 34 12 17 00 00 00 6A 00 DB E8 8A 65}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);

  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 5A FF FF FF FF 8C 30 78 56 34 12 18 00 00 00 69 10 CA CF 49 20}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 5E FF FF FF FF 8C 30 78 56 34 12 19 00 00 00 6A 00 31 29 F9 C9}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);

  // Second Commissioning Switch Type UNKNOWN
  EnterCommissioning();
  networkWait(5000);

  // Commissioning with a different contact status
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 D0 FF FF FF FF 0C 78 56 34 12 E0 07 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 1A 00 00 00 10 02 04 02}");

  // Dont expect GP Pairing
  nexpect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[28 E5 02 78 56 34 12 78 56 07 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 07 00 12 1A 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");// Issue radius 0 --> 5
  networkWait(2000);

  // Exit commissioning mode
  ExitCommissioning();
  networkWait(2000);

  send("sink", "plugin green-power-server table-print");
  networkWait(5000);
  GpTranslationRequestIndex(0);
  networkWait(5000);

  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 DF FF FF FF FF 8C 30 78 56 34 12 20 00 00 00 69 01 52 9E 91 68}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 00 payload\\[\\]",1000);
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E3 FF FF FF FF 8C 30 78 56 34 12 21 00 00 00 6A 00 2D B0 71 67}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);

  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E7 FF FF FF FF 8C 30 78 56 34 12 22 00 00 00 69 02 89 D5 06 E9}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 01 payload\\[\\]",1000);
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 EB FF FF FF FF 8C 30 78 56 34 12 23 00 00 00 6A 00 CB 51 87 F9}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);

  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 EF FF FF FF FF 8C 30 78 56 34 12 24 00 00 00 69 05 15 DD 39 81}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F4 FF FF FF FF 8C 30 78 56 34 12 25 00 00 00 6A 00 F0 32 6F DA}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);

  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F8 FF FF FF FF 8C 30 78 56 34 12 26 00 00 00 69 04 67 5F 38 07}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 FC FF FF FF FF 8C 30 78 56 34 12 27 00 00 00 6A 00 2B 6A 19 31}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);

  //cleanup
  decommissionGPD();
  networkWait(5000);

  // Third Commissioning  Switch Type BUTTON SWITCH
  test44112Setup();
  EnterCommissioning();
  networkWait(5000);

  // Commissioning with a different contact status
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 0A FF FF FF FF 0C 78 56 34 12 E0 07 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 10 02 14 01}");

  // Expect GP Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E5 02 78 56 34 12 78 56 07 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 07 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");// Issue radius 0 --> 5
  networkWait(5000);

  // Exit commissioning mode
  ExitCommissioning();
  networkWait(5000);

  send("sink", "plugin green-power-server table-print");
  networkWait(5000);

  GpTranslationRequestIndex(0);
  networkWait(5000);

  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 19 FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 69 01 3B 3F 24 FB}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 1E FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 6A 00 0A FE 64 38}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);
  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 22 FF FF FF FF 8C 30 78 56 34 12 12 00 00 00 69 04 66 F7 55 F1}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 26 FF FF FF FF 8C 30 78 56 34 12 14 00 00 00 6A 00 99 93 DE 07}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);

  //cleanup
  decommissionGPD();
  networkWait(5000);

  // Fourth Commissioning  Switch Type ROCKER SWITCH
  test44112Setup();
  EnterCommissioning();
  networkWait(10000);
  // Commissioning with a different contact status
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 33 FF FF FF FF 0C 78 56 34 12 E0 07 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 10 02 24 01}");
  // Expect GP Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E5 02 78 56 34 12 78 56 07 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 07 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");// Issue radius 0 --> 5
  networkWait(5000);

  // Exit commissioning mode
  ExitCommissioning();
  networkWait(5000);

  send("sink", "plugin green-power-server table-print");
  networkWait(5000);

  GpTranslationRequestIndex(0);
  networkWait(5000);

  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 DF FF FF FF FF 8C 30 78 56 34 12 20 00 00 00 69 01 52 9E 91 68}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 00 payload\\[\\]",1000);
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E3 FF FF FF FF 8C 30 78 56 34 12 21 00 00 00 6A 00 2D B0 71 67}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);

  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E7 FF FF FF FF 8C 30 78 56 34 12 22 00 00 00 69 02 89 D5 06 E9}");

  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 01 payload\\[\\]",1000);

  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 EB FF FF FF FF 8C 30 78 56 34 12 23 00 00 00 6A 00 CB 51 87 F9}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);

  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F8 FF FF FF FF 8C 30 78 56 34 12 26 00 00 00 69 04 67 5F 38 07}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 FC FF FF FF FF 8C 30 78 56 34 12 27 00 00 00 6A 00 2B 6A 19 31}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);

  //cleanup
  // Send GP pairing configuration
  decommissionGPD();
  networkWait(5000);
  //print ("]");
}

void Test_4_7_14_step3()
{
  //print ("\nStart of 4.7.14  Step3 //[");
  test44112Setup();

  // pairing configuration  Switch Type BUTTON
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 07 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 10 02 14 01");
  networkWait(5000);

  ReadSinkTable();
  //expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 07 00 0A 13 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF \\]");// Issue radius 0 --> 5
  networkWait(5000);

  send("sink", "plugin green-power-server table-print");
  networkWait(5000);

  GpTranslationRequestIndex(0);
  networkWait(5000);

  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 78 FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 69 01 3B 3F 24 FB}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 7C FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 6A 00 0A FE 64 38}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);
  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 80 FF FF FF FF 8C 30 78 56 34 12 12 00 00 00 69 03 57 DA 88 1B}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 84 FF FF FF FF 8C 30 78 56 34 12 13 00 00 00 6A 00 B8 C5 8C 89}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);
  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 88 FF FF FF FF 8C 30 78 56 34 12 14 00 00 00 69 04 EE C1 21 87}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 8D FF FF FF FF 8C 30 78 56 34 12 15 00 00 00 6A 00 23 5D 89 4F}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);
  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 91 FF FF FF FF 8C 30 78 56 34 12 16 00 00 00 69 10 A7 93 4C 0E}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 95 FF FF FF FF 8C 30 78 56 34 12 17 00 00 00 6A 00 DB E8 8A 65}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);

  //update Command Replace Entry Index 0xFF
  send("THProxy", "raw 0x0021 {11 62 07 28 01 78 56 34 12 FF 69 01 04 01 06 00 02 FE 03 01 01 01}");
  send("THProxy", "send " + sinkId + " 242 242");
  networkWait(5000);

  send("sink", "plugin green-power-server table-print");
  networkWait(5000);

  GpTranslationRequestIndex(0);
  networkWait(5000);

  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 9B FF FF FF FF 8C 30 78 56 34 12 20 00 00 00 69 03 29 6B E6 56}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 9F FF FF FF FF 8C 30 78 56 34 12 21 00 00 00 6A 00 2D B0 71 67}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);

  //update Command Replace Entry Index 0xFF
  send("THProxy", "raw 0x0021 {11 02 07 28 01 78 56 34 12 FF 69 01 04 01 06 00 02 FE 03 01 01 0F}");
  send("THProxy", "send " + sinkId + " 242 242");
  networkWait(5000);

  send("sink", "plugin green-power-server table-print");
  networkWait(5000);

  GpTranslationRequestIndex(0);
  networkWait(5000);

  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A6 FF FF FF FF 8C 30 78 56 34 12 22 00 00 00 69 03 6A 77 D8 A0}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 AA FF FF FF FF 8C 30 78 56 34 12 23 00 00 00 6A 00 CB 51 87 F9}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);

  //cleanup
  // Send GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0C 18 00 78 56 34 12 07 05 FE");
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[30 00 00 78 56 34 12 \\]");
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(5000);
  //print ("]");
}

void Test_4_7_14_step4()
{
  //print ("\nStart of 4.7.14  Step4 //[");
   // First Commissioning  Switch Type UNKNOWN
  test44112Setup();
  EnterCommissioning();
  networkWait(5000);

  // Commissioning with a different contact status
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 BF FF FF FF FF 0C 78 56 34 12 E0 FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 14 02 69 6A 02 04 01}");

  // Expect GP Pairing
  //expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[19 9D 01 28 E5 02 78 56 34 12 78 56 07 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 05 \\]");
  networkWait(5000);

  ReadSinkTable();
  //expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 07 00 0A 13 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF \\]");// Issue radius 0 --> 5
  networkWait(5000);

  // Exit commissioning mode
  ExitCommissioning();
  networkWait(5000);

  send("sink", "plugin green-power-server table-print");
  networkWait(5000);

  GpTranslationRequestIndex(0);
  networkWait(5000);

  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 D0 FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 69 01 3B 3F 24 FB}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 D4 FF FF FF FF 8C 30 78 56 34 12 12 00 00 00 6A 00 7B A1 F0 BF}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);
  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 D8 FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 69 03 68 7D 4D 46}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 D9 FF FF FF FF 8C 30 78 56 34 12 13 00 00 00 6A 00 B8 C5 8C 89}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);
  //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 DD FF FF FF FF 8C 30 78 56 34 12 14 00 00 00 69 04 EE C1 21 87}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E1 FF FF FF FF 8C 30 78 56 34 12 15 00 00 00 6A 00 23 5D 89 4F}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);

  //cleanup
  // Send GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0C 18 00 78 56 34 12 07 05 FE");
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[30 00 00 78 56 34 12 \\]");
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(5000);

 // pairing configuration  Switch Type UNKNOWN
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 14 02 69 6A 02 04 01");
  networkWait(5000);

  ReadSinkTable();
  //expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 07 00 0A 13 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF \\]");// Issue radius 0 --> 5
  networkWait(5000);

  send("sink", "plugin green-power-server table-print");
  networkWait(5000);

  GpTranslationRequestIndex(0);
  networkWait(5000);

 //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F1 FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 69 01 3B 3F 24 FB}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F5 FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 6A 00 0A FE 64 38}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);
 //vector press
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F9 FF FF FF FF 8C 30 78 56 34 12 12 00 00 00 69 04 66 F7 55 F1}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);
  //vector release
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 FE FF FF FF FF 8C 30 78 56 34 12 13 00 00 00 6A 00 B8 C5 8C 89}");
  nexpect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd .. payload\\[\\]",1000);
  networkWait(5000);

  //cleanup
  // Send GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0C 18 00 78 56 34 12 07 05 FE");
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[30 00 00 78 56 34 12 \\]");
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(5000);
  //print ("]");
}

void Test_4_4_1_7_step_1_2()
{
  //print ("\nStart of 4.4.1.7_Step1_2[");
  // Sink Set Up
  test44112Setup();

  // 1A
  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F3 FF FF FF FF 4D E3 11}"); // Channel Request with Auto commissioning = 1, chanel 12 , other than opeerational channel
  networkWait(1000);   // Within tx channel timeout of 5 seconds, when the Sink is on TxChannel
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F4 FF FF FF FF 0D E3 11}"); // Channel Request with Auto commissioning = 1, on operational channel,
  networkWait(200000);

  // 1B
  EnterCommissioning();
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 FE FF FF FF FF 4D E3 00}"); // Channel Request with Auto commissioning = 1, on operational channel,
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 05 FF FF FF FF 4D E3 00}"); // Channel Request with Auto commissioning = 1, on operational channel,
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 05 FF FF FF FF 0D E3 00}"); // Channel Request with Auto commissioning = 0, on operational channel,
  networkWait(200000);

  // 1C
  EnterCommissioning();
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 FE FF FF FF FF 4D E3 11}"); // Channel Request with Auto commissioning = 1, chanel 12 , other than opeerational channel
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 05 FF FF FF FF 4D E3 11}"); // Channel Request with Auto commissioning = 1, on operational channel,
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 10 FF FF FF FF 0D E3 11}"); // Channel Request with Auto commissioning = 0, on operational channel,
  networkWait(200000);

  // 1D
  EnterCommissioning();
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 15 FF FF FF FF 4D E3 00}"); // Channel Request with Auto commissioning = 1, chanel 12 , other than opeerational channel
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 20 FF FF FF FF 0D E3 00}"); // Channel Request with Auto commissioning = 0, on operational channel,
  //expect a channel configuration from Sink
  //expect("sink","Sending channel reply gpdf");
  networkWait(3000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 25 FF FF FF FF 0D E3 00}"); // Channel Request with Auto commissioning = 0, on operational channel,
  networkWait(200000);

  // 2A
  WriteGPSharedSecurityKeyTypeTo(2);
  WriteGPSharedSecurityKeyTo("C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF");
  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 20 FF FF FF FF 0D E3 00}"); // Channel Request with Auto commissioning = 0, on operational channel,
  //expect a channel configuration from Sink
  //expect("sink","Sending channel reply gpdf");
  networkWait(3000);
  // Send E0 with rxAfterTx=1, GPsecurityKeyRequest =1, GPDkeyEncryption =1
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 65 FF FF FF FF 8C 40 78 56 34 12 E0 02 A1 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 20 00 00 00}"); // Channel Request with Auto commissioning = 0, on operational channel,
  networkWait(1000);
  // Send E0 with rxAfterTx=1, GPsecurityKeyRequest =1, GPDkeyEncryption =1
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 65 FF FF FF FF 8C 40 78 56 34 12 E0 02 A1 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 21 00 00 00}"); // Channel Request with Auto commissioning = 0, on operational channel,
  // expect commissioning Reply in GPD
  networkWait(1000);
  // 2B
  // send Success
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 75 FF FF FF FF 8C 10 78 56 34 12 23 00 00 00 E2 E4 B1 03 F6}");
  // expect a Gp Pairing to be out
  networkWait(1000);
  // Read Sink Table
  ReadSinkTable();
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 02 00 0A 23 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(30000);
  // 2C
  // send Success
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 75 FF FF FF FF 8C 10 78 56 34 12 23 00 00 00 E2 E4 B1 03 F6}");
  // Don't expect a Gp Pairing
  networkWait(3000);
  decommissionGPD();
  //print ("]");
}

void Test_4_4_1_7_step_8_10_NotImmediateResponse()
{
  print ("\nStart of 4_4_1_7_step_8_10_NotImmediateResponse[");
  // Sink Set Up
  test44112Setup();

  // 8A
  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F4 FF FF FF FF 0D E3 11}"); // Channel Request, TxChannel = non operational channel
  networkWait(4800);
  send("gpd1", "plugin green-power-test-device set-phy-channel 12");                            // Change GPD channel to 12
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F5 FF FF FF FF 0D E3 11}"); // Channel Request, TxChannel = non operational channel
  networkWait(5000);

  // 8B
  send("gpd1", "plugin green-power-test-device set-phy-channel 11");
  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F6 FF FF FF FF 0D E3 11}"); // Channel Request, TxChannel = non operational channel
  networkWait(5100);
  send("gpd1", "plugin green-power-test-device set-phy-channel 12");
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F7 FF FF FF FF 0D E3 11}"); // Channel Request, TxChannel = non operational channel
  networkWait(5000);

  // 8C
  send("gpd1", "plugin green-power-test-device set-phy-channel 11");
  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F8 FF FF FF FF 0D E3 11}"); // Channel Request, TxChannel = non operational channel
  networkWait(5100);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F9 FF FF FF FF 0D E3 00}"); // Channel Request, TxChannel = operational channel
  networkWait(5000);

  // 9A
  EnterCommissioning();
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 20 FF FF FF FF 0D E3 00}"); // Channel Request with Auto commissioning = 0, on operational channel,
  //expect a channel configuration from Sink
  //expect("sink","Sending channel reply gpdf");
  networkWait(3000);
  // Send E0 with rxAfterTx=1, GPsecurityKeyRequest =0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 D3 FF FF FF FF 8C 40 78 56 34 12 E0 02 81 82 10 00 00 00}");
  networkWait(1000);
  // Send E0 with rxAfterTx=1, GPsecurityKeyRequest =1, GPDkeyEncryption =1
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 D7 FF FF FF FF 8C 40 78 56 34 12 E0 02 81 82 11 00 00 00}");
  // expect commissioning Reply in GPD
  networkWait(3000);
  // Read Sink Table
  ReadEmptySinkTable();
  networkWait(30000);

  // 10A
  EnterCommissioning();
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 20 FF FF FF FF 0D E3 00}"); // Channel Request with Auto commissioning = 0, on operational channel,
  //expect a channel configuration from Sink
  //expect("sink","Sending channel reply gpdf");
  networkWait(3000);
  // Send E0 with rxAfterTx=1, GPsecurityKeyRequest =0 , key present, gpd id = 000000000
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F1 FF FF FF FF 8C 40 00 00 00 00 E0 02 A1 F2 82 7C 7C 2B 60 7C B9 F6 3E 9A F3 9C F1 DD 01 0A 4C 71 99 FF 10 00 00 00}");
  networkWait(1000);
  // Send E0 with rxAfterTx=1, GPsecurityKeyRequest = 0 , key present
   send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F2 FF FF FF FF 8C 40 00 00 00 00 E0 02 A1 F2 82 7C 7C 2B 60 7C B9 F6 3E 9A F3 9C F1 DD 01 0A 4C 71 99 FF 11 00 00 00}");
  networkWait(3000);
  // Read Sink Table
  ReadSinkTable();
  ReadEmptySinkTable();
  networkWait(30000);

  // 10B
  EnterCommissioning();
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 20 FF FF FF FF 0D E3 00}"); // Channel Request with Auto commissioning = 0, on operational channel,
  //expect a channel configuration from Sink
  //expect("sink","Sending channel reply gpdf");
  networkWait(3000);
  // Send E0 with rxAfterTx=1, GPsecurityKeyRequest =0 , key present, gpd ieee addr = 00000000000000000
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 09 FF FF FF FF 00 00 00 00 00 00 00 00 8C 42 00 E0 02 A1 F2 82 7C 7C 2B 60 7C B9 F6 3E 9A F3 9C F1 DD 01 0A 4C 71 99 FF 10 00 00 00}");
  networkWait(1000);
  // Send E0 with rxAfterTx=1, GPsecurityKeyRequest = 0 , key present
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 0A FF FF FF FF 00 00 00 00 00 00 00 00 8C 42 00 E0 02 A1 F2 82 7C 7C 2B 60 7C B9 F6 3E 9A F3 9C F1 DD 01 0A 4C 71 99 FF 11 00 00 00}");
  networkWait(3000);
  // Read Sink Table
  ReadSinkTable();
  ReadEmptySinkTable();
  networkWait(3000);

  //print ("]");
}

void Test_4_4_1_7_step_3_5()
{
  print ("\nStart of 4.4.1.7_Step3_5[");
  // Sink Set Up
  test44112Setup();

  // 3 - Negative test: reception of Data GPDF carrying Channel Request:
  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 6B FF FF FF FF 4D E3 00}"); // Channel Request, TxChannel = operational channel
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 71 FF FF FF FF 0C 00 00 00 00 E3 00}"); // gpdid = 0, and data frame
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 72 FF FF FF FF 09 E3 00}"); // protocol version 2
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 73 FF FF FF FF 8D 00 E3 00}"); // Ext Nwk Frame control present
  networkWait(5000);

  // 4 - Negative test: reception of GPDF other than Channel Request on TransmitChannel:
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 7A FF FF FF FF 4D E3 11}"); // Channel Request, TxChannel = non operational channel
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device set-phy-channel 12");
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F7 FF FF FF FF 0D E3 11}"); // Channel Request, TxChannel = non operational channel
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 81 FF FF FF FF 8C 40 78 56 34 12 E0 02 A1 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 10 00 00 00}");
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 84 FF FF FF FF 8C 00 78 56 34 12 E0 02 A1 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 10 00 00 00}");
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 87 FF FF FF FF 0D E3 11}"); // Channel Request, TxChannel = non operational channel
  networkWait(5000);

  send("gpd1", "plugin green-power-test-device set-phy-channel 11");
  // 5 - Negative test: reception of Commissioning GPDF with Auto-Commissioning sub-field 0b1:
  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F8 FF FF FF FF 4D E3 00}"); // Channel Request, TxChannel = non operational channel
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F9 FF FF FF FF 0D E3 00}"); // Channel Request, TxChannel = operational channel
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A1 FF FF FF FF 8C 40 78 56 34 12 E0 02 A1 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 10 00 00 00}");
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A2 FF FF FF FF CC 40 78 56 34 12 E0 02 A1 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 10 00 00 00}");
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A3 FF FF FF FF CC 00 78 56 34 12 E0 02 A1 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 10 00 00 00}");
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A4 FF FF FF FF CC 30 78 56 34 12 11 00 00 00 E2 AC F8 F6 93}");

   // Read Sink Table
  ReadSinkTable();
  ReadEmptySinkTable();
  networkWait(3000);

  //print ("]");
}
void Test_4_4_1_7_step_6()
{
  print ("\nStart of 4.4.1.7_Step6[");
  // Sink Set Up
  test44112Setup();
  WriteGPSharedSecurityKeyTypeTo(0);
  WriteGPSharedSecurityKeyTo("00000000000000000000000000000000");

  // 6 Incorrectly protected Success GPDF (if sink supports security)
  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 C4 FF FF FF FF 4D E3 00}"); // Channel Request, TxChannel = non operational channel
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 CB FF FF FF FF 0D E3 00}"); // Channel Request, TxChannel = operational channel
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 D2 FF FF FF FF 8C 40 78 56 34 12 E0 02 A1 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 10 00 00 00}");
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 D9 FF FF FF FF 8C 40 78 56 34 12 E0 02 A1 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 11 00 00 00}");
  networkWait(1000);

  // // 6A - Negative test: GPD Success incorrectly protected (SecurityLevel = 0b00):
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E0 FF FF FF FF 8C 00 78 56 34 12 E2}");
  networkWait(2000);
   // Read Sink Table
  ReadSinkTable();
  ReadEmptySinkTable();
  networkWait(2000);

  // 6B - Negative test: GPD Success incorrectly protected (frame counter too low):
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E3 FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 E2 1C F2 4F D9}");
  networkWait(2000);
   // Read Sink Table
  ReadSinkTable();
  ReadEmptySinkTable();
  networkWait(3000);

  // 6C - Negative test: GPD Success incorrectly protected (incorrect key type):
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E6 FF FF FF FF 8C 10 78 56 34 12 12 00 00 00 E2 A2 A9 B6 D1}");
  networkWait(2000);
   // Read Sink Table
  ReadSinkTable();
  ReadEmptySinkTable();
  networkWait(3000);

  // 6D - Negative test: GPD Success incorrectly protected (wrong MIC):
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 ED FF FF FF FF 8C 30 78 56 34 12 12 00 00 00 E2 BE BE BE BE}");
  networkWait(2000);
   // Read Sink Table
  ReadSinkTable();
  ReadEmptySinkTable();
  networkWait(3000);

  // 6E - Negative test: GPD Success incorrectly protected (wrong GPD ID):
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F3 FF FF FF FF 8C 30 44 33 22 11 12 00 00 00 E2 96 99 2E C8}");
  networkWait(2000);
   // Read Sink Table
  ReadSinkTable();
  ReadEmptySinkTable();
  networkWait(3000);

  // 6F - Negative test: Not accepting reset frame counter in Success GPDF:
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F9 FF FF FF FF 8C 30 78 56 34 12 00 00 00 00 E2 3A 20 A1 FF}");
  networkWait(2000);
   // Read Sink Table
  ReadSinkTable();
  ReadEmptySinkTable();
  networkWait(2000);

  ExitCommissioning();
  networkWait(2000);

  // 6G - Negative test: Unexpected GPD Success:
  WriteGPSharedSecurityKeyTypeTo(2);
  WriteGPSharedSecurityKeyTo("C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF");
  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 0B FF FF FF FF 8C 10 78 56 34 12 05 00 00 00 E2 FD F7 AC 9D}");
  networkWait(2000);
   // Read Sink Table
  ReadSinkTable();
  ReadEmptySinkTable();
  networkWait(2000);

  ExitCommissioning();
  networkWait(2000);

  // 6H - Negative test: GPD Success incorrectly protected, ApplicationID = 0b010 (wrong MIC):
  WriteGPSharedSecurityKeyTypeTo(0);
  networkWait(1000);
  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 1B FF FF FF FF 4D E3 00}"); // Channel Request, TxChannel = non operational channel
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 22 FF FF FF FF 0D E3 00}"); // Channel Request, TxChannel = operational channel
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 29 FF FF FF FF 88 77 66 55 44 33 22 11 8C 42 99 E0 02 A1 F2 25 1A F3 AA A3 CB D6 DD 7F E9 18 36 DD EB 90 BC 24 72 5E FA 20 00 00 00}");
  networkWait(1000);//                                                                     88 77 66 55 44 33 22 11 99 E0 02 A1 F2 25 1A F3 AA A3 CB D6 DD 7F E9 18 36 DD EB 90 BC 24 72 5E FA 21 00 00 00
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 29 FF FF FF FF 88 77 66 55 44 33 22 11 8C 42 99 E0 02 A1 F2 25 1A F3 AA A3 CB D6 DD 7F E9 18 36 DD EB 90 BC 24 72 5E FA 21 00 00 00}");
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 39 FF FF FF FF 88 77 66 55 44 33 22 11 8C 32 99 22 00 00 00 E2 BE BE BE BE}");
   // Read Sink Table
  ReadSinkTable();
  ReadEmptySinkTable();
  networkWait(2000);

  // 6I - Negative test: GPD Success incorrectly protected, ApplicationID = 0b010 (wrong GPD ID):
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 40 FF FF FF FF 00 00 00 00 44 33 22 11 8C 32 99 25 00 00 00 E2 E7 33 AE 85}");
  networkWait(2000);
   // Read Sink Table
  ReadSinkTable();
  ReadEmptySinkTable();
  networkWait(2000);

  // 6J - Negative test: GPD Success incorrectly protected, ApplicationID = 0b010 (wrong Endpoint):
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 47 FF FF FF FF 88 77 66 55 44 33 22 11 8C 32 55 25 00 00 00 E2 FD 4B 9B 06}");
  networkWait(2000);
   // Read Sink Table
  ReadSinkTable();
  ReadEmptySinkTable();
  networkWait(200000);

  //print ("]");
}

void Test_4_7_15_1B_2B()
{
  //print ("\nStart of 4.7.15_1B[");
  // Sink Set Up
  test44112Setup();
  WriteGPSharedSecurityKeyTypeTo(0);
  WriteGPSharedSecurityKeyTo("00000000000000000000000000000000");

  EnterCommissioning();
  networkWait(1000);
  // 1A : Direct commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 ED FF FF FF FF 8C 00 78 56 34 12 E0 FE A5 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 11 00 00 00 0C 01 A6 10 08 00}");
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E5 02 78 56 34 12 78 56 FE 11 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(3000);
  ExitCommissioning();
  networkWait(3000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 00 12 11 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");// Issue radius 0 --> 5
  networkWait(5000);

  GpTranslationRequestIndex(0);
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 01 00 01 78 56 34 12 A6 01 04 01 FF FF FF FF \\]");
  networkWait(5000);

  // 1B : Command Execution
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 FF FF FF FF FF 8C 30 78 56 34 12 1A 00 00 00 A6 01 08 00 00 03 30 FF FF 8E D0 6E 77}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 00 payload\\[30 FF FF \\]");
  networkWait(3000);

  decommissionGPD();
  networkWait(4000);

  // 2A : CT-based commissioning:
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 0C 01 A6 10 08 00");
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E5 02 78 56 34 12 78 56 FE 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 05 \\]");
  networkWait(500);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");// Issue radius 0 --> 5
  networkWait(5000);

  GpTranslationRequestIndex(0);
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 01 00 01 78 56 34 12 A6 01 04 01 FF FF FF FF \\]");
  networkWait(5000);
  // 2B : Command execution:
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 1C FF FF FF FF 8C 30 78 56 34 12 1A 00 00 00 A6 01 08 00 00 03 30 FF FF 8E D0 6E 77}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 00 payload\\[30 FF FF \\]");
  networkWait(3000);

  decommissionGPD();
  networkWait(5000);
}

void Test_4_4_6()
{
  //print ("\nStart of 4.4.6[");

  WriteGPSCommissioningModeTo(1);
  WriteCommissioningExitModeTo(2);
//  ReadGPSSecurityLevel();
//  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[05 00 00 18 01 \\]");
  WriteGPSSecurityLevelTo(0);
  ReadEmptySinkTable();

  // GP Sink Commissioning Mode Enter
  sendGpPairingConfigWithRawPayload("01 07 05 01 FF FF FF FF FF");
  networkWait(20000);

  // send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 C2 FF FF FF FF 0C 78 56 34 12 E0 02 C1 00}");
  networkWait(10000);

  ReadSinkTable();
  // It correctly pickes the MAC sequence number as GPD Security Frame Counter
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 0C 00 A8 00 78 56 34 12 02 00 .. 00 00 00 \\]");
  networkWait(10000);

  // GP Sink Commissioning Mode Enter
  sendGpPairingConfigWithRawPayload("01 31 05 09 FF FF FF FF FF");
  networkWait(20000);

  // send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 C3 FF FF FF FF 0C 78 56 34 12 E0 02 C1 00}");
  networkWait(10000);

  ReadSinkTable();
  // It correctly pickes the MAC sequence number as GPD Security Frame Counter
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 0C 00 A8 00 78 56 34 12 02 00 .. 00 00 00 \\]");
  networkWait(15000);

  greenPowerServerCleanUp();

  ReadEmptySinkTable();

  // GP Sink Commissioning Mode Enter
  sendGpPairingConfigWithRawPayload("01 0E 05 01 FF FF FF FF 01");
  networkWait(20000);

  // send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 C4 FF FF FF FF 0C 78 56 34 12 E0 02 C1 00}");
  networkWait(10000);

  ReadSinkTable();
  // It correctly pickes the MAC sequence number as GPD Security Frame Counter
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 0C 00 A8 00 78 56 34 12 02 00 .. 00 00 00 \\]");
  networkWait(15000);

  greenPowerServerCleanUp();

  ReadEmptySinkTable();

  // GP Sink Commissioning Mode Enter
  sendGpPairingConfigWithRawPayload("11 07 05 09 FF FF FF FF FF");
  networkWait(20000);

  EnterCommissioning();
  networkWait(20000);

  // GP Sink Commissioning Mode Enter
  sendGpPairingConfigWithRawPayload("01 22 05 08 FF FF FF FF FF");

  ExitCommissioning();

  // send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 C4 FF FF FF FF 0C 78 56 34 12 E0 02 C1 00}");
  networkWait(5000);

  ReadEmptySinkTable();

  // GP Sink Commissioning Mode Enter
  sendGpPairingConfigWithRawPayload("01 39 05 09 FF FF FF FF 27");
  networkWait(20000);

  // GP Sink Commissioning Mode Enter
  sendGpPairingConfigWithRawPayload("11 45 05 0F 11 11 22 22 FF");
  networkWait(20000);

  WriteGPSCommissioningModeTo(1);

  WriteCommissioningExitModeTo(2);

  ReadGPSSecurityLevel();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[05 00 00 18 00 \\]");

  WriteGPSSecurityLevelTo(0);

  ReadEmptySinkTable();
  networkWait(20000);
  // GP Sink Commissioning Mode Enter
  sendGpPairingConfigWithRawPayload("01 07 05 01 FF FF FF FF FF");
  networkWait(20000);

  // send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 C2 FF FF FF FF 0C 78 56 34 12 E0 02 C1 00}");
  networkWait(5000);

  ReadSinkTable();
  // It correctly pickes the MAC sequence number as GPD Security Frame Counter
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 0C 00 A8 00 78 56 34 12 02 00 .. 00 00 00 \\]");
  networkWait(15000);

  greenPowerServerCleanUp();

  ReadEmptySinkTable();

  // GP Sink Commissioning Mode Enter
  sendGpPairingConfigWithRawPayload("01 31 05 09 FF FF FF FF FF");
  networkWait(5000);

  EnterCommissioning();
  networkWait(5000);

  // send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 C3 FF FF FF FF 0C 78 56 34 12 E0 02 C1 00}");
  networkWait(10000);

  ReadSinkTable();
  // It correctly pickes the MAC sequence number as GPD Security Frame Counter
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 0C 00 A8 00 78 56 34 12 02 00 .. 00 00 00 \\]");
  networkWait(15000);

  greenPowerServerCleanUp();

  ReadEmptySinkTable();

  // GP Sink Commissioning Mode Enter
  sendGpPairingConfigWithRawPayload("01 0E 05 01 FF FF FF FF 01");
  networkWait(5000);

  // send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 C4 FF FF FF FF 0C 78 56 34 12 E0 02 C1 00}");
  networkWait(5000);

  ReadSinkTable();
  // It correctly pickes the MAC sequence number as GPD Security Frame Counter
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 0C 00 A8 00 78 56 34 12 02 00 .. 00 00 00 \\]");
  networkWait(15000);

  greenPowerServerCleanUp();

  ReadEmptySinkTable();

  // GP Sink Commissioning Mode Enter
  sendGpPairingConfigWithRawPayload("11 07 05 09 FF FF FF FF FF");
  networkWait(5000);

  EnterCommissioning();
  networkWait(1000);

  // GP Sink Commissioning Mode Exit
  sendGpPairingConfigWithRawPayload("01 22 05 08 FF FF FF FF FF");
  networkWait(5000);

  ExitCommissioning();
  networkWait(1000);

  // send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 C4 FF FF FF FF 0C 78 56 34 12 E0 02 C1 00}");
  networkWait(5000);

  ReadEmptySinkTable();

  // GP Sink Commissioning Mode Enter
  sendGpPairingConfigWithRawPayload("01 39 05 09 FF FF FF FF 27");
  networkWait(5000);

  // GP Sink Commissioning Mode Enter
  sendGpPairingConfigWithRawPayload("11 45 05 0F 11 11 22 22 FF");
  networkWait(5000);

  //print ("]");
}
void Test_4_4_7_1()
{
  //print ("\nStart of 4.4.7.1[");

  ReadEmptySinkTable();
  WriteGPSCommissioningModeTo(1);

  //ReadGPSSecurityLevel();
  //expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[05 00 00 18 01 \\]");

  WriteGPSSecurityLevelTo(14);

  ReadGPSSecurityLevel();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[05 00 00 18 0E \\]");

  // send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 EE FF FF FF FF 0C 78 56 34 12 E0 02 C1 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00}");
  networkWait(5000);

  //GP commissioning Notification Bcast
  sendGpNotificationWithRawPayload("11 18 04 00 08 78 56 34 12 0F 00 00 00 E0 1B 02 C1 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 12 34 FC");
  networkWait(5000);

  ReadEmptySinkTable();

  // GP Sink Commissioning Mode Enter
  sendGpPairingConfigWithRawPayload("01 07 05 09 FF FF FF FF FF");
  networkWait(5000);

  // send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F5 FF FF FF FF 0C 78 56 34 12 E0 02 C1 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00}");
  networkWait(5000);

  //GP commissioning Notification Bcast
  sendGpNotificationWithRawPayload("11 19 04 00 08 78 56 34 12 0F 00 00 00 E0 1B 02 C1 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 12 34 FC");
  networkWait(5000);

  ReadEmptySinkTable();

  //GP Pairing Configuration
  sendGpPairingConfigWithRawPayload("11 98 09 0A 08 02 78 56 34 12 02 05 12 10 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(3000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 08 02 78 56 34 12 02 05 12 .. 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  //Toggle
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 0A FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 22 70 BB 19 C7}");
  networkWait(4000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 08 02 78 56 34 12 02 05 12 .. 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  //GP Pairing Configuration
  sendGpPairingConfigWithRawPayload("11 08 09 0C 08 02 78 56 34 12 02 05 12 10 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(3000);

  ReadEmptySinkTable();

  WriteGPSSecurityLevelTo(0);

  //print ("]");
}
void Test_4_4_7_2()
{
  //print ("\nStart of 4.4.7.2[");

  ReadEmptySinkTable();
  WriteGPSCommissioningModeTo(1);
  WriteGPSSecurityLevelTo(15);
  // Step 1 DUT-GPS responds with Read Attribute Response with: ▪ Minimal GPD Security Level = 0b10 or 0b11; ▪ Protection with gpLinkKey = 0b1;▪ Involve TC = 0b1.
  ReadGPSSecurityLevel();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[05 00 00 18 0F \\]");

  // Step 2
  EnterCommissioning();
  networkWait(3000);

  // Step 2 send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 73 FF FF FF FF 0C 78 56 34 12 E0 02 C1 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00}");
  networkWait(5000);

  //Step 2 GP commissioning Notification Bcast
  sendGpNotificationWithRawPayload("11 18 04 00 08 78 56 34 12 0F 00 00 00 E0 1B 02 C1 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 12 34 FC");
  networkWait(5000);

  ExitCommissioning();
  networkWait(5000);

  //Step 2 Sink Table of DUT-GPS is empty
  ReadEmptySinkTable();
  networkWait(1000);

  // Step 3 GP Sink Commissioning Mode Enter
  sendGpPairingConfigWithRawPayload("01 07 05 09 FF FF FF FF FF");
  networkWait(3000);

  // Step 3 send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 8D FF FF FF FF 0C 78 56 34 12 E0 02 C1 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00}");

  //Step 3 GP commissioning Notification Bcast
  sendGpNotificationWithRawPayload("11 18 04 00 08 78 56 34 12 0F 00 00 00 E0 1B 02 C1 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 12 34 FC");
  networkWait(5000);

  ExitCommissioning();
  networkWait(5000);

  //Step 3 Sink Table of DUT-GPS is empty
  ReadEmptySinkTable();
  networkWait(1000);

  //Step 4 GP Pairing Configuration
  sendGpPairingConfigWithRawPayload("11 0E 09 09 08 02 78 56 34 12 02 05 12 10 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(5000);

 //Step 4
  try{
  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 08 02 78 56 34 12 02 05 12 10 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(1000);
  }catch (Exception ex){
  //print ("Test is FAILED : Sink Table should have entry for TH-GPD ");
  }

  //Step 4 TH-GPD sends correctly formatted and protected Data GPDF. Toggle
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A5 FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 22 70 BB 19 C7}");
  networkWait(4000);

 //Step 4
  try{
  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 08 02 78 56 34 12 02 05 12 11 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(1000);
  }catch (Exception ex){
  //print ("Test is FAILED : Sink Table should have entry for TH-GPD ");
  }

  //GP Pairing Configuration Remove GPD
  sendGpPairingConfigWithRawPayload("11 08 09 0C 08 02 78 56 34 12 02 05 12 10 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(3000);

  ReadEmptySinkTable();

  //print ("]");
}
void Test_4_4_7_3()
{
  //print ("\nStart of 4.4.7.3[");

  ReadEmptySinkTable();
  WriteGPSCommissioningModeTo(1);
  WriteCommissioningExitModeTo(2);

  //1A : TH reads out the gpsSecurityLevel attribute of DUT-GPS.
  //ReadGPSSecurityLevel();
  //expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[05 00 00 18 01 \\]");
  //1B : TH writes the value 0x06 or 0x07 to the gpsSecurityLevel attribute of DUT-GPS,
  // depending on whether the DUT-GPS had the value 0x0E or 0x0F in step 1A.
  WriteGPSSecurityLevelTo(6);

  ReadGPSSecurityLevel();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[05 00 00 18 06 \\]");
  // 2A
  EnterCommissioning();
  networkWait(6000);

  // send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 6F FF FF FF FF 0C 78 56 34 12 E0 02 C1 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00}");
  networkWait(6000);

  ExitCommissioning();
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 A8 02 78 56 34 12 02 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(4000);
  //send("sink","plugin green-power-server sink-table-print");
  ///networkWait(3000);

  //send("sink","plugin green-power-client print-proxy-table");
  //networkWait(1000);

  //Toggle
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A5 FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 22 70 BB 19 C7}");
  networkWait(4000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 A8 02 78 56 34 12 02 00 12 11 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(3000);
  //2B
  //GP Pairing Configuration - Remove GPD
  sendGpPairingConfigWithRawPayload("11 08 09 0C 08 02 78 56 34 12 02 05 12 11 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(3000);
  ReadEmptySinkTable();

  EnterCommissioning();
  networkWait(6000);

  //GP commissioning Notification Bcast
  sendGpNotificationWithRawPayload("11 18 04 00 08 78 56 34 12 0F 00 00 00 E0 1B 02 C1 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 12 34 FC");
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 A8 02 78 56 34 12 02 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(3000);

  ExitCommissioning();
  networkWait(6000);

  //Toggle
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 9B FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 22 70 BB 19 C7}");
  networkWait(4000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 A8 02 78 56 34 12 02 00 12 11 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(3000);

  //GP Pairing Configuration
  sendGpPairingConfigWithRawPayload("11 07 09 0C 08 02 78 56 34 12 02 05 12 11 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(3000);
  ReadEmptySinkTable();

  networkWait(3000);

  // 3A If DUT-GPS supports reception of GP Sink Commissioning Mode commands:
  // GP Sink Commissioning Mode Enter
  sendGpPairingConfigWithRawPayload("01 07 05 09 FF FF FF FF FF");
  networkWait(3000);

  // send Commisioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 AE FF FF FF FF 0C 78 56 34 12 E0 02 C1 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00}");
  networkWait(6000);

  ExitCommissioning();
  networkWait(4000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 A8 02 78 56 34 12 02 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(4000);
  //Toggle
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 B9 FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 22 70 BB 19 C7}");
  networkWait(4000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 A8 02 78 56 34 12 02 00 12 11 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(3000);

  //GP Pairing Configuration
  sendGpPairingConfigWithRawPayload("11 06 09 0C 08 02 78 56 34 12 02 05 12 10 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(3000);

  ReadEmptySinkTable();

  //3B : If DUT-GPS supports reception of GP Sink Commissioning Mode commands:
  // GP Sink Commissioning Mode Enter command UCAST TH
  sendGpPairingConfigWithRawPayload("01 97 05 09 FF FF FF FF FF");
  networkWait(3000);

  //TH GP commissioning Notification Bcast
  sendGpNotificationWithRawPayload("11 18 04 00 08 78 56 34 12 0F 00 00 00 E0 1B 02 C1 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 12 34 FC");
  networkWait(5000);

  ExitCommissioning();
  networkWait(4000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 A8 02 78 56 34 12 02 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(3000);

  //Toggle
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 D7 FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 22 70 BB 19 C7}");
  networkWait(4000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 A8 02 78 56 34 12 02 00 12 11 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(3000);

  //GP Pairing Configuration remove GPD without Gp Pairing
  sendGpPairingConfigWithRawPayload("11 08 09 04 08 02 78 56 34 12 02 05 12 10 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(3000);
  ReadEmptySinkTable();

  //4 GP Pairing Configuration with Action 1 anfd Gp Pairing send 1 - but TH sends action 2 TODO : clarification
  sendGpPairingConfigWithRawPayload("11 07 09 0A 08 02 78 56 34 12 02 05 12 10 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(3000);

  ExitCommissioning();
  networkWait(4000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 08 02 78 56 34 12 02 05 12 10 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(3000);

  //Toggle
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F5 FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 22 70 BB 19 C7}");
  networkWait(4000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 08 02 78 56 34 12 02 05 12 11 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(3000);

  //GP Pairing Configuration
  sendGpPairingConfigWithRawPayload("11 88 09 0C 08 02 78 56 34 12 02 05 12 10 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(3000);

  ReadEmptySinkTable();

  //print ("]");
}
void Test_4_4_5_2()
{
  //print ("\nStart of 4.4.5.2[");

  GpTranslationRequestIndex0Empty();

  //GP Pairing Configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 02 78 56 34 12 02 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(3000);

  // GP Translation table Update: Toggle
  sendGpPairingConfigWithRawPayload("11 02 07 20 00 78 56 34 12 FF 88 01 04 01 06 00 02 00");
  networkWait(3000);

  //GP Pairing Configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0A 2A 02 88 77 66 55 44 33 22 11 99 02 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(3000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 17 00 05 78 56 34 12 00 01 04 01 03 00 00 02 00 3C 78 56 34 12 20 01 04 01 06 00 00 00 78 56 34 12 20 02 04 01 06 00 00 00 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 \\]");

  // GP Translation table Update: Toggle
  sendGpPairingConfigWithRawPayload("11 02 07 22 00 88 77 66 55 44 33 22 11 99 FF CC 01 04 01 06 00 02 00");
  networkWait(3000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 18 00 05 78 56 34 12 00 01 04 01 03 00 00 02 00 3C 78 56 34 12 20 01 04 01 06 00 00 00 78 56 34 12 20 02 04 01 06 00 00 00 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 \\]");

  GpTranslationRequestIndex(3);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 18 03 05 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 78 56 34 12 22 01 04 01 06 00 02 00 78 56 34 12 22 02 04 01 06 00 02 00 78 56 34 12 13 01 04 01 05 00 05 03 FF FF 03 \\]");

  GpTranslationRequestIndex(6);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 18 06 04 78 56 34 12 22 02 04 01 06 00 02 00 78 56 34 12 13 01 04 01 05 00 05 03 FF FF 03 78 56 34 12 1B 01 04 01 05 00 04 03 FF FF 03 78 56 34 12 40 01 04 01 00 03 01 02 00 FF \\]");

  GpTranslationRequestIndex(24);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[8B 00 18 00 00 \\]");

  GpTranslationRequestIndex(7);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 18 07 04 78 56 34 12 13 01 04 01 05 00 05 03 FF FF 03 78 56 34 12 1B 01 04 01 05 00 04 03 FF FF 03 78 56 34 12 40 01 04 01 00 03 01 02 00 FF 78 56 34 12 30 01 04 01 08 00 01 01 00 \\]");

  GpTranslationRequestIndex(3);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 18 03 05 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 78 56 34 12 22 01 04 01 06 00 02 00 78 56 34 12 22 02 04 01 06 00 02 00 78 56 34 12 13 01 04 01 05 00 05 03 FF FF 03 \\]");

  // Send : Reserved
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 D2 FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 88 0B CB 53 FD}");
  networkWait(5000);

  // Send : Reserved
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 D3 FF FF FF FF 88 77 66 55 44 33 22 11 8C 32 99 10 00 00 00 CC 06 83 8B D7}");
  networkWait(5000);

  // GP Translation table Update: Toggle
  sendGpPairingConfigWithRawPayload("11 04 07 2A 00 88 77 66 55 44 33 22 11 99 FF 23 01 04 01 06 00 02 00");
  networkWait(3000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 19 00 05 78 56 34 12 00 01 04 01 03 00 00 02 00 3C 78 56 34 12 20 01 04 01 06 00 00 00 78 56 34 12 20 02 04 01 06 00 00 00 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 \\]");

  GpTranslationRequestIndex(3);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 19 03 05 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 78 56 34 12 22 01 04 01 06 00 02 00 78 56 34 12 22 02 04 01 06 00 02 00 78 56 34 12 13 01 04 01 05 00 05 03 FF FF 03 \\]");

  GpTranslationRequestIndex(6);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 19 06 04 78 56 34 12 22 02 04 01 06 00 02 00 78 56 34 12 13 01 04 01 05 00 05 03 FF FF 03 78 56 34 12 1B 01 04 01 05 00 04 03 FF FF 03 78 56 34 12 40 01 04 01 00 03 01 02 00 FF \\]");

  GpTranslationRequestIndex(25);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[8B 00 19 00 00 \\]");

  GpTranslationRequestIndex(3);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 19 03 05 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 78 56 34 12 22 01 04 01 06 00 02 00 78 56 34 12 22 02 04 01 06 00 02 00 78 56 34 12 13 01 04 01 05 00 05 03 FF FF 03 \\]");

  GpTranslationRequestIndex(8);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 19 08 04 78 56 34 12 1B 01 04 01 05 00 04 03 FF FF 03 78 56 34 12 40 01 04 01 00 03 01 02 00 FF 78 56 34 12 30 01 04 01 08 00 01 01 00 78 56 34 12 88 01 04 01 06 00 02 00 \\]");

  GpTranslationRequestIndex(3);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 19 03 05 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 78 56 34 12 22 01 04 01 06 00 02 00 78 56 34 12 22 02 04 01 06 00 02 00 78 56 34 12 13 01 04 01 05 00 05 03 FF FF 03 \\]");
  networkWait(6000);

  // Send : Reserved
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E5 FF FF FF FF 8C 30 78 56 34 12 13 00 00 00 88 DD 34 94 4A}");
  networkWait(6000);

  // Send : Release
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 EA FF FF FF FF 88 77 66 55 44 33 22 11 8C 32 99 14 00 00 00 23 B5 F4 B7 4D}");
  networkWait(6000);

  // Send : Reserved
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 EE FF FF FF FF 88 77 66 55 44 33 22 11 8C 32 99 15 00 00 00 CC 29 46 65 C1}");
  networkWait(6000);

  // GP Translation table Update: Reserved
  sendGpPairingConfigWithRawPayload("11 04 07 2A 00 88 77 66 55 44 33 22 11 99 FF 23 01 04 01 06 00 AA 00");
  networkWait(3000);

  GpTranslationRequestIndex(8);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 19 08 04 78 56 34 12 1B 01 04 01 05 00 04 03 FF FF 03 78 56 34 12 40 01 04 01 00 03 01 02 00 FF 78 56 34 12 30 01 04 01 08 00 01 01 00 78 56 34 12 88 01 04 01 06 00 02 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(7);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 19 07 04 78 56 34 12 13 01 04 01 05 00 05 03 FF FF 03 78 56 34 12 1B 01 04 01 05 00 04 03 FF FF 03 78 56 34 12 40 01 04 01 00 03 01 02 00 FF 78 56 34 12 30 01 04 01 08 00 01 01 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(3);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 19 03 05 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 78 56 34 12 22 01 04 01 06 00 02 00 78 56 34 12 22 02 04 01 06 00 02 00 78 56 34 12 13 01 04 01 05 00 05 03 FF FF 03 \\]");
  networkWait(3000);

  // Send : Reserved
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 FA FF FF FF FF 8C 30 78 56 34 12 16 00 00 00 88 90 E0 E0 35}");
  networkWait(6000);

  // Send : Reserved
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 FE FF FF FF FF 88 77 66 55 44 33 22 11 8C 32 99 17 00 00 00 CC 96 1D 46 E4}");
  networkWait(6000);

  // Send : Release
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 02 FF FF FF FF 88 77 66 55 44 33 22 11 8C 32 99 18 00 00 00 23 89 7E 65 F6}");
  networkWait(6000);

  // GP Translation table Update Command: Reserved: Toggle
  sendGpPairingConfigWithRawPayload("61 88 07 CD AB C5 2F 00 00 48 02 C5 2F 00 00 0A 38 28 60 00 00 00 56 4C 6A 15 A5 C2 50 00 00 00 F2 21 00 E0 A1 F2 F8 11 06 07 52 00 88 77 66 55 44 33 22 11 99 FF 23 01 04 01 06 00 AA 00 FF CC 01 04 01 06 00 02 00");
  networkWait(3000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 19 00 05 78 56 34 12 00 01 04 01 03 00 00 02 00 3C 78 56 34 12 20 01 04 01 06 00 00 00 78 56 34 12 20 02 04 01 06 00 00 00 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(5);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 19 05 04 78 56 34 12 22 01 04 01 06 00 02 00 78 56 34 12 22 02 04 01 06 00 02 00 78 56 34 12 13 01 04 01 05 00 05 03 FF FF 03 78 56 34 12 1B 01 04 01 05 00 04 03 FF FF 03 \\]");
  networkWait(3000);

  GpTranslationRequestIndex(9);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 19 09 03 78 56 34 12 40 01 04 01 00 03 01 02 00 FF 78 56 34 12 30 01 04 01 08 00 01 01 00 78 56 34 12 88 01 04 01 06 00 02 00 \\]");
  networkWait(3000);

  // Send : Reserved
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 10 FF FF FF FF 8C 30 78 56 34 12 1A 00 00 00 88 1C 90 22 C0}");
  networkWait(6000);

  // GP Translation table Update Command: Reserved: Toggle
  sendGpPairingConfigWithRawPayload("61 88 14 CD AB C5 2F 00 00 48 02 C5 2F 00 00 0A 41 28 6C 00 00 00 56 4C 6A 15 A5 C2 50 00 00 00 F2 21 00 E0 A1 F2 FC 11 06 07 30 00 78 56 34 12 FF 88 01 04 01 06 00 02 00");
  networkWait(3000);

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 19 00 05 78 56 34 12 00 01 04 01 03 00 00 02 00 3C 78 56 34 12 20 01 04 01 06 00 00 00 78 56 34 12 20 02 04 01 06 00 00 00 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 \\]");
  networkWait(3000);

  send("sink", "plugin green-power-server table-print");
  networkWait(3000);
  send("sink", "plugin green-power-server sink-table-print");
  networkWait(3000);

  //GP Pairing Configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0C 1A 00 88 77 66 55 44 33 22 11 99 02 05 FE");
  networkWait(6000);

  //GP Pairing Configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0C 18 00 78 56 34 12 02 05 FE");
  networkWait(6000);

  ReadEmptySinkTable();
  //print ("]");
}
void Test_4_5_2_2()
{
  //print ("\nStart of 4.5.2.2[");

  ReadEmptySinkTable();

  //GP Pairing Configuration
  sendGpPairingConfigWithRawPayload("11 00 09 02 28 02 78 56 34 12 02 05 12 00 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(20000);

  // It is not possible to check the payload of Device_annce
  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 02 05 12 00 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(6000);

  //GP Pairing Configuration
  sendGpPairingConfigWithRawPayload("11 00 09 04 28 02 78 56 34 12 02 05 0A 00 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(6000);

  ReadEmptySinkTable();

  //print ("]");
}
void Test_4_5_2_3()
{
  //print ("\nStart of 4.5.2.3[");

  ReadEmptySinkTable();
  //GP Pairing Configuration
  sendGpPairingConfigWithRawPayload("11 00 09 02 28 03 78 56 34 12 02 BE BE 05 12 00 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(20000);

  // It is not possible to check the payload of Device_annce
  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1F 00 28 03 78 56 34 12 02 BE BE 05 12 00 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(6000);

  //GP Pairing Configuration
  sendGpPairingConfigWithRawPayload("11 00 09 04 28 03 78 56 34 12 02 BE BE 05 12 00 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(6000);

  ReadEmptySinkTable();

  //print ("]");
}

void Test_4_4_3_2()
{
  //print ("\nStart of 4.4.3.2[");

  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();

  //GP Pairing Configuration
  sendGpPairingConfigWithRawPayload("11 00 09 09 28 06 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 20");
  networkWait(6000);

  //GP Pairing Configuration
  sendGpPairingConfigWithRawPayload("11 00 09 05 00 04 78 56 34 12 FE 05 FE 20 01 01 00 00 08 08 06 04 00 00 18 10 00");
  networkWait(6000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 01 00 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 \\]");

  //Compact attribute reporting
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 55 FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 A8 00 01 02 03 04 91 71 E3 81}");
  networkWait(1000);

  decommissionGPD();

  //Compact attribute reporting
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 5F FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 A8 00 01 02 03 04 46 3A 01 63}");
  networkWait(1000);

  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();

  //GP Pairing Configuration
  sendGpPairingConfigWithRawPayload("11 00 09 09 2A 06 88 77 66 55 44 33 22 11 99 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 20");
  networkWait(4000);

  ReadEmptySinkTable();

  //GP Pairing Configuration
  sendGpPairingConfigWithRawPayload("11 00 09 05 02 04 88 77 66 55 44 33 22 11 99 FE 05 FE 20 01 01 00 00 08 08 06 04 00 00 18 10 00");
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 22 00 2A 02 88 77 66 55 44 33 22 11 99 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 0A 01 00 01 88 77 66 55 44 33 22 11 99 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 \\]");

  //Compact attribute reporting
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 76 FF FF FF FF 88 77 66 55 44 33 22 11 8C 32 99 10 00 00 00 A8 00 01 02 03 04 5D 3B 2E FF}");
  networkWait(1000);

  //GP Pairing Configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0C 1A 00 88 77 66 55 44 33 22 11 99 FE 05 FE");
  networkWait(10000);

  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();

  //print ("]");
}

void Test_4_7_6()
{
  //print ("\nStart of 4.7.6 //[");
  // First Commissioning
  test44112Setup();
  EnterCommissioning();
  networkWait(5000);

  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 2F FF FF FF FF 0C 78 56 34 12 E0 03 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 04 03 31 30 34}");

  // Expect GP Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E5 02 78 56 34 12 78 56 03 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 03 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");// Issue radius 0 --> 5
  networkWait(5000);

  // Exit commissioning mode
  ExitCommissioning();
  networkWait(5000);

  send("sink", "plugin green-power-server table-print");
  networkWait(5000);

  GpTranslationRequestIndex(0);
  networkWait(5000);

  //move down
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 41 FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 31 85 4E E1 15}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 01 payload\\[01 \\]",1000);
  networkWait(5000);

  //level control/stop
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 43 FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 34 D3 73 9C 0E}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 03 payload\\[\\]",1000);
  networkWait(5000);

  //move up
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 44 FF FF FF FF 8C 30 78 56 34 12 12 00 00 00 30 C8 5E 85 41}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 01 payload\\[00 \\]",1000);
  networkWait(5000);

  //level control/stop
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 45 FF FF FF FF 8C 30 78 56 34 12 13 00 00 00 34 24 5A D5 01}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 03 payload\\[\\]",1000);
  networkWait(5000);

  //move down
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 46 FF FF FF FF 8C 30 78 56 34 12 14 00 00 00 31 FF EF 7F DB 81}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 01 payload\\[01 FF \\]",1000);
  networkWait(5000);

  //level control/stop
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 48 FF FF FF FF 8C 30 78 56 34 12 15 00 00 00 34 A2 33 7B B9}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 03 payload\\[\\]",1000);
  networkWait(5000);


  //move up
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 4C FF FF FF FF 8C 30 78 56 34 12 16 00 00 00 30 FF 66 4C 90 5E}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 01 payload\\[00 FF \\]",1000);
  networkWait(5000);


  //level control/stop
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 50 FF FF FF FF 8C 30 78 56 34 12 17 00 00 00 34 9C 6D BC BC}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 03 payload\\[\\]",1000);
  networkWait(5000);

  //move down
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 55 FF FF FF FF 8C 30 78 56 34 12 18 00 00 00 31 14 E2 74 17 55}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 01 payload\\[01 14 \\]",1000);
  networkWait(5000);


  //level control/stop
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 59 FF FF FF FF 8C 30 78 56 34 12 19 00 00 00 34 4D 50 44 60}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 03 payload\\[\\]",1000);
  networkWait(5000);

  //move up
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 5D FF FF FF FF 8C 30 78 56 34 12 1A 00 00 00 30 14 8D 3F DC 4E}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 01 payload\\[00 14 \\]",1000);
  networkWait(5000);

  //level control/stop
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 61 FF FF FF FF 8C 30 78 56 34 12 1B 00 00 00 34 4E E3 A4 94}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 03 payload\\[\\]",1000);
  networkWait(5000);

  //cleanup
  sendGpPairingConfigWithRawPayload("11 00 09 0C 18 00 78 56 34 12 03 05");
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[30 00 00 78 56 34 12 \\]");
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(5000);

  // Second Commissioning
  test44112Setup();
  EnterCommissioning();
  networkWait(5000);

  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 71 FF FF FF FF 0C 78 56 34 12 E0 03 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 04 02 32 33}");

  // Expect GP Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E5 02 78 56 34 12 78 56 03 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 03 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");// Issue radius 0 --> 5
  networkWait(5000);

  // Exit commissioning mode
  ExitCommissioning();
  networkWait(5000);

  send("sink", "plugin green-power-server table-print");
  networkWait(5000);

  GpTranslationRequestIndex(0);
  networkWait(5000);

  //step down
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 84 FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 33 15 7A 02 E1 3D}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 02 payload\\[01 15 \\]",1000);
  networkWait(5000);

  //step up
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 85 FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 32 15 E5 AA 20 5A}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 02 payload\\[00 15 \\]",1000);
  networkWait(5000);

  //step down
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 86 FF FF FF FF 8C 30 78 56 34 12 12 00 00 00 33 15 FF FF 73 CC B8 77}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 02 payload\\[01 15 FF FF \\]",1000);
  networkWait(5000);

  //step up
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 88 FF FF FF FF 8C 30 78 56 34 12 13 00 00 00 32 15 FF FF 2E 27 5C A2}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 02 payload\\[00 15 FF FF \\]",1000);
  networkWait(5000);

  //step down
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 89 FF FF FF FF 8C 30 78 56 34 12 14 00 00 00 33 15 0A 00 19 8E E6 F7}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 02 payload\\[01 15 0A 00 \\]",1000);
  networkWait(5000);

  //step up
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 8D FF FF FF FF 8C 30 78 56 34 12 15 00 00 00 32 15 0A 00 4F 25 D7 27}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 02 payload\\[00 15 0A 00 \\]",1000);
  networkWait(5000);

  //cleanup
  sendGpPairingConfigWithRawPayload("11 00 09 0C 18 00 78 56 34 12 03 05");
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[30 00 00 78 56 34 12 \\]");
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(5000);

  //Third Commissioning
  test44112Setup();
  EnterCommissioning();
  networkWait(5000);

  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 9D FF FF FF FF 0C 78 56 34 12 E0 03 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 04 03 35 36 34}");

  // Expect GP Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E5 02 78 56 34 12 78 56 03 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 03 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");// Issue radius 0 --> 5
  networkWait(5000);

  // Exit commissioning mode
  ExitCommissioning();
  networkWait(5000);

  send("sink", "plugin green-power-server table-print");
  networkWait(5000);

  GpTranslationRequestIndex(0);
  networkWait(5000);

  //move down (with on/off)
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 AF FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 36 E9 83 55 08}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 05 payload\\[01 \\]",1000);
  networkWait(5000);

  //level control/stop
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 B1 FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 34 D3 73 9C 0E}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 03 payload\\[\\]",1000);
  networkWait(5000);

  //move up (with on/off)
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 B2 FF FF FF FF 8C 30 78 56 34 12 12 00 00 00 35 9F 96 D4 08}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 05 payload\\[00 \\]",1000);
  networkWait(5000);

  //level control/stop
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 B3 FF FF FF FF 8C 30 78 56 34 12 13 00 00 00 34 24 5A D5 01}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 03 payload\\[\\]",1000);
  networkWait(5000);

  //move down (with on/off)
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 B7 FF FF FF FF 8C 30 78 56 34 12 14 00 00 00 36 FF 4F 1F D6 34}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 05 payload\\[01 FF \\]",1000);
  networkWait(5000);

  //level control/stop
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 BC FF FF FF FF 8C 30 78 56 34 12 15 00 00 00 34 A2 33 7B B9}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 03 payload\\[\\]",1000);
  networkWait(5000);

  //move up (with on/off)
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 C0 FF FF FF FF 8C 30 78 56 34 12 16 00 00 00 35 FF A0 8C 58 10}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 05 payload\\[00 FF \\]",1000);
  networkWait(5000);

  //level control/stop
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 C4 FF FF FF FF 8C 30 78 56 34 12 17 00 00 00 34 9C 6D BC BC}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 03 payload\\[\\]",1000);
  networkWait(5000);

  //move down (with on/off)
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 C8 FF FF FF FF 8C 30 78 56 34 12 18 00 00 00 36 14 92 95 B9 0F}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 05 payload\\[01 14 \\]",1000);
  networkWait(5000);

  //level control/stop
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 CC FF FF FF FF 8C 30 78 56 34 12 19 00 00 00 34 4D 50 44 60}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 03 payload\\[\\]",1000);
  networkWait(5000);

  //move up (with on/off)
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 D1 FF FF FF FF 8C 30 78 56 34 12 1A 00 00 00 35 14 DF BB 8C 9E}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 05 payload\\[00 14 \\]",1000);
  networkWait(5000);

  //level control/stop
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 D5 FF FF FF FF 8C 30 78 56 34 12 1B 00 00 00 34 4E E3 A4 94}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 03 payload\\[\\]",1000);
  networkWait(5000);

//cleanup
  sendGpPairingConfigWithRawPayload("11 00 09 0C 18 00 78 56 34 12 03 05");
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[30 00 00 78 56 34 12 \\]");
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(5000);

  //Fourth Commissioning
  test44112Setup();
  EnterCommissioning();
  networkWait(5000);

  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E2 FF FF FF FF 0C 78 56 34 12 E0 03 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 04 02 37 38}");

  // Expect GP Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E5 02 78 56 34 12 78 56 03 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 03 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");// Issue radius 0 --> 5
  networkWait(5000);

  // Exit commissioning mode
  ExitCommissioning();
  networkWait(5000);

  send("sink", "plugin green-power-server table-print");
  networkWait(5000);

  GpTranslationRequestIndex(0);
  networkWait(5000);

  //step down (with on/off)
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F5 FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 38 15 84 82 DC B7}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 06 payload\\[01 15 \\]",1000);
  networkWait(5000);

  //step up (with on/off)
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F6 FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 37 15 C7 A5 48 CD}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 06 payload\\[00 15 \\]",1000);
  networkWait(5000);

  //step down (with on/off)
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F7 FF FF FF FF 8C 30 78 56 34 12 12 00 00 00 38 15 FF FF C9 D5 94 80}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 06 payload\\[01 15 FF FF \\]",1000);
  networkWait(5000);

  //step up (with on/off)
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 FC FF FF FF FF 8C 30 78 56 34 12 13 00 00 00 37 15 FF FF 77 CD A2 D6}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 06 payload\\[00 15 FF FF \\]",1000);
  networkWait(5000);

  //step down (with on/off)
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 00 FF FF FF FF 8C 30 78 56 34 12 14 00 00 00 38 15 0A 00 C1 8A 34 D8}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 06 payload\\[01 15 0A 00 \\]",1000);
  networkWait(5000);

//cleanup
  sendGpPairingConfigWithRawPayload("11 00 09 0C 18 00 78 56 34 12 03 05");
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[30 00 00 78 56 34 12 \\]");
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(5000);

  //Fifth Commissioning
  test44112Setup();
  EnterCommissioning();
  networkWait(5000);

  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 14 FF FF FF FF 0C 78 56 34 12 E0 FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 04 03 31 30 34}");

  // Expect GP Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E5 02 78 56 34 12 78 56 FE 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");// Issue radius 0 --> 5
  networkWait(5000);

  // Exit commissioning mode
  ExitCommissioning();
  networkWait(5000);

  send("sink", "plugin green-power-server table-print");
  networkWait(5000);

  GpTranslationRequestIndex(0);
  networkWait(5000);

  //move down
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 26 FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 31 85 4E E1 15}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 01 payload\\[01 \\]",1000);
  networkWait(5000);

  //cleanup
  sendGpPairingConfigWithRawPayload("11 00 09 0C 18 00 78 56 34 12 03 05");
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[30 00 00 78 56 34 12 \\]");
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(5000);

  //GP Pairing configuration -Replace sink entry GPD//
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 02 78 56 34 12 03 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE ");
  networkWait(100);
  send("sink", "plugin green-power-server table-print");
  networkWait(5000);

  //move up
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 39 FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 30 E6 1B 7C 13}");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 01 payload\\[00 \\]",1000);
  networkWait(5000);

  //cleanup
  sendGpPairingConfigWithRawPayload("11 00 09 0C 18 00 78 56 34 12 03 05");
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[30 00 00 78 56 34 12 \\]");
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(5000);

  //GP Pairing configuration -Replace sink entry GPD//
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 02 78 56 34 12 03 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE ");
  networkWait(100);
  send("sink", "plugin green-power-server table-print");
  networkWait(5000);

  //move up
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 39 FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 30 E6 1B 7C 13 }");
  expect("sink",".*clus 0x0008 \\(Level Control\\) FC 01 seq .. cmd 01 payload\\[00 \\]",1000);
  networkWait(5000);

  //cleanup
  sendGpPairingConfigWithRawPayload("11 00 09 0C 18 00 78 56 34 12 03 05");
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[30 00 00 78 56 34 12 \\]");
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(5000);

  //print ("]");
}

void Test_4_4_3()
{
  WriteGPSCommissioningModeNoResponse(1);
  WriteCommissioningExitModeNoResponse(4);
  WriteGPSSecurityLevelToNoResponse(4); // security level to 0
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  WriteGPSharedSecurityKeyTypeTo(2);
  WriteGPSharedSecurityKeyTo("C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF");

  //11A Negative test: SrcID = 0x00000000:
  sendGpPairingConfigWithRawPayload("11 00 09 09 28 02 00 00 00 00 02 05 0A 00 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(3000);

  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();

  //11B Negative test: GPD IEEE address = 0x0000000000000000:
  sendGpPairingConfigWithRawPayload("11 00 09 09 2A 02 00 00 00 00 00 00 00 00 00 02 05 0A 00 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(3000);

  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();

  //11C Negative test: gpdSecurityLevel = 0b01
  sendGpPairingConfigWithRawPayload("11 00 09 09 2A 02 88 77 66 55 44 33 22 11 99 02 05 09 07 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(3000);

  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();

  //12C Positive test: GPD IEEE address = X, Endpoint = 0xff:
  sendGpPairingConfigWithRawPayload("11 00 09 09 0A 00 88 77 66 55 44 33 22 11 FF 02 05 FE");
  networkWait(3000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 0D 00 0A 00 88 77 66 55 44 33 22 11 FF 02 05 \\]");

  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 0B 00 03 88 77 66 55 44 33 22 11 FF 00 01 04 01 03 00 00 02 00 3C 88 77 66 55 44 33 22 11 FF 20 01 04 01 06 00 00 00 88 77 66 55 44 33 22 11 FF 20 02 04 01 06 00 00 00 \\]");
  networkWait(3000);
  // test the gpd is executed for EP 1
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 5A FF FF FF FF 88 77 66 55 44 33 22 11 8C 02 01 22}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]");
  networkWait(3000);
}

void Test_4_4_3_Step10_DGroup()
{
  WriteGPSCommissioningModeNoResponse(1);
  WriteCommissioningExitModeNoResponse(4);
  WriteGPSSecurityLevelToNoResponse(4); // security level to 0
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  WriteGPSharedSecurityKeyTypeTo(2);
  WriteGPSharedSecurityKeyTo("C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF");

  //10A Create Entry
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 02 78 56 34 12 02 05 0A 00 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  // Gp Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 D5 02 78 56 34 12 78 56 02 00 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 05 \\]");
  networkWait(3000);
  // Read Sink Table and test the contetnt
  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 02 05 0A 00 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  // Read Translation table and test content
  GpTranslationRequestIndex(0);
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 0B 00 05 78 56 34 12 00 01 04 01 03 00 00 02 00 3C 78 56 34 12 20 01 04 01 06 00 00 00 78 56 34 12 20 02 04 01 06 00 00 00 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 \\]");
  // Send Gp Notification
  sendGpNotificationWithRawPayload("11 07 00 90 52 78 56 34 12 01 00 00 00 22 FF 00 00 C5");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]");
  networkWait(3000);
  //10B REMOVE ENTRY:
  sendGpPairingConfigWithRawPayload("11 00 09 0B 28 02 78 56 34 12 02 05 0A 01 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  // Gp Pairing       clus 0x0021 \\(Green Power\\) FC 19 seq 04 cmd 01 payload\\[20 00 00 78 56 34 12 78 56 ]
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[20 00 00 78 56 34 12 78 56 \\]");
  networkWait(3000);

  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();

  //10C EXTEND ENTRY
  sendGpPairingConfigWithRawPayload("11 00 09 01 2A 02 88 77 66 55 44 33 22 11 99 02 05 0A 00 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  // Gp Pairing
  nexpect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[2A D5 02 88 77 66 55 44 33 22 11 99 88 77 02 00 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 05 \\]");
  networkWait(3000);
  // Read Sink Table and test the contetnt
  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 22 00 2A 02 88 77 66 55 44 33 22 11 99 02 05 0A 00 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  // Read Translation table and test content
  GpTranslationRequestIndex(0);
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 0B 00 03 88 77 66 55 44 33 22 11 99 00 01 04 01 03 00 00 02 00 3C 88 77 66 55 44 33 22 11 99 20 01 04 01 06 00 00 00 88 77 66 55 44 33 22 11 99 20 02 04 01 06 00 00 00 \\]");
  // Send Gp Notification
  sendGpNotificationWithRawPayload("11 08 00 92 52 88 77 66 55 44 33 22 11 99 01 00 00 00 22 FF 00 00 C5");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]");
  // Read Sink Table and test the contetnt
  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 22 00 2A 02 88 77 66 55 44 33 22 11 99 02 05 0A 01 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  //10D TRIGGER GP PAIRING:
  sendGpPairingConfigWithRawPayload("11 00 09 08 2A 02 88 77 66 55 44 33 22 11 99 02 05 0A 02 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  // Gp Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[2A D5 02 88 77 66 55 44 33 22 11 99 88 77 02 01 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 05 \\]");
  networkWait(3000);
  // Read Sink Table and test the contetnt
  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 22 00 2A 02 88 77 66 55 44 33 22 11 99 02 05 0A 01 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  // Read Translation table and test content
  GpTranslationRequestIndex(0);
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 0B 00 03 88 77 66 55 44 33 22 11 99 00 01 04 01 03 00 00 02 00 3C 88 77 66 55 44 33 22 11 99 20 01 04 01 06 00 00 00 88 77 66 55 44 33 22 11 99 20 02 04 01 06 00 00 00 \\]");

  //10E REMOVE ENTRY:
  sendGpPairingConfigWithRawPayload("11 00 09 0C 2A 02 88 77 66 55 44 33 22 11 99 02 05 0A 01 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  // Gp Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[32 00 00 88 77 66 55 44 33 22 11 99 \\]");
  networkWait(3000);
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  sendGpPairingConfigWithRawPayload("11 00 09 0C 28 02 78 56 34 12 02 05 0A 01 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(3000);
}

void Test_4_4_3_Step10_LUcast()
{
  WriteGPSCommissioningModeNoResponse(3);
  WriteCommissioningExitModeNoResponse(4);
  WriteGPSSecurityLevelToNoResponse(4); // security level to 0
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  WriteGPSharedSecurityKeyTypeTo(2);
  WriteGPSharedSecurityKeyTo("C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF");

  //10A Create Entry
  sendGpPairingConfigWithRawPayload("11 00 09 0A 38 02 78 56 34 12 02 05 0A 00 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  // Gp Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[68 D5 00 78 56 34 12 00 00 00 00 00 00 00 .. 00 00 02 00 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(3000);
  // Read Sink Table and test the contetnt
  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 38 02 78 56 34 12 02 05 0A 00 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  // Read Translation table and test content
  GpTranslationRequestIndex(0);
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 0B 00 05 78 56 34 12 00 01 04 01 03 00 00 02 00 3C 78 56 34 12 20 01 04 01 06 00 00 00 78 56 34 12 20 02 04 01 06 00 00 00 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 \\]");
  // Send Gp Notification
  sendGpNotificationWithRawPayload("11 07 00 90 52 78 56 34 12 01 00 00 00 22 FF 00 00 C5");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]");
  networkWait(3000);
  // Read Sink Table and test the contetnt
  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 38 02 78 56 34 12 02 05 0A 01 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  //10B REMOVE ENTRY:
  sendGpPairingConfigWithRawPayload("11 00 09 0B 38 02 78 56 34 12 02 05 0A 01 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  // Gp Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[60 00 00 78 56 34 12 00 00 00 00 00 00 00 .. 00 00 \\]");
  networkWait(3000);

  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();

  //10C EXTEND ENTRY
  sendGpPairingConfigWithRawPayload("11 00 09 01 3A 02 88 77 66 55 44 33 22 11 99 02 05 0A 00 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF");
  // Gp Pairing
  nexpect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[2A D5 02 88 77 66 55 44 33 22 11 99 88 77 02 00 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 05 \\]");
  networkWait(3000);
  // Read Sink Table and test the contetnt
  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 22 00 3A 02 88 77 66 55 44 33 22 11 99 02 05 0A 00 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  // Read Translation table and test content
  GpTranslationRequestIndex(0);
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 0B 00 03 88 77 66 55 44 33 22 11 99 00 01 04 01 03 00 00 02 00 3C 88 77 66 55 44 33 22 11 99 20 01 04 01 06 00 00 00 88 77 66 55 44 33 22 11 99 20 02 04 01 06 00 00 00 \\]");
  // Send Gp Notification
  sendGpNotificationWithRawPayload("11 08 00 92 52 88 77 66 55 44 33 22 11 99 01 00 00 00 22 FF 00 00 C5");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]");
  // Read Sink Table and test the contetnt
  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 22 00 3A 02 88 77 66 55 44 33 22 11 99 02 05 0A 01 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  //10D TRIGGER GP PAIRING:
  sendGpPairingConfigWithRawPayload("11 00 09 08 3A 02 88 77 66 55 44 33 22 11 99 02 05 0A 02 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  // Gp Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[6A D5 00 88 77 66 55 44 33 22 11 99 00 00 00 00 00 00 00 .. 00 00 02 01 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(3000);
  // Read Sink Table and test the contetnt
  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 22 00 3A 02 88 77 66 55 44 33 22 11 99 02 05 0A 01 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  // Read Translation table and test content
  GpTranslationRequestIndex(0);
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 02 0B 00 03 88 77 66 55 44 33 22 11 99 00 01 04 01 03 00 00 02 00 3C 88 77 66 55 44 33 22 11 99 20 01 04 01 06 00 00 00 88 77 66 55 44 33 22 11 99 20 02 04 01 06 00 00 00 \\]");

  //10E REMOVE ENTRY:
  sendGpPairingConfigWithRawPayload("11 00 09 0C 3A 02 88 77 66 55 44 33 22 11 99 02 05 0A 01 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  // Gp Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[72 00 00 88 77 66 55 44 33 22 11 99 \\]");
  networkWait(3000);
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  sendGpPairingConfigWithRawPayload("11 00 09 0C 28 02 78 56 34 12 02 05 0A 01 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(3000);
  WriteGPSCommissioningModeNoResponse(1);
  networkWait(3000);
}

void Test_4_7_7_1()
{
  //print ("\nStart of 4.7.7.1 //[");

  //First Commissioning
  test44112Setup();
  EnterCommissioning();
  networkWait(5000);

  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 D9 FF FF FF FF 0C 78 56 34 12 E0 01 81 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00}");

  // Expect GP Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E5 02 78 56 34 12 78 56 01 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 01 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");// Issue radius 0 --> 5
  networkWait(5000);

  // Exit commissioning mode
  ExitCommissioning();
  networkWait(5000);

  send("sink", "plugin green-power-server table-print");
  networkWait(5000);

  GpTranslationRequestIndex(0);
  networkWait(5000);

  //press 1 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 EC FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 62 D9 A3 76 12}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 01 payload\\[\\]",1000);
  networkWait(5000);

  //release 1 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 EE FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 63 4F 0C 55 51}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 00 payload\\[\\]",1000);
  networkWait(5000);

  //press 2 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 EF FF FF FF FF 8C 30 78 56 34 12 12 00 00 00 64 8A 50 31 29}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 01 payload\\[\\]",1000);
  networkWait(5000);

  //release 2 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F0 FF FF FF FF 8C 30 78 56 34 12 13 00 00 00 65 1D 9A 92 7C}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 00 payload\\[\\]",1000);
  networkWait(5000);

//Sink Table Request.
  send("THProxy", "raw 0x0021 {10 05 00 01 00}");
  send("THProxy", "send " + sinkId + " 242 242");
  //expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 0A payload\\[8B 03 FF 00 \\]");

  //cleanup
  sendGpPairingConfigWithRawPayload("11 00 09 0C 18 00 78 56 34 12 01 05");
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[30 00 00 78 56 34 12 \\]");
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(5000);

  //Second Commissioning
  test44112Setup();
  EnterCommissioning();
  networkWait(5000);

  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 FD FF FF FF FF 0C 78 56 34 12 E0 FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 04 04 62 63 64 65 CD}");

  // Expect GP Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E5 02 78 56 34 12 78 56 FE 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");// Issue radius 0 --> 5
  networkWait(5000);

  // Exit commissioning mode
  ExitCommissioning();
  networkWait(5000);

  send("sink", "plugin green-power-server table-print");
  networkWait(5000);

  GpTranslationRequestIndex(0);
  networkWait(5000);

  //press 1 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 0F FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 62 D9 A3 76 12}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 01 payload\\[\\]",1000);
  networkWait(5000);

  //release 1 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 11 FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 63 4F 0C 55 51}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 00 payload\\[\\]",1000);
  networkWait(5000);

  //press 2 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 12 FF FF FF FF 8C 30 78 56 34 12 12 00 00 00 64 8A 50 31 29}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 01 payload\\[\\]",1000);
  networkWait(5000);

  //release 2 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 13 FF FF FF FF 8C 30 78 56 34 12 13 00 00 00 65 1D 9A 92 7C}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 00 payload\\[\\]",1000);
  networkWait(5000);

  //cleanup
  sendGpPairingConfigWithRawPayload("11 00 09 0C 18 00 78 56 34 12 01 05");
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[30 00 00 78 56 34 12 \\]");
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(5000);

  //GP Pairing configuration -Replace sink entry GPD//
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 02 78 56 34 12 01 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 01 01");
  networkWait(100);
  send("sink", "plugin green-power-server table-print");
  networkWait(1000);

  //press 1 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 29 FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 62 D9 A3 76 12}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 01 payload\\[\\]",1000);
  networkWait(5000);

  //release 1 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 2B FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 63 4F 0C 55 51}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 00 payload\\[\\]",1000);

  //press 2 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 2C FF FF FF FF 8C 30 78 56 34 12 12 00 00 00 64 8A 50 31 29}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 01 payload\\[\\]",1000);
  networkWait(15000);

  //release 2 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 2E FF FF FF FF 8C 30 78 56 34 12 13 00 00 00 65 1D 9A 92 7C}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 00 payload\\[\\]",1000);
  networkWait(5000);

  //cleanup
  sendGpPairingConfigWithRawPayload("11 00 09 0C 18 00 78 56 34 12 01 05");
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[30 00 00 78 56 34 12 \\]");
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(5000);

  //GP Pairing configuration -Replace sink entry GPD//
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 01 01 04 04 62 63 64 65");
  networkWait(100);
  send("sink", "plugin green-power-server table-print");
  networkWait(5000);

  //press 1 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 43 FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 62 D9 A3 76 12}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 01 payload\\[\\]",1000);
  networkWait(5000);

  //release 1 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 45 FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 63 4F 0C 55 51}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 00 payload\\[\\]",1000);
  networkWait(5000);

  //press 2 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 46 FF FF FF FF 8C 30 78 56 34 12 12 00 00 00 64 8A 50 31 29}");
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 01 payload\\[\\]",1000);
  networkWait(5000);

  //release 2 of 2
  //send("gpd1", "plugin green-power-test-device send-test 255 {01 08 47 FF FF FF FF 8C 30 78 56 34 12 13 00 00 00 65 1D 9A 92 7C}");
  //expect("sink",".*clus 0x0005 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  //networkWait(5000);

  //cleanup
  sendGpPairingConfigWithRawPayload("11 00 09 0C 18 00 78 56 34 12 01 05 FE");
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[30 00 00 78 56 34 12 \\]");
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(5000);

  //print ("]");
}

void Test_4_7_7_2()
{
  //print ("\nStart of 4.7.7.2 //[");

  //First Commissioning
  test44112Setup();
  EnterCommissioning();
  networkWait(5000);

  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E8 FF FF FF FF 0C 78 56 34 12 E0 06 81 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 4B 06 62 63 64 65 67}");

  // Expect GP Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E5 02 78 56 34 12 78 56 06 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(5000);

  ReadSinkTable();
  //expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");// Issue radius 0 --> 5
  networkWait(5000);

  // Exit commissioning mode
  ExitCommissioning();
  networkWait(5000);

  send("sink", "plugin green-power-server table-print");
  networkWait(5000);

  GpTranslationRequestIndex(0);
  networkWait(5000);

  //press 1 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 FA FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 62 D9 A3 76 12}");
  //expect("sink",".*clus 0x0005 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);

  //release 1 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 FC FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 63 4F 0C 55 51}");
  //expect("sink",".*clus 0x0005 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);

  //press 2 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 FD FF FF FF FF 8C 30 78 56 34 12 12 00 00 00 64 8A 50 31 29}");
  //expect("sink",".*clus 0x0005 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);

  //release 2 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 FE FF FF FF FF 8C 30 78 56 34 12 13 00 00 00 65 1D 9A 92 7C}");
  //expect("sink",".*clus 0x0005 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);

  //short press 1 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 FF FF FF FF FF 8C 30 78 56 34 12 14 00 00 00 67 51 1F F0 8B}");
  //expect("sink",".*clus 0x0005 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);

  //short press 2 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 04 FF FF FF FF 8C 30 78 56 34 12 15 00 00 00 68 C3 CD DF 43}");
  //expect("sink",".*clus 0x0005 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);

  //cleanup
  sendGpPairingConfigWithRawPayload("11 00 09 0C 18 00 78 56 34 12 06 05 FE");
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[30 00 00 78 56 34 12 \\]");
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(5000);

  //Second Commissioning
  test44112Setup();
  EnterCommissioning();
  networkWait(5000);

  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 13 FF FF FF FF 0C 78 56 34 12 E0 FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 04 06 62 63 64 65 67 68 C0}");

  // Expect GP Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E5 02 78 56 34 12 78 56 FE 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");// Issue radius 0 --> 5
  networkWait(5000);

  // Exit commissioning mode
  ExitCommissioning();
  networkWait(5000);

  send("sink", "plugin green-power-server table-print");
  networkWait(5000);

  GpTranslationRequestIndex(0);
  networkWait(5000);

  //press 1 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 26 FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 62 D9 A3 76 12}");
  //expect("sink",".*clus 0x0005 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);

  //release 1 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 27 FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 63 4F 0C 55 51}");
  //expect("sink",".*clus 0x0005 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);

  //press 2 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 28 FF FF FF FF 8C 30 78 56 34 12 12 00 00 00 64 8A 50 31 29}");
  //expect("sink",".*clus 0x0005 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);

  //release 2 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 2A FF FF FF FF 8C 30 78 56 34 12 13 00 00 00 65 1D 9A 92 7C}");
  //expect("sink",".*clus 0x0005 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);


  //short press 1 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 2E FF FF FF FF 8C 30 78 56 34 12 14 00 00 00 67 51 1F F0 8B}");
  //expect("sink",".*clus 0x0005 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);

  //short press 2 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 32 FF FF FF FF 8C 30 78 56 34 12 15 00 00 00 68 C3 CD DF 43}");
  //expect("sink",".*clus 0x0005 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);

  //cleanup
  sendGpPairingConfigWithRawPayload("11 00 09 0C 18 00 78 56 34 12 FE 05 FE");
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[30 00 00 78 56 34 12 \\]");
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(5000);

  ReadSinkTable();
  //expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 FE 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");// Issue radius 0 --> 5
  networkWait(5000);

  //GP Pairing configuration -Replace sink entry GPD//
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 02 78 56 34 12 06 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 01 01");
  networkWait(100);
  send("sink", "plugin green-power-server table-print");
  networkWait(1000);

  //press 1 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 4B FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 62 D9 A3 76 12}");
  //expect("sink",".*clus 0x0005 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);

  //release 1 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 4C FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 63 4F 0C 55 51}");
  //expect("sink",".*clus 0x0005 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);

  //press 2 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 4D FF FF FF FF 8C 30 78 56 34 12 12 00 00 00 64 8A 50 31 29}");
  //expect("sink",".*clus 0x0005 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);

  //release 2 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 4F FF FF FF FF 8C 30 78 56 34 12 13 00 00 00 65 1D 9A 92 7C}");
  //expect("sink",".*clus 0x0005 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);

  //short press 1 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 50 FF FF FF FF 8C 30 78 56 34 12 14 00 00 00 67 51 1F F0 8B}");
  //expect("sink",".*clus 0x0005 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);

  //short press 2 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 54 FF FF FF FF 8C 30 78 56 34 12 15 00 00 00 68 C3 CD DF 43}");
  //expect("sink",".*clus 0x0005 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);

 //cleanup
  sendGpPairingConfigWithRawPayload("11 00 09 0C 18 00 78 56 34 12 01 05 FE");
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[30 00 00 78 56 34 12 \\]");
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(5000);

  //GP Pairing configuration -Replace sink entry GPD//
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 FE 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 01 01 04 06 62 63 64 65 67 68");
  networkWait(100);
  send("sink", "plugin green-power-server table-print");
  networkWait(1000);

  //press 1 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 6D FF FF FF FF 8C 30 78 56 34 12 10 00 00 00 62 D9 A3 76 12}");
  //expect("sink",".*clus 0x0005 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);

  //release 1 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 6E FF FF FF FF 8C 30 78 56 34 12 11 00 00 00 63 4F 0C 55 51}");
  //expect("sink",".*clus 0x0005 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);

   //press 2 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 6F FF FF FF FF 8C 30 78 56 34 12 12 00 00 00 64 8A 50 31 29}");
  //expect("sink",".*clus 0x0005 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);

  //release 2 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 71 FF FF FF FF 8C 30 78 56 34 12 13 00 00 00 65 1D 9A 92 7C}");
  //expect("sink",".*clus 0x0005 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);

   //short press 1 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 72 FF FF FF FF 8C 30 78 56 34 12 14 00 00 00 67 51 1F F0 8B}");
  //expect("sink",".*clus 0x0005 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);

  //short press 2 of 2
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 73 FF FF FF FF 8C 30 78 56 34 12 15 00 00 00 68 C3 CD DF 43}");
  //expect("sink",".*clus 0x0005 \\(On/off\\) FC 01 seq .. cmd 02 payload\\[\\]",1000);
  networkWait(5000);

  //cleanup
  sendGpPairingConfigWithRawPayload("11 00 09 0C 18 00 78 56 34 12 01 05 FE");
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[30 00 00 78 56 34 12 \\]");
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  networkWait(5000);

  //print ("]");
}

void Test_4_7_11()
{
  //print ("\nStart of 4.7.11 [");

  ReadEmptySinkTable();
  test44112Setup();
  WriteCommissioningExitModeTo(2);

  //Step 1 Specific supported DeviceID, ManufacturerID included:  // Modified packet to send Ember ManufactureId instead of 0x1234
  EnterCommissioning();
  networkWait(5000);
  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 33 FF FF FF FF 8C 00 78 56 34 12 E0 02 84 F2 AB BE AF 79 4C 0D 2D 09 6E B6 DF C6 5D 79 FE A7 67 31 42 6A 10 00 00 00 01 02 10}");
  //expect Gp Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E4 02 78 56 34 12 78 56 02 10 00 00 00 16 68 16 68 16 68 16 68 16 68 16 68 16 68 16 68 00 \\]");
  networkWait(6000);

  ExitCommissioning();
  networkWait(5000);
  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 08 02 78 56 34 12 02 00 12 10 00 00 00 16 68 16 68 16 68 16 68 16 68 16 68 16 68 16 68 \\]");
  networkWait(1000);
  GpTranslationRequestIndex(0);
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 08 00 05 78 56 34 12 00 01 04 01 03 00 00 02 00 3C 78 56 34 12 20 01 04 01 06 00 00 00 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 22 01 04 01 06 00 02 00 78 56 34 12 13 01 04 01 05 00 05 03 FF FF 03 \\]");

  decommissionGPD();
  networkWait(5000);

  //Step 2: Specific supported DeviceID, ModelID included:
  EnterCommissioning();
  networkWait(5000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 40 FF FF FF FF 8C 00 78 56 34 12 E0 02 84 F2 AB BE AF 79 4C 0D 2D 09 6E B6 DF C6 5D 79 FE A7 67 31 42 6A 10 00 00 00 03 02 10 BE BE}");
  //expect Gp Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E4 02 78 56 34 12 78 56 02 10 00 00 00 16 68 16 68 16 68 16 68 16 68 16 68 16 68 16 68 00 \\]");
  networkWait(6000);

  ExitCommissioning();
  networkWait(5000);
  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 08 02 78 56 34 12 02 00 12 10 00 00 00 16 68 16 68 16 68 16 68 16 68 16 68 16 68 16 68 \\]");
  networkWait(1000);
  GpTranslationRequestIndex(0);
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 08 00 05 78 56 34 12 00 01 04 01 03 00 00 02 00 3C 78 56 34 12 20 01 04 01 06 00 00 00 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 22 01 04 01 06 00 02 00 78 56 34 12 13 01 04 01 05 00 05 03 FF FF 03 \\]");

  decommissionGPD();
  networkWait(5000);

  // Step 3A: Specific supported DeviceID = 2,
  //          GPD CommandID list included: 3 (20, 21 and 22 )are supported by device, X = 45 is supported by GPS but not by the deviceId and 1 is not supported by neither device Id nor GPS  (Y = 77)
  EnterCommissioning();
  networkWait(5000);

  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 4D FF FF FF FF 8C 00 78 56 34 12 E0 02 84 F2 AB BE AF 79 4C 0D 2D 09 6E B6 DF C6 5D 79 FE A7 67 31 42 6A 10 00 00 00 04 05 20 21 22 45 77}");
   //expect Gp Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E4 02 78 56 34 12 78 56 02 10 00 00 00 16 68 16 68 16 68 16 68 16 68 16 68 16 68 16 68 00 \\]");
  networkWait(6000);

  ExitCommissioning();
  networkWait(5000);

  ReadSinkTable();//TODO : Expected value should be checked on Test Specification
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 08 02 78 56 34 12 02 00 12 10 00 00 00 16 68 16 68 16 68 16 68 16 68 16 68 16 68 16 68 \\]");
  networkWait(1000);
  GpTranslationRequestIndex(0); //TODO : Expected value should be checked on Test Specification
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 04 00 04 78 56 34 12 20 01 04 01 06 00 00 00 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 22 01 04 01 06 00 02 00 78 56 34 12 45 01 04 01 00 03 04 01 00 \\]");

  decommissionGPD();
  networkWait(5000);

  //Step 3B : Specific non-supported DeviceID, GPD CommandID list included:
  EnterCommissioning();
  networkWait(5000);

  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 65 FF FF FF FF 8C 00 78 56 34 12 E0 20 84 F2 AB BE AF 79 4C 0D 2D 09 6E B6 DF C6 5D 79 FE A7 67 31 42 6A 10 00 00 00 04 03 20 21 22}");
  //expect Gp Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E4 02 78 56 34 12 78 56 20 10 00 00 00 16 68 16 68 16 68 16 68 16 68 16 68 16 68 16 68 00 \\]");
  networkWait(6000);

  ExitCommissioning();
  networkWait(5000);

  ReadSinkTable();//TODO : Expected value should be checked on Test Specification
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 08 02 78 56 34 12 20 00 12 10 00 00 00 16 68 16 68 16 68 16 68 16 68 16 68 16 68 16 68 \\]");
  networkWait(1000);
  GpTranslationRequestIndex(0); //TODO : Expected value should be checked on Test Specification
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 03 00 03 78 56 34 12 20 01 04 01 06 00 00 00 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 22 01 04 01 06 00 02 00 \\]");

  decommissionGPD();
  networkWait(5000);

  //Step 3C : DeviceID = 0xFE, GPD CommandID list included:
  EnterCommissioning();
  networkWait(5000);

  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 7E FF FF FF FF 8C 00 78 56 34 12 E0 FE 84 F2 AB BE AF 79 4C 0D 2D 09 6E B6 DF C6 5D 79 FE A7 67 31 42 6A 10 00 00 00 04 03 20 21 22}");
  //expect Gp Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E4 02 78 56 34 12 78 56 FE 10 00 00 00 16 68 16 68 16 68 16 68 16 68 16 68 16 68 16 68 00 \\]");
  networkWait(6000);

  ExitCommissioning();
  networkWait(5000);

  ReadSinkTable(); //TODO : Expected value should be checked on Test Specification
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 08 02 78 56 34 12 FE 00 12 10 00 00 00 16 68 16 68 16 68 16 68 16 68 16 68 16 68 16 68 \\]");
  networkWait(1000);
  GpTranslationRequestIndex(0); //TODO : Expected value should be checked on Test Specification
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 03 00 03 78 56 34 12 20 01 04 01 06 00 00 00 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 22 01 04 01 06 00 02 00 \\]");

  decommissionGPD();
  networkWait(5000);

  //Step 4A : Specific supported DeviceID, Cluster list included:
  EnterCommissioning();
  networkWait(5000);

  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 91 FF FF FF FF 8C 00 78 56 34 12 E0 30 84 F2 AB BE AF 79 4C 0D 2D 09 6E B6 DF C6 5D 79 FE A7 67 31 42 6A 10 00 00 00 08 02 02 04 00 04}");
  //expect Gp Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E4 02 78 56 34 12 78 56 30 10 00 00 00 16 68 16 68 16 68 16 68 16 68 16 68 16 68 16 68 00 \\]");
  networkWait(6000);

  ExitCommissioning();
  networkWait(5000);

  ReadSinkTable(); //TODO : Expected value should be checked on Test Specification
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 08 02 78 56 34 12 30 00 12 10 00 00 00 16 68 16 68 16 68 16 68 16 68 16 68 16 68 16 68 \\]");
  networkWait(1000);
  GpTranslationRequestIndex(0); //TODO : Expected value should be checked on Test Specification
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 02 00 02 78 56 34 12 AF 01 04 01 FF FF 0A FF 78 56 34 12 A6 01 04 01 FF FF FF FF \\]");

  decommissionGPD();
  networkWait(5000);

  //Step 4B : Specific non-supported DeviceID, Cluster list included:
  EnterCommissioning();
  networkWait(5000);

  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 9E FF FF FF FF 8C 00 78 56 34 12 E0 20 84 F2 AB BE AF 79 4C 0D 2D 09 6E B6 DF C6 5D 79 FE A7 67 31 42 6A 10 00 00 00 08 02 02 04 00 04}");
  //expect Gp Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E4 02 78 56 34 12 78 56 20 10 00 00 00 16 68 16 68 16 68 16 68 16 68 16 68 16 68 16 68 00 \\]");
  networkWait(6000);

  ExitCommissioning();
  networkWait(5000);
  ReadSinkTable(); //TODO : Expected value should be checked on Test Specification
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 08 02 78 56 34 12 20 00 12 10 00 00 00 16 68 16 68 16 68 16 68 16 68 16 68 16 68 16 68 \\]");
  networkWait(1000);
  GpTranslationRequestIndex(0); //TODO : Expected value should be checked on Test Specification
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 02 00 02 78 56 34 12 50 01 04 01 01 01 00 00 78 56 34 12 51 01 04 01 01 01 01 00 \\]");

  decommissionGPD();
  networkWait(5000);

  //Step 4C : DeviceID = 0xFE, Cluster list included
  EnterCommissioning();
  networkWait(5000);

  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 AB FF FF FF FF 8C 00 78 56 34 12 E0 FE 84 F2 AB BE AF 79 4C 0D 2D 09 6E B6 DF C6 5D 79 FE A7 67 31 42 6A 10 00 00 00 08 02 02 04 00 04}");
  //expect Gp Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E4 02 78 56 34 12 78 56 FE 10 00 00 00 16 68 16 68 16 68 16 68 16 68 16 68 16 68 16 68 00 \\]");
  networkWait(6000);

  ExitCommissioning();
  networkWait(5000);

  ReadSinkTable(); //TODO : Expected value should be checked on Test Specification
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 08 02 78 56 34 12 FE 00 12 10 00 00 00 16 68 16 68 16 68 16 68 16 68 16 68 16 68 16 68 \\]");
  networkWait(1000);
  GpTranslationRequestIndex(0); //TODO : Expected value should be checked on Test Specification
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 02 00 02 78 56 34 12 AF 01 04 01 FF FF 0A FF 78 56 34 12 A6 01 04 01 FF FF FF FF \\]");


  decommissionGPD();
  networkWait(5000);

  //print ("]");
}

//4.7.3 GPS supporting GPD Temperature Sensor: Device ID 0x30 or GPD-controllable Temperature Measurement functionality
void Test_4_7_3()
{
  test44112Setup();
  // 1A
  EnterCommissioning();
  networkWait(3000);
  // Commissioning only with device Id = 0x30 , no application information present.
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E8 FF FF FF FF 0C 78 56 34 12 E0 30 81 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00}");
  // Expect GP Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E5 02 78 56 34 12 78 56 30 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(1000);
  // Exit commissioning mode
  ExitCommissioning();
  networkWait(3000);
  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 30 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(1000);
  GpTranslationRequestIndex(0);
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 02 00 02 78 56 34 12 AF 01 04 01 FF FF 0A FF 78 56 34 12 A6 01 04 01 FF FF FF FF \\]");
  networkWait(1000);

  // 1B
  decommissionGPD();
  networkWait(3000);
  EnterCommissioning();
  networkWait(3000);
  // Commissioning only with device Id = 0x30 , command list A0 and A6 present, cluster list present for temperature sensor server present 0x0402
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E8 FF FF FF FF 0C 78 56 34 12 E0 30 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 0C 02 A0 A6 01 02 04}");
  // Expect GP Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E5 02 78 56 34 12 78 56 30 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(1000);
  // Exit commissioning mode
  ExitCommissioning();
  networkWait(3000);
  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 30 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(1000);
  GpTranslationRequestIndex(0);
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 02 00 02 78 56 34 12 AF 01 04 01 FF FF 0A FF 78 56 34 12 A6 01 04 01 FF FF FF FF \\]");
  networkWait(1000);

  // 1C
  decommissionGPD();
  networkWait(3000);
  // Gp Pairing with action replace sink, device Id = 0x30, no application Info and send Gp Pairing = 1
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 02 78 56 34 12 30 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  // Expect GP Pairing                                                            28 E5 02 78 56 34 12 78 56 30 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 05
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E5 02 78 56 34 12 78 56 30 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 05 \\]");
  networkWait(1000);
  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 30 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(1000);
  GpTranslationRequestIndex(0);
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 02 00 02 78 56 34 12 AF 01 04 01 FF FF 0A FF 78 56 34 12 A6 01 04 01 FF FF FF FF \\]");
  networkWait(1000);

  // 1D
  decommissionGPD();
  networkWait(3000);
  // Gp Pairing with action replace sink, device Id = 0x30, with application Info as Command List present A0 and A6 and clusterlist 0x0402 server present and send Gp Pairing = 1
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 30 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 0C 02 A0 A6 01 02 04");
  networkWait(3000);
  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 30 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(1000);
  GpTranslationRequestIndex(0);
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 02 00 02 78 56 34 12 AF 01 04 01 FF FF 0A FF 78 56 34 12 A6 01 04 01 FF FF FF FF \\]");
  networkWait(1000);

  // 1E
  decommissionGPD();
  networkWait(3000);
  EnterCommissioning();
  networkWait(3000);
  // Commissioning only with device Id = 0x12 , command list A0 and A6 present, cluster list present for temperature sensor server present 0x0402
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E8 FF FF FF FF 0C 78 56 34 12 E0 12 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 0C 02 A0 A6 01 02 04}");
  // Expect GP Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E5 02 78 56 34 12 78 56 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(1000);
  // Exit commissioning mode
  ExitCommissioning();
  networkWait(3000);
  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 12 00 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(1000);
  GpTranslationRequestIndex(0);
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 02 00 02 78 56 34 12 AF 01 04 01 FF FF 0A FF 78 56 34 12 A6 01 04 01 FF FF FF FF \\]");
  networkWait(1000);

  // 1F
  decommissionGPD();
  networkWait(3000);
  // Gp Pairing with action replace sink, device Id = 0x12, with application Info as Command List present A0 and A6 and clusterlist 0x0402 server present and send Gp Pairing = 1
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 12 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 0C 05 A0 A1 A2 A3 A6 01 02 04");
  // Expect GP Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E5 02 78 56 34 12 78 56 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 05 \\]");
  networkWait(1000);
  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 78 56 34 12 12 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");
  networkWait(1000);
  GpTranslationRequestIndex(0);
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 02 00 02 78 56 34 12 AF 01 04 01 FF FF 0A FF 78 56 34 12 A6 01 04 01 FF FF FF FF \\]");
  networkWait(15000);

  //2A Attribute reporting: Attribute reporting command (0xA0) with only the MeasuredValue Attribute of the Temperature Measurement cluster
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E3 FF FF FF FF 8C 30 78 56 34 12 12 00 00 00 A0 02 04 00 00 29 56 40 23 EA C4 FF}");
  expect("sink",".*clus 0x0402 \\(Temperature Measurement\\) FC 08 seq .. cmd 0A payload\\[00 00 29 56 40 \\]");
  networkWait(1000);

  //2B Attribute reporting command (0xA0) with 3 attributes of the Temperature Measurement cluster: the MeasuredValue, MinValue and MaxValue attribute
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E4 FF FF FF FF 8C 30 78 56 34 12 13 00 00 00 A0 02 04 00 00 29 56 40 01 00 29 4D 95 02 00 29 FE 7F 23 09 51 D8}");
  expect("sink",".*clus 0x0402 \\(Temperature Measurement\\) FC 08 seq .. cmd 0A payload\\[00 00 29 56 40 01 00 29 4D 95 02 00 29 FE 7F \\]");
  networkWait(1000);

  //2C Manufacturer-specific attribute reporting command (0xA1), with ManufacturerID as supported by DUT-GPS, one attribute report for the MeasuredValue Attribute of the Temperature Measurement cluster (0x0402).
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 EA FF FF FF FF 8C 30 78 56 34 12 14 00 00 00 A1 02 10 02 04 00 00 29 56 40 9E C4 FE AE}");
  expect("sink",".*clus 0x0402 \\(Temperature Measurement\\) mfgId 1002 FC 0C seq .. cmd 0A payload\\[00 00 29 56 40 \\]");
  networkWait(1000);

  //2D Manufacturer-specific attribute reporting command (0xA1), with ManufacturerID NOT supported by DUT-GPS, with one attribute report for the MeasuredValue Attribute of the Temperature Measurement cluster (0x0402).
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 EB FF FF FF FF 8C 30 78 56 34 12 15 00 00 00 A1 34 12 02 04 00 00 29 56 40 A5 CE 2A 1F}");
  expect("sink",".*clus 0x0402 \\(Temperature Measurement\\) mfgId 1234 FC 0C seq .. cmd 0A payload\\[00 00 29 56 40 \\]");
  networkWait(1000);

  //2E GPD Multi-cluster reporting command (0xA2), with one cluster report for the MeasuredValue Attribute of the Temperature Measurement cluster.
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 EC FF FF FF FF 8C 30 78 56 34 12 16 00 00 00 A2 02 04 00 00 29 56 40 4E 6D 3B B9}");
  expect("sink",".*clus 0x0402 \\(Temperature Measurement\\) FC 08 seq .. cmd 0A payload\\[00 00 29 56 40 \\]");
  networkWait(1000);

  //2F GPD Multi-cluster reporting command (0xA2), with two cluster reports: one for the MeasuredValue Attribute of the Temperature Measurement cluster
  //   and one for an attribute of a cluster unsupported by DUT-GPS (e.g. MeasuredValue of the Relative Humidity Measurement cluster).
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 ED FF FF FF FF 8C 30 78 56 34 12 17 00 00 00 A2 02 04 00 00 29 56 40 76 98 00 00 29 56 40 BE 68 08 11}");
  expect("sink",".*clus 0x0402 \\(Temperature Measurement\\) FC 08 seq .. cmd 0A payload\\[00 00 29 56 40 \\]");
  expect("sink",".*clus 0x9876 \\(Unknown clus. \\[0x9876\\]\\) FC 08 seq .. cmd 0A payload\\[00 00 29 56 40 \\]");
  networkWait(1000);

  //2G GPD Manufacturer-specific multi-cluster reporting command (0xA3), with ManufacturerID as supported by DUT-GPS, one cluster report for the MeasuredValue Attribute of the Temperature Measurement cluster (0x0402).
  //   and one for an attribute of a cluster unsupported by DUT-GPS (e.g. MeasuredValue of the Relative Humidity Measurement cluster).
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 EF FF FF FF FF 8C 30 78 56 34 12 18 00 00 00 A3 02 10 02 04 00 00 29 56 40 3C 58 84 B9}");
  expect("sink",".*clus 0x0402 \\(Temperature Measurement\\) mfgId 1002 FC 0C seq .. cmd 0A payload\\[00 00 29 56 40 \\]");
  networkWait(1000);

  //2H GPD Multi-cluster reporting command (0xA3), with ManufacturerID NOT supported by DUT-GPS, with two cluster reports: one for the MeasuredValue Attribute of the Temperature Measurement cluster (0x0402)
  //   and one for an attribute of a cluster unsupported by DUT-GPS (e.g. 0xfdfd).
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F0 FF FF FF FF 8C 30 78 56 34 12 19 00 00 00 A3 34 12 02 04 00 00 29 56 40 04 72 7F 76}");
  expect("sink",".*clus 0x0402 \\(Temperature Measurement\\) mfgId 1234 FC 0C seq .. cmd 0A payload\\[00 00 29 56 40 \\]");
  networkWait(1000);

  //2I GPD ZCL tunnelling command (0xA6), carrying ZCL generic Report Attributes command (0xA0) for the MeasuredValue Attribute of the Temperature Measurement cluster (0x0402)
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F1 FF FF FF FF 8C 30 78 56 34 12 1A 00 00 00 A6 08 02 04 0A 05 00 00 29 56 40 D8 B4 A4 D4}");
  expect("sink",".*clus 0x0402 \\(Temperature Measurement\\) FC 08 seq .. cmd 0A payload\\[00 00 29 56 40 \\]");
  networkWait(1000);

  networkWait(6000);
  //clanup
  decommissionGPD();
  networkWait(3000);
}

void Test_4_7_12()
{
//print ("\nStart of 4.7.12 [");

EnterCommissioning();
networkWait(3000);

send("gpd1", "plugin green-power-test-device send-test 255 {01 08 AB FF FF FF FF 8C 00 78 56 34 12 E0 FE 84 F2 AB BE AF 79 4C 0D 2D 09 6E B6 DF C6 5D 79 FE A7 67 31 42 6A 10 00 00 00 04 02 10 18}");
networkWait(6000);

GpTranslationRequestIndex(0);
expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 02 00 02 78 56 34 12 10 01 04 01 05 00 05 03 FF FF 00 78 56 34 12 18 01 04 01 05 00 04 03 FF FF 00 \\]");
networkWait(3000);

// Creat one scene on the snk light :
// scene0 = (on/oof = 0 + level is 0)
// Scene0
// write the on/off and level attribute locally on the sink
send ("sink", "write 1 0x0006 0x0000 1 0x10 {01}");
networkWait(1000);
send ("sink", "write 1 0x0008 0x0000 1 0x18 {64}");
networkWait(3000);

//Store this setting as Scene0 for gpd Id(0x12345678) = derived group Id 0x5678
sendGpNotificationWithRawPayload("11 0E 00 90 74 78 56 34 12 10 00 00 00 18 00");
networkWait(3000);

//Change the attributes to some thing other than the scene0 values
//write the on/off and level attribute locally on the sink
send ("sink", "write 1 0x0006 0x0000 1 0x10 {00}");
networkWait(1000);

send ("sink", "write 1 0x0008 0x0000 1 0x18 {22}");
networkWait(1000);

//Read to check the attribute values have changed based on the above write .
send ("sink", "read 1 0x0006 0x0000 1");
expect("sink","read: ep: 1, cl: 0x0006, attr: 0x0000, svr: y","00 ");
networkWait(1000);

send ("sink", "read 1 0x0008 0x0000 1");
expect("sink","read: ep: 1, cl: 0x0008, attr: 0x0000, svr: y","22 ");
networkWait(1000);

//Recall scene 0 - this will cause the recall of the scenes that was stored for above group and scene id
sendGpNotificationWithRawPayload("11 0E 00 90 74 78 56 34 12 11 00 00 00 10 00");
networkWait(3000);

send ("sink", "read 1 0x0006 0x0000 1");
expect("sink","read: ep: 1, cl: 0x0006, attr: 0x0000, svr: y","01 ");
networkWait(1000);

send ("sink", "read 1 0x0008 0x0000 1");
expect("sink","read: ep: 1, cl: 0x0008, attr: 0x0000, svr: y","64 ");
networkWait(1000);

//print ("]");
}
void Test_NoDuplicateEntries()
{
  // Test 1 : GPDF Non Multisensor commands.
  // Enter commissioning mode for Endpoint 1
  EnterCommissioning();
  networkWait(3000);
  // Commission the GPD
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 AB FF FF FF FF 8C 00 78 56 34 12 E0 FE 84 F2 AB BE AF 79 4C 0D 2D 09 6E B6 DF C6 5D 79 FE A7 67 31 42 6A 10 00 00 00 04 02 10 18}");
  networkWait(6000);
  ExitCommissioning();
  networkWait(6000);

  // Re do the commissioning for the exact same GPD
  EnterCommissioning();
  networkWait(3000);
  // Commission the GPD
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 AB FF FF FF FF 8C 00 78 56 34 12 E0 FE 84 F2 AB BE AF 79 4C 0D 2D 09 6E B6 DF C6 5D 79 FE A7 67 31 42 6A 10 00 00 00 04 02 10 18}");
  networkWait(6000);
  ExitCommissioning();
  networkWait(6000);

  send ("sink", "plugin green-power-server table-print");
  networkWait(6000);

  // Read the Translation table and ensure only two entries
  GpTranslationRequestIndex(0);
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 02 00 02 78 56 34 12 10 01 04 01 05 00 05 03 FF FF 00 78 56 34 12 18 01 04 01 05 00 04 03 FF FF 00 \\]");
  networkWait(6000);

  cleanUp();

  // Test 2: GPDF Multisensor
  EnterCommissioning();
  networkWait(6000);
  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F4 FF FF FF FF 0C 78 56 34 12 E0 FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 0F 00 00 00 20}");
  networkWait(6000);
  // Commissioning // Application Description
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F9 FF FF FF FF 0C 78 56 34 12 E4 01 01 00 00 07 08 06 04 00 00 18 10 00}");
  networkWait(6000);
  ExitCommissioning();
  networkWait(60000); // Allow MS timeout after first commissioning

  // Redo the commissioning
  EnterCommissioning();
  networkWait(6000);
  // Commissioning
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F4 FF FF FF FF 0C 78 56 34 12 E0 FE 85 F2 7D 17 7B D2 9E A0 FD A6 B0 17 03 65 87 DC 26 00 61 F1 63 A9 10 00 00 00 20}");
  networkWait(6000);
  // Commissioning // Application Description
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F9 FF FF FF FF 0C 78 56 34 12 E4 01 01 00 00 07 08 06 04 00 00 18 10 00}");
  networkWait(6000);
  ExitCommissioning();
  networkWait(60000); // Allow MS timeout

  // Read the Translation table and ensure only one entry
  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 01 00 01 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 \\]");
  networkWait(6000);
  send("sink", "plugin green-power-server table-print");
  networkWait(6000);

  cleanUp();

  //Test 3 : CT commissioning - Non Multi sensor
  // GP Pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 09 28 02 78 56 34 12 02 05 0B 00 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(5000);
  // Re send again the configuration
  sendGpPairingConfigWithRawPayload("11 00 09 09 28 02 78 56 34 12 02 05 0B 02 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE");
  networkWait(5000);

  send("sink", "plugin green-power-server table-print");
  networkWait(6000);

  // Read the Translation table and ensure the 8 = 5 + 3 entries, read by TT request
  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 0B 00 05 78 56 34 12 00 01 04 01 03 00 00 02 00 3C 78 56 34 12 20 01 04 01 06 00 00 00 78 56 34 12 20 02 04 01 06 00 00 00 78 56 34 12 21 01 04 01 06 00 01 00 78 56 34 12 21 02 04 01 06 00 01 00 \\]");
  networkWait(6000);
  GpTranslationRequestIndex(5);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 00 0B 05 04 78 56 34 12 22 01 04 01 06 00 02 00 78 56 34 12 22 02 04 01 06 00 02 00 78 56 34 12 13 01 04 01 05 00 05 03 FF FF 03 78 56 34 12 1B 01 04 01 05 00 04 03 FF FF 03 \\]");
  networkWait(6000);

  cleanUp();

  // Test 4 : CT commissioning - Multi Sensor
  // GP pairing configuration
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 FE 05 12 10 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 20");
  networkWait(1000);
  sendGpPairingConfigWithRawPayload("11 00 09 05 00 04 78 56 34 12 FE 05 FE 20 01 01 00 01 00 64 0A 08 06 04 00 00 18 32 00 09 76");
  networkWait(60000); // Allow MS timeout after first commissioning
  // Resend the second commissioning
  sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 FE 05 12 11 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 20");
  networkWait(1000);
  sendGpPairingConfigWithRawPayload("11 00 09 05 00 04 78 56 34 12 FE 05 FE 20 01 01 00 01 00 64 0A 08 06 04 00 00 18 32 00 09 76");
  networkWait(2000);

  // Read the Translation table and ensure only one entry for each endpoint
  GpTranslationRequestIndex(0);
  expect("THProxy","*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 08 payload\\[00 08 02 00 02 78 56 34 12 A8 01 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 78 56 34 12 A8 02 04 01 FF FF 0A FE 09 07 00 00 06 04 00 00 18 01 \\]");
  networkWait(6000);
  cleanUp();
}

void Test_removeGpdEndpoint()
{

print ("\nStart removeGpdEndpoint unit test//[");
ReadEmptySinkTable();

GpTranslationRequestIndex0Empty();

//GP Pairing configuration -pair GPD//
sendGpPairingConfigWithRawPayload("11 00 09 0A 28 06 78 56 34 12 07 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 10 02 14 0B");
networkWait(100);
send("sink", "plugin green-power-server table-print");
networkWait(1000);
send("THProxy", "raw 0x0021 {11 00 09 0A 28 06 78 56 34 12 07 05 12 0F 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF FE 10 02 14 0F}");
send("THProxy", "send " + sinkId + " 242 242");
networkWait(100);

GpTranslationRequestIndex(0);

//GP notification - GP command//
send("THProxy", "raw 0x0021 {8C 30 78 56 34 12 10 00 00 00 69 01 3B 3F 24 FB}");
send("THProxy", "send " + sinkId + " 242 242");
networkWait(1000);

send("sink", "plugin green-power-server commission 9 0xffff 0xffff 1");
networkWait(1000);
// Commission the GPD
send("gpd1", "plugin green-power-test-device send-test 255 {01 08 AC FF FF FF FF 0C 44 33 22 11 E0 02 81 F2 CB F3 A8 7A 21 63 B6 A3 2D 8E FD 00 8D C6 12 C7 B8 F7 B7 B9 0F 00 00 00}");
networkWait(6000);
send("sink", "plugin green-power-server commission 0 0xffff 0xffff 1");
networkWait(3000);
send("sink", "plugin green-power-server commission 9 0xffff 0xffff 2");
networkWait(1000);

// Commission the GPD
send("gpd1", "plugin green-power-test-device send-test 255 {01 08 AC FF FF FF FF 0C 44 33 22 11 E0 02 81 F2 CB F3 A8 7A 21 63 B6 A3 2D 8E FD 00 8D C6 12 C7 B8 F7 B7 B9 0F 00 00 00}");
networkWait(6000);
send("sink", "plugin green-power-server commission 0 0xffff 0xffff 2");
networkWait(3000);
send("sink", "plugin green-power-server table-print");
networkWait(1000);

send("sink", "plugin green-power-server table-remove-endpoint 0x00 0x12345678 \"0000\" 0x00 0x01");
networkWait(1000);
send("sink", "plugin green-power-server table-print");
networkWait(1000);


send("sink", "plugin green-power-server table-remove-endpoint 0x00 0x11223344 \"0000\" 0x00 0x01");
networkWait(1000);
send("sink", "plugin green-power-server table-print");
networkWait(1000);

//GP Pairing configuration -remove GPD//
sendGpPairingConfigWithRawPayload("11 00 09 0C 18 00 78 56 34 12 07 05 FE");

//GP Pairing Configuration
sendGpPairingConfigWithRawPayload("11 1E 09 0C 08 02 44 33 22 11 02 05 12 10 00 00 00 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF FE");
networkWait(3000);
send("sink", "plugin green-power-server table-print");
networkWait(1000);

print ("]");
}

//2.4.3.7   DUT-GPD with OOB key encrypted with TC-LK (shared key NOT requested)
void schneiderTest2_4_3_7()
{
  // Test for key request with key type OOB
  // Sink Set Up
  WriteGPSCommissioningModeNoResponse(1);
  WriteCommissioningExitModeNoResponse(4);
  WriteGPSSecurityLevelToNoResponse(0x07);
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  WriteGPSharedSecurityKeyTypeTo(0); // This can't be a OOB (it can only be a shared or derived key type)
  //send("sink","write 242 0x0021 0x0020 1 0x18 {00}"); // this is same as sbove except it is local write
  WriteGPSharedSecurityKeyTo("B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF");
  //WriteGPSharedSecurityKeyTo("22331664166416641664166416641655"); // Schneider's OOB KeType = 4

  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A2 FF FF FF FF 4D E3 00}"); // Channel Request with Auto commissioning = 0
  // expect Gp response with Channel Configuration                                00 00 00 00 00 00 00 00 F3 01 10
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 00 00 00 00 F3 01 10 \\]");
  networkWait(2000);
  // E0 - without Key request  bit set
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 28 ff ff ff ff 8c 40 e5 a8 07 fe e0 02 85 f3 79 06 2b 8e 0f 78 07 bc 53 b6 10 ce a1 3e cc cc ed 0b 11 ab 28 00 00 00 01 5e 10 64 16 01 f6 04 00 00 01 00 03 00 05 0b}");
  networkWait(3000);
  // E0 - without Key request  bit set
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 29 ff ff ff ff 8c 40 e5 a8 07 fe e0 02 85 f3 79 06 2b 8e 0f 78 07 bc 53 b6 10 ce a1 3e cc cc ed 0b 11 ab 29 00 00 00 01 5e 10 64 16 01 f6 04 00 00 01 00 03 00 05 0b}");
  // expect Gp response with Commissioning Reply
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 E5 A8 07 FE F0 01 98 \\]");
  networkWait(5000);
  // send success
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 2a ff ff ff ff 8c 38 e5 a8 07 fe 2a 00 00 00 33 82 51 f2 7c}");

  // Expect GP Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E7 02 E5 A8 07 FE E5 A8 02 2A 00 00 00 22 33 16 64 16 64 16 64 16 64 16 64 16 64 16 55 00 \\]"); // radius 00 --> 5 ?
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 E5 A8 07 FE 02 00 13 2A 00 00 00 22 33 16 64 16 64 16 64 16 64 16 64 16 64 16 55 \\]");// Issue radius 0 --> 5
  networkWait(5000);
  cleanUp();
}

//2.4.3.7   DUT-GPD with OOB key encrypted with TC-LK (shared key NOT requested) : gpsSharedKeyType = 2
void schneiderTest2_4_3_7_gpsSharedSecurityKey()
{
  // Test for key request with key type OOB
  // Sink Set Up
  WriteGPSCommissioningModeNoResponse(1);
  WriteCommissioningExitModeNoResponse(4);
  WriteGPSSecurityLevelToNoResponse(0x07);
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  WriteGPSharedSecurityKeyTypeTo(2); // This can't be a OOB (it can only be a shared or derived key type)
  //send("sink","write 242 0x0021 0x0020 1 0x18 {00}"); // this is same as sbove except it is local write
  WriteGPSharedSecurityKeyTo("B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF");
  //WriteGPSharedSecurityKeyTo("22331664166416641664166416641655"); // Schneider's OOB KeType = 4

  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A2 FF FF FF FF 4D E3 00}"); // Channel Request with Auto commissioning = 0
  // expect Gp response with Channel Configuration                                00 00 00 00 00 00 00 00 F3 01 10
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 00 00 00 00 F3 01 10 \\]");
  networkWait(2000);
  // E0 - without Key request  bit set
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 28 ff ff ff ff 8c 40 e5 a8 07 fe e0 02 85 f3 79 06 2b 8e 0f 78 07 bc 53 b6 10 ce a1 3e cc cc ed 0b 11 ab 28 00 00 00 01 5e 10 64 16 01 f6 04 00 00 01 00 03 00 05 0b}");
  networkWait(3000);
  // E0 - without Key request  bit set
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 29 ff ff ff ff 8c 40 e5 a8 07 fe e0 02 85 f3 79 06 2b 8e 0f 78 07 bc 53 b6 10 ce a1 3e cc cc ed 0b 11 ab 29 00 00 00 01 5e 10 64 16 01 f6 04 00 00 01 00 03 00 05 0b}");
  // expect Gp response with Commissioning Reply
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 E5 A8 07 FE F0 01 98 \\]");
  networkWait(5000);
  // send success
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 2a ff ff ff ff 8c 38 e5 a8 07 fe 2a 00 00 00 33 82 51 f2 7c}");

  // Expect GP Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E7 02 E5 A8 07 FE E5 A8 02 2A 00 00 00 22 33 16 64 16 64 16 64 16 64 16 64 16 64 16 55 00 \\]"); // radius 00 --> 5 ?
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 E5 A8 07 FE 02 00 13 2A 00 00 00 22 33 16 64 16 64 16 64 16 64 16 64 16 64 16 55 \\]");// Issue radius 0 --> 5
  networkWait(5000);
  cleanUp();
}

//2.4.3.8  DUT-GPD with OOB key encrypted (shared key requested, not delivered)
void schneiderTest2_4_3_8()
{
  // Test for key request with key type OOB
  // Sink Set Up
  WriteGPSCommissioningModeNoResponse(1);
  WriteCommissioningExitModeNoResponse(4);
  WriteGPSSecurityLevelToNoResponse(0x07);
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  WriteGPSharedSecurityKeyTypeTo(0);  // The shared key is very importatnt for key request negotiation
  //send("sink","write 242 0x0021 0x0020 1 0x18 {00}"); // this is same as sbove except it is local write
  WriteGPSharedSecurityKeyTo("B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF");
  //WriteGPSharedSecurityKeyTo("22331664166416641664166416641655"); // Schneider's OOB KeType = 4

  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A2 FF FF FF FF 4D E3 00}"); // Channel Request with Auto commissioning = 0
  // expect Gp response with Channel Configuration                                00 00 00 00 00 00 00 00 F3 01 10
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 00 00 00 00 F3 01 10 \\]");
  networkWait(2000);
  // E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 28 ff ff ff ff 8c 40 e5 a8 07 fe e0 02 a5 f3 79 06 2b 8e 0f 78 07 bc 53 b6 10 ce a1 3e cc cc ed 0b 11 ab 28 00 00 00 01 5e 10 64 16 01 f6 04 00 00 01 00 03 00 05 0b}");
  networkWait(3000);
  // E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 29 ff ff ff ff 8c 40 e5 a8 07 fe e0 02 a5 f3 79 06 2b 8e 0f 78 07 bc 53 b6 10 ce a1 3e cc cc ed 0b 11 ab 29 00 00 00 01 5e 10 64 16 01 f6 04 00 00 01 00 03 00 05 0b}");
  // expect Gp response with Commissioning Reply
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 E5 A8 07 FE F0 01 98 \\]");
  networkWait(10000);
  // send success
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 2a ff ff ff ff 8c 38 e5 a8 07 fe 2a 00 00 00 33 82 51 f2 7c}");

  // Expect GP Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 E7 02 E5 A8 07 FE E5 A8 02 2A 00 00 00 22 33 16 64 16 64 16 64 16 64 16 64 16 64 16 55 00 \\]"); // radius 00 --> 5 ?
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 E5 A8 07 FE 02 00 13 2A 00 00 00 22 33 16 64 16 64 16 64 16 64 16 64 16 64 16 55 \\]");// Issue radius 0 --> 5
  networkWait(5000);
  cleanUp();
}

//2.4.3.8  DUT-GPD with OOB key encrypted (shared key requested, delivered) gpsSharedSecurityKey = 2
void schneiderTest2_4_3_8_gpsSharedSecurityKey()
{
  // Test for key request with key type OOB
  // Sink Set Up
  WriteGPSCommissioningModeNoResponse(1);
  WriteCommissioningExitModeNoResponse(4);
  WriteGPSSecurityLevelToNoResponse(0x07);
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  WriteGPSharedSecurityKeyTypeTo(2);  // The shared key is very importatnt for key request negotiation
  //send("sink","write 242 0x0021 0x0020 1 0x18 {00}"); // this is same as sbove except it is local write
  WriteGPSharedSecurityKeyTo("C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF");
  //WriteGPSharedSecurityKeyTo("22331664166416641664166416641655"); // Schneider's OOB KeType = 4

  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A2 FF FF FF FF 4D E3 00}"); // Channel Request with Auto commissioning = 0
  // expect Gp response with Channel Configuration                                00 00 00 00 00 00 00 00 F3 01 10
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 00 00 00 00 F3 01 10 \\]");
  networkWait(2000);
  // E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 28 ff ff ff ff 8c 40 e5 a8 07 fe e0 02 a5 f3 79 06 2b 8e 0f 78 07 bc 53 b6 10 ce a1 3e cc cc ed 0b 11 ab 28 00 00 00 01 5e 10 64 16 01 f6 04 00 00 01 00 03 00 05 0b}");
  networkWait(3000);
  // E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 29 ff ff ff ff 8c 40 e5 a8 07 fe e0 02 a5 f3 79 06 2b 8e 0f 78 07 bc 53 b6 10 ce a1 3e cc cc ed 0b 11 ab 29 00 00 00 01 5e 10 64 16 01 f6 04 00 00 01 00 03 00 05 0b}");
  // expect Gp response with Commissioning Reply
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 E5 A8 07 FE F0 19 5E 08 C9 F6 1B 5C 15 A6 33 CC BC 7E E9 CF 71 2C 53 87 84 6F 8D 2A 00 00 00 \\]");
  networkWait(5000);
  // send success
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 9f ff ff ff ff 8c 18 e5 a8 07 fe 9f 02 00 00 34 bf a0 a8 b5}");

  // Expect GP Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 D7 02 E5 A8 07 FE E5 A8 02 9F 02 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]"); // radius 00 --> 5 ?
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 E5 A8 07 FE 02 00 0B 9F 02 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");// Issue radius 0 --> 5
  networkWait(5000);
  cleanUp();
}

// Following are test cases related to combo behaviour for following combinition of Key Request and Key present feilds in the commissioning frame

// Bidirectional Commissioning RXAfterTx = true
//   1. KeyRequest = 1 , KeyPresent = 1 : Combo sends Commissioning Reply [content depends on the (gpSharedSecurityKeyTye, gpSharedSecurityKey) attributes in Combo && KeyType and KeyContent in the incoming commissioning frame]
   // the above is covered in schneiderTest2_4_3_8 and schneiderTest2_4_3_8_gpsSharedSecurityKey for two different key types
//   2. KeyRequest = 0 , KeyPresent = 1 : Combo sends Commissioning Reply [does not content any key data, just the type because Combo accepts the incoming key and type]
   // the above is covered in schneiderTest2_4_3_7 and schneiderTest2_4_3_7_gpsSharedSecurityKey for two different key types
//   3. KeyRequest = 1 , KeyPresent = 0 : Combo sends Commissioning Reply [content depends on the (gpSharedSecurityKeyTye, gpSharedSecurityKey) attributes]
//   4. KeyRequest = 0 , KeyPresent = 0 : DROP Commissioning frame

// Unidirectional Commissioning RXAfterTx = false
//   1. KeyRequest = X , KeyPresent = 1 : Combo accepts the incoming key and type
   // Covered in Combo unidirectional commissioning tests
//   2. KeyRequest = X , KeyPresent = 0 : DROP Commissioning frame

//
void bidirectionalKeyRequestedKeyNotPresent()
{
  // Test for key request with key type OOB
  // Sink Set Up
  WriteGPSCommissioningModeNoResponse(1);
  WriteCommissioningExitModeNoResponse(4);
  WriteGPSSecurityLevelToNoResponse(0x07);
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  WriteGPSharedSecurityKeyTypeTo(2);  // The shared key is very importatnt for key request negotiation
  //send("sink","write 242 0x0021 0x0020 1 0x18 {00}"); // this is same as sbove except it is local write
  WriteGPSharedSecurityKeyTo("C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF");
  //WriteGPSharedSecurityKeyTo("22331664166416641664166416641655"); // Schneider's OOB KeType = 4

  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A2 FF FF FF FF 4D E3 00}"); // Channel Request with Auto commissioning = 0
  // expect Gp response with Channel Configuration                                00 00 00 00 00 00 00 00 F3 01 10
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 00 00 00 00 F3 01 10 \\]");
  networkWait(2000);
  // E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 f2 ff ff ff ff 8c 40 e5 a8 07 fe e0 02 a1 D3 2D 00 00 00}");
  //send("gpd1", "plugin green-power-test-device send-test 255 {01 08 f2 ff ff ff ff 8c 40 e5 a8 07 fe e0 02 a1 53}"); //
  networkWait(3000);
  // E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 f2 ff ff ff ff 8c 40 e5 a8 07 fe e0 02 a1 D3 2D 00 00 00}");
  // expect Gp response with Commissioning Reply
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 E5 A8 07 FE F0 19 5E E0 50 06 8E 63 22 C2 38 F0 8D 1B 9A 18 EA 9B 9E BA C3 79 A3 2E 00 00 00 \\]");
  networkWait(5000);
  // send success
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 9f ff ff ff ff 8c 18 e5 a8 07 fe 9f 02 00 00 34 bf a0 a8 b5}");

  // Expect GP Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 D7 02 E5 A8 07 FE E5 A8 02 9F 02 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]"); // radius 00 --> 5 ?
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 E5 A8 07 FE 02 00 0B 9F 02 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");// Issue radius 0 --> 5
  networkWait(5000);
  cleanUp();
}

void bidirectionalKeyNotRequestedKeyNotPresent()
{
  // Test for key request with key type OOB
  // Sink Set Up
  WriteGPSCommissioningModeNoResponse(1);
  WriteCommissioningExitModeNoResponse(4);
  WriteGPSSecurityLevelToNoResponse(0x07);
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  WriteGPSharedSecurityKeyTypeTo(2);  // The shared key is very importatnt for key request negotiation
  //send("sink","write 242 0x0021 0x0020 1 0x18 {00}"); // this is same as sbove except it is local write
  WriteGPSharedSecurityKeyTo("C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF");
  //WriteGPSharedSecurityKeyTo("22331664166416641664166416641655"); // Schneider's OOB KeType = 4

  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A2 FF FF FF FF 4D E3 00}"); // Channel Request with Auto commissioning = 0
  // expect Gp response with Channel Configuration                                00 00 00 00 00 00 00 00 F3 01 10
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 00 00 00 00 F3 01 10 \\]");
  networkWait(2000);
  // E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 f2 ff ff ff ff 8c 40 e5 a8 07 fe e0 02 81 D3 2D 00 00 00}");
  //send("gpd1", "plugin green-power-test-device send-test 255 {01 08 f2 ff ff ff ff 8c 40 e5 a8 07 fe e0 02 a1 53}"); //
  networkWait(3000);
  // E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 f2 ff ff ff ff 8c 40 e5 a8 07 fe e0 02 81 D3 2D 00 00 00}");
  // expect Gp response with Commissioning Reply
  //networkWait(5000);

  // Expect Drop
  expect("sink","DROP - GP CN : No Key Request, Bidirectional RxAfterTx = 1",5000);
  networkWait(5000);

  ReadEmptySinkTable();
  networkWait(5000);
  cleanUp();
}

void Test_MultipleGpdCommissioningRequests_Max_SinkEntry()
{
  // 1
  // Start the GPD1 upto channel configuration with autoComm = 0, just one request
  // and then two commission request with rxAfterTx=1 within 5 seconds, ( 1st one will try to que a reply and second one to pull the reply out )
  // so that he commissioning reply will try to get queued but rejected because channel config is there , so no commissioning reply on air

  // 2
  // set up 1 but commissioning req after 5 seconds of last channel request
  // the expectation is that the the commissioning reply will be seen on air.

  // 3
  // Set up 1 but with two channel requests with autoComm = 0, so that the queue is empty after the second one
  // the expectation is that the the commissioning reply will be seen on air.

  // Test for key request with key type OOB
  // Sink Set Up
  WriteGPSCommissioningModeNoResponse(1);
  WriteCommissioningExitModeNoResponse(1);
  WriteGPSSecurityLevelToNoResponse(7);
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  WriteGPSharedSecurityKeyTypeTo(2);  // The shared key is very importatnt for key request negotiation
  WriteGPSharedSecurityKeyTo("C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF");

  EnterCommissioning();
  networkWait(10000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A2 FF FF FF FF 4D E3 00}"); // Channel Request with Auto commissioning = 1
  // expect Gp Response with Channel Configuration
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 00 00 00 00 F3 01 10 \\]");
  networkWait(2000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A2 FF FF FF FF 0D E3 00}"); // Channel Request with Auto commissioning = 0
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 00 00 00 00 F3 01 10 \\]");
  networkWait(2000);

/////////////
  // GPD1 - E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 7B FF FF FF FF 8C 40 78 56 34 12 E0 02 E3 F3 BD C7 9B 22 1E 30 5D 16 F0 47 63 15 87 CC 06 30 4D 2A 8E FC 7A 00 00 00}");
  networkWait(3000);
  // GPD1 - E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 7C FF FF FF FF 8C 40 78 56 34 12 E0 02 E3 F3 BD C7 9B 22 1E 30 5D 16 F0 47 63 15 87 CC 06 30 4D 2A 8E FC 7B 00 00 00}");
  // GPD1 - expect Gp Response with Commissioning Reply
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 78 56 34 12 F0 19 5E 38 C7 AE EB F2 BC 60 A3 A3 A7 7E 2D DF D0 7B A3 B1 80 46 5A 7C 00 00 00 \\]");
  networkWait(10000);
  // GPD1 - Success
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 7D FF FF FF FF 8C 18 78 56 34 12 7D 00 00 00 75 0B E3 46 CC}");

  // GPD1 - Expect GP Pairing -- the security frame counter wil be same as that of the toogle above
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[A8 D7 02 78 56 34 12 78 56 02 7D 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(5000);
///////////////

/////////////
  // GPD2 - E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 DF FF FF FF FF 8C 40 FA 00 00 00 E0 02 E3 F3 E4 CE 6F 82 16 D7 0B 9D 1C F8 18 23 38 55 1F D0 98 D2 6D 65 DE 00 00 00}");
  networkWait(3000);
  // GPD2 - E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E0 FF FF FF FF 8C 40 FA 00 00 00 E0 02 E3 F3 E4 CE 6F 82 16 D7 0B 9D 1C F8 18 23 38 55 1F D0 98 D2 6D 65 DF 00 00 00}");
  // GPD2 - expect Gp Response with Commissioning Reply
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 FA 00 00 00 F0 19 5E E9 39 45 94 84 42 CF AB 2E 5C 5F 12 F9 17 58 D5 3C C7 04 40 E0 00 00 00 \\]");
  networkWait(10000);
  // GPD2 - Success
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E1 FF FF FF FF 8C 18 FA 00 00 00 E1 00 00 00 36 61 57 D4 28}");

  // GPD2 - Expect GP Pairing -- the security frame counter wil be same as that of the toogle above
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[A8 D7 02 FA 00 00 00 FA 00 02 E1 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(5000);
///////////////

/////////////
  // GPD3 - E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E6 FF FF FF FF 8C 40 F0 00 00 00 E0 02 E3 F3 5B 76 75 BC 08 01 57 F7 4A 45 E4 32 30 AE A4 CA 30 F5 30 A6 E5 00 00 00}");
  networkWait(3000);
  // GPD3 - E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E7 FF FF FF FF 8C 40 F0 00 00 00 E0 02 E3 F3 5B 76 75 BC 08 01 57 F7 4A 45 E4 32 30 AE A4 CA 30 F5 30 A6 E6 00 00 00}");
  // GPD1 - expect Gp Response with Commissioning Reply
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 F0 00 00 00 F0 19 5E 25 D0 CB 97 8F 78 1A 5B 79 E2 D8 25 A5 55 F7 0F 5D 2F 25 81 E7 00 00 00 \\]");
  networkWait(10000);
  // GPD3 - Success
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E9 FF FF FF FF 8C 18 F0 00 00 00 E9 00 00 00 B4 2B A8 F8 06}");

  // GPD3 - Expect GP Pairing -- the security frame counter wil be same as that of the toogle above
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[A8 D7 02 F0 00 00 00 F0 00 02 E9 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(5000);
///////////////

/////////////
  // GPD4 - E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 ED FF FF FF FF 8C 40 E6 00 00 00 E0 02 E3 F3 C5 E2 B3 6F 86 AC 9B 43 C1 7D 33 EC 77 94 44 16 3B A0 25 1F EC 00 00 00}");
  networkWait(3000);
  // GPD4 - E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 EE FF FF FF FF 8C 40 E6 00 00 00 E0 02 E3 F3 C5 E2 B3 6F 86 AC 9B 43 C1 7D 33 EC 77 94 44 16 3B A0 25 1F ED 00 00 00}");
  // GPD4 - expect Gp Response with Commissioning Reply
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 E6 00 00 00 F0 19 5E F4 5A 23 85 B9 6F BD 2F 9F 70 AF B6 82 AB 2F 1F D3 6F 49 30 EE 00 00 00 \\]");
  networkWait(10000);
  // GPD4 - Success
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 EF FF FF FF FF 8C 18 E6 00 00 00 EF 00 00 00 76 3C 1F EC 02}");

  // GPD4 - Expect GP Pairing -- the security frame counter wil be same as that of the toogle above
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[A8 D7 02 E6 00 00 00 E6 00 02 EF 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(5000);
///////////////

/////////////
  // GPD5 - E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F4 FF FF FF FF 8C 40 DC 00 00 00 E0 02 E3 F3 6A 94 16 23 D4 11 5C 95 C1 A8 60 2E 46 84 F2 C0 DE 17 10 F7 F3 00 00 00}");
  networkWait(3000);
  // GPD5 - E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F5 FF FF FF FF 8C 40 DC 00 00 00 E0 02 E3 F3 6A 94 16 23 D4 11 5C 95 C1 A8 60 2E 46 84 F2 C0 DE 17 10 F7 F4 00 00 00}");
  // GPD1 - expect Gp Response with Commissioning Reply
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 DC 00 00 00 F0 19 5E EE 33 6C 3A BC C9 FF 8E 7F 8B 8D 73 2D FC A5 0C 75 F6 DA A6 F5 00 00 00 \\]");
  networkWait(10000);
  // GPD5 - Success
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F6 FF FF FF FF 8C 18 DC 00 00 00 F6 00 00 00 C8 58 5E 54 19}");

  // GPD5 - Expect GP Pairing -- the security frame counter wil be same as that of the toogle above
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[A8 D7 02 DC 00 00 00 DC 00 02 F6 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(5000);
///////////////

/////////////
  // GPD6 - E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 FB FF FF FF FF 8C 40 D2 00 00 00 E0 02 E3 F3 D1 85 00 5B 5C 1B 23 2E 9D A4 D4 B1 32 07 6E 45 54 B0 D0 51 FA 00 00 00}");
  networkWait(3000);
  // GPD6 - E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 FC FF FF FF FF 8C 40 D2 00 00 00 E0 02 E3 F3 D1 85 00 5B 5C 1B 23 2E 9D A4 D4 B1 32 07 6E 45 54 B0 D0 51 FB 00 00 00}");
  // GPD6 - expect Gp Response with Commissioning Reply
  nexpect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 D2 00 00 00 F0 19 5E 8E A0 4C 03 BA 5A BB F4 CD 75 AA EA F8 A1 B7 D4 FB 6A 93 CA FC 00 00 00 \\]");

  //expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 D2 00 00 00 F0 19 5E 8E A0 4C 03 BA 5A BB F4 CD 75 AA EA F8 A1 B7 D4 FB 6A 93 CA FC 00 00 00 \\]");
  //networkWait(10000);
  // GPD6 - Success
  //send("gpd1", "plugin green-power-test-device send-test 255 {01 08 FD FF FF FF FF 8C 18 D2 00 00 00 FD 00 00 00 8B 80 24 F8 EC}");

  // GPD6 - Expect GP Pairing -- the security frame counter wil be same as that of the toogle above
  //expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[A8 D7 02 D2 00 00 00 D2 00 02 FD 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  //networkWait(5000);
///////////////
  networkWait(5000);
  cleanUp();

}

void Test_MultipleGpdCommissioningRequests_Max_SinkEntry_Simultaneous()
{
  // 1
  // Start the GPD1 upto channel configuration with autoComm = 0, just one request
  // and then two commission request with rxAfterTx=1 within 5 seconds, ( 1st one will try to que a reply and second one to pull the reply out )
  // so that he commissioning reply will try to get queued but rejected because channel config is there , so no commissioning reply on air

  // 2
  // set up 1 but commissioning req after 5 seconds of last channel request
  // the expectation is that the the commissioning reply will be seen on air.

  // 3
  // Set up 1 but with two channel requests with autoComm = 0, so that the queue is empty after the second one
  // the expectation is that the the commissioning reply will be seen on air.

  // Test for key request with key type OOB
  // Sink Set Up
  WriteGPSCommissioningModeNoResponse(1);
  WriteCommissioningExitModeNoResponse(1);
  WriteGPSSecurityLevelToNoResponse(7);
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  WriteGPSharedSecurityKeyTypeTo(2);  // The shared key is very importatnt for key request negotiation
  WriteGPSharedSecurityKeyTo("C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF");

  EnterCommissioning();
  networkWait(10000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A2 FF FF FF FF 4D E3 00}"); // Channel Request with Auto commissioning = 1
  // expect Gp Response with Channel Configuration
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 00 00 00 00 F3 01 10 \\]");
  networkWait(2000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A2 FF FF FF FF 0D E3 00}"); // Channel Request with Auto commissioning = 0
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 00 00 00 00 F3 01 10 \\]");
  networkWait(2000);

/////////////
  // GPD1 - E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 7B FF FF FF FF 8C 40 78 56 34 12 E0 02 E3 F3 BD C7 9B 22 1E 30 5D 16 F0 47 63 15 87 CC 06 30 4D 2A 8E FC 7A 00 00 00}");
  networkWait(3000);
  // GPD1 - E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 7C FF FF FF FF 8C 40 78 56 34 12 E0 02 E3 F3 BD C7 9B 22 1E 30 5D 16 F0 47 63 15 87 CC 06 30 4D 2A 8E FC 7B 00 00 00}");
  // GPD1 - expect Gp Response with Commissioning Reply
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 78 56 34 12 F0 19 5E 38 C7 AE EB F2 BC 60 A3 A3 A7 7E 2D DF D0 7B A3 B1 80 46 5A 7C 00 00 00 \\]");
  networkWait(10000);
  // GPD1 - Success
  //send("gpd1", "plugin green-power-test-device send-test 255 {01 08 7D FF FF FF FF 8C 18 78 56 34 12 7D 00 00 00 75 0B E3 46 CC}");

  // GPD1 - Expect GP Pairing -- the security frame counter wil be same as that of the toogle above
  //expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[A8 D7 02 78 56 34 12 78 56 02 7D 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  //networkWait(5000);
///////////////

/////////////
  // GPD2 - E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 DF FF FF FF FF 8C 40 FA 00 00 00 E0 02 E3 F3 E4 CE 6F 82 16 D7 0B 9D 1C F8 18 23 38 55 1F D0 98 D2 6D 65 DE 00 00 00}");
  networkWait(3000);
  // GPD2 - E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E0 FF FF FF FF 8C 40 FA 00 00 00 E0 02 E3 F3 E4 CE 6F 82 16 D7 0B 9D 1C F8 18 23 38 55 1F D0 98 D2 6D 65 DF 00 00 00}");
  // GPD2 - expect Gp Response with Commissioning Reply
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 FA 00 00 00 F0 19 5E E9 39 45 94 84 42 CF AB 2E 5C 5F 12 F9 17 58 D5 3C C7 04 40 E0 00 00 00 \\]");
  networkWait(10000);
  // GPD2 - Success
  //send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E1 FF FF FF FF 8C 18 FA 00 00 00 E1 00 00 00 36 61 57 D4 28}");

  // GPD2 - Expect GP Pairing -- the security frame counter wil be same as that of the toogle above
  //expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[A8 D7 02 FA 00 00 00 FA 00 02 E1 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  //networkWait(5000);
///////////////

/////////////
  // GPD3 - E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E6 FF FF FF FF 8C 40 F0 00 00 00 E0 02 E3 F3 5B 76 75 BC 08 01 57 F7 4A 45 E4 32 30 AE A4 CA 30 F5 30 A6 E5 00 00 00}");
  networkWait(3000);
  // GPD3 - E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E7 FF FF FF FF 8C 40 F0 00 00 00 E0 02 E3 F3 5B 76 75 BC 08 01 57 F7 4A 45 E4 32 30 AE A4 CA 30 F5 30 A6 E6 00 00 00}");
  // GPD1 - expect Gp Response with Commissioning Reply
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 F0 00 00 00 F0 19 5E 25 D0 CB 97 8F 78 1A 5B 79 E2 D8 25 A5 55 F7 0F 5D 2F 25 81 E7 00 00 00 \\]");
  networkWait(10000);
  // GPD3 - Success
  //send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E9 FF FF FF FF 8C 18 F0 00 00 00 E9 00 00 00 B4 2B A8 F8 06}");

  // GPD3 - Expect GP Pairing -- the security frame counter wil be same as that of the toogle above
  //expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[A8 D7 02 F0 00 00 00 F0 00 02 E9 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  //networkWait(5000);
///////////////


  // GPD4 - E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 ED FF FF FF FF 8C 40 E6 00 00 00 E0 02 E3 F3 C5 E2 B3 6F 86 AC 9B 43 C1 7D 33 EC 77 94 44 16 3B A0 25 1F EC 00 00 00}");
  networkWait(3000);
  // GPD4 - E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 EE FF FF FF FF 8C 40 E6 00 00 00 E0 02 E3 F3 C5 E2 B3 6F 86 AC 9B 43 C1 7D 33 EC 77 94 44 16 3B A0 25 1F ED 00 00 00}");
  // GPD4 - expect Gp Response with Commissioning Reply
  nexpect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 E6 00 00 00 F0 19 5E F4 5A 23 85 B9 6F BD 2F 9F 70 AF B6 82 AB 2F 1F D3 6F 49 30 EE 00 00 00 \\]");
  networkWait(10000);


  // GPD1 - Success
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 7D FF FF FF FF 8C 18 78 56 34 12 7D 00 00 00 75 0B E3 46 CC}");

  // GPD1 - Expect GP Pairing -- the security frame counter wil be same as that of the toogle above
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[A8 D7 02 78 56 34 12 78 56 02 7D 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(5000);

  // GPD2 - Success
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E1 FF FF FF FF 8C 18 FA 00 00 00 E1 00 00 00 36 61 57 D4 28}");

  // GPD2 - Expect GP Pairing -- the security frame counter wil be same as that of the toogle above
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[A8 D7 02 FA 00 00 00 FA 00 02 E1 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(10000);

  // GPD3 - Success
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 E9 FF FF FF FF 8C 18 F0 00 00 00 E9 00 00 00 B4 2B A8 F8 06}");

  // GPD3 - Expect GP Pairing -- the security frame counter wil be same as that of the toogle above
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[A8 D7 02 F0 00 00 00 F0 00 02 E9 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(10000);


/////////////
  // GPD4 - E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 ED FF FF FF FF 8C 40 E6 00 00 00 E0 02 E3 F3 C5 E2 B3 6F 86 AC 9B 43 C1 7D 33 EC 77 94 44 16 3B A0 25 1F EC 00 00 00}");
  networkWait(3000);
  // GPD4 - E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 EE FF FF FF FF 8C 40 E6 00 00 00 E0 02 E3 F3 C5 E2 B3 6F 86 AC 9B 43 C1 7D 33 EC 77 94 44 16 3B A0 25 1F ED 00 00 00}");
  // GPD4 - expect Gp Response with Commissioning Reply
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 E6 00 00 00 F0 19 5E F4 5A 23 85 B9 6F BD 2F 9F 70 AF B6 82 AB 2F 1F D3 6F 49 30 EE 00 00 00 \\]");
  networkWait(10000);
  // GPD4 - Success
  //send("gpd1", "plugin green-power-test-device send-test 255 {01 08 EF FF FF FF FF 8C 18 E6 00 00 00 EF 00 00 00 76 3C 1F EC 02}");

  // GPD4 - Expect GP Pairing -- the security frame counter wil be same as that of the toogle above
  //expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[A8 D7 02 E6 00 00 00 E6 00 02 EF 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  //networkWait(5000);
///////////////

/////////////
  // GPD5 - E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F4 FF FF FF FF 8C 40 DC 00 00 00 E0 02 E3 F3 6A 94 16 23 D4 11 5C 95 C1 A8 60 2E 46 84 F2 C0 DE 17 10 F7 F3 00 00 00}");
  networkWait(3000);
  // GPD5 - E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F5 FF FF FF FF 8C 40 DC 00 00 00 E0 02 E3 F3 6A 94 16 23 D4 11 5C 95 C1 A8 60 2E 46 84 F2 C0 DE 17 10 F7 F4 00 00 00}");
  // GPD1 - expect Gp Response with Commissioning Reply
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 DC 00 00 00 F0 19 5E EE 33 6C 3A BC C9 FF 8E 7F 8B 8D 73 2D FC A5 0C 75 F6 DA A6 F5 00 00 00 \\]");
  networkWait(10000);
  // GPD5 - Success
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 F6 FF FF FF FF 8C 18 DC 00 00 00 F6 00 00 00 C8 58 5E 54 19}");

  // GPD5 - Expect GP Pairing -- the security frame counter wil be same as that of the toogle above
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[A8 D7 02 DC 00 00 00 DC 00 02 F6 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(5000);
///////////////

/////////////
  // GPD6 - E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 FB FF FF FF FF 8C 40 D2 00 00 00 E0 02 E3 F3 D1 85 00 5B 5C 1B 23 2E 9D A4 D4 B1 32 07 6E 45 54 B0 D0 51 FA 00 00 00}");
  networkWait(3000);
  // GPD6 - E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 FC FF FF FF FF 8C 40 D2 00 00 00 E0 02 E3 F3 D1 85 00 5B 5C 1B 23 2E 9D A4 D4 B1 32 07 6E 45 54 B0 D0 51 FB 00 00 00}");
  // GPD6 - expect Gp Response with Commissioning Reply
  nexpect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 D2 00 00 00 F0 19 5E 8E A0 4C 03 BA 5A BB F4 CD 75 AA EA F8 A1 B7 D4 FB 6A 93 CA FC 00 00 00 \\]");

  //expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 D2 00 00 00 F0 19 5E 8E A0 4C 03 BA 5A BB F4 CD 75 AA EA F8 A1 B7 D4 FB 6A 93 CA FC 00 00 00 \\]");
  //networkWait(10000);
  // GPD6 - Success
  //send("gpd1", "plugin green-power-test-device send-test 255 {01 08 FD FF FF FF FF 8C 18 D2 00 00 00 FD 00 00 00 8B 80 24 F8 EC}");

  // GPD6 - Expect GP Pairing -- the security frame counter wil be same as that of the toogle above
  //expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[A8 D7 02 D2 00 00 00 D2 00 02 FD 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  //networkWait(5000);
///////////////


  // GPD4 - Success
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 EF FF FF FF FF 8C 18 E6 00 00 00 EF 00 00 00 76 3C 1F EC 02}");

  // GPD4 - Expect GP Pairing -- the security frame counter wil be same as that of the toogle above
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[A8 D7 02 E6 00 00 00 E6 00 02 EF 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]");
  networkWait(5000);

  cleanUp();
}


void Test_ValidEncryptedToogleCommandAsSuccess()
{
  // Test for key request with key type OOB
  // Sink Set Up
  WriteGPSCommissioningModeNoResponse(1);
  WriteCommissioningExitModeNoResponse(4);
  WriteGPSSecurityLevelToNoResponse(0x07);
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  WriteGPSharedSecurityKeyTypeTo(0);  // The shared key is very importatnt for key request negotiation
  WriteGPSharedSecurityKeyTo("00112233445566778899AABBCCDDEEFF");

  EnterCommissioning();
  networkWait(10000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A2 FF FF FF FF 4D E3 00}"); // Channel Request with Auto commissioning = 1
  // expect Gp Response with Channel Configuration
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 00 00 00 00 F3 01 10 \\]");
  networkWait(2000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A2 FF FF FF FF 0D E3 00}"); // Channel Request with Auto commissioning = 0
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 00 00 00 00 F3 01 10 \\]");
  networkWait(2000);

  // E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 90 FF FF FF FF 8C 40 11 11 11 11 E0 02 E3 F3 84 11 53 60 32 5E 6E 15 97 80 CB DE 6C BF 90 81 2A F4 C4 50 8F 3B 00 00}");
  networkWait(3000);
  // E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 91 FF FF FF FF 8C 40 11 11 11 11 E0 02 E3 F3 84 11 53 60 32 5E 6E 15 97 80 CB DE 6C BF 90 81 2A F4 C4 50 90 3B 00 00}");
  // expect Gp Response with Commissioning Reply
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 11 11 11 11 F0 01 98 \\]");
  networkWait(10000);
  // Instead of sending success (the following commented frame, assume this frame is lost and GPD is sending toggle instead
  //send("gpd1", "plugin green-power-test-device send-test 255 {01 08 92 FF FF FF FF 8C 38 11 11 11 11 92 3B 00 00 37 62 0F FA BA}"); // <-----This is protected success
  // Send an operational protected toggle command.
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 DD FF FF FF FF 8C 78 11 11 11 11 DD 3B 00 00 33 B2 71 CD 49}"); // <-----This is a protected toggle

  // Expect GP Pairing -- the security frame counter wil be same as that of the toogle above
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[A8 E7 02 11 11 11 11 11 11 02 DD 3B 00 00 00 11 22 33 44 55 66 77 88 99 AA BB CC DD EE FF 00 \\]"); // radius 00 --> 5 ?
  networkWait(5000);

  // Read out sink table to confirm pairing
  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 E8 02 11 11 11 11 02 00 13 DD 3B 00 00 00 11 22 33 44 55 66 77 88 99 AA BB CC DD EE FF \\]");// Issue radius 0 --> 5
  networkWait(5000);
  cleanUp();
}

//4.4.4.3
void Test_4_4_4_3()
{
  // Test for key request with key type Derived Individual Key in the GP Shared Attribute , App Id = 0
  // Sink Set Up
  WriteGPSCommissioningModeNoResponse(1);  // Groupcast Forwarding of the Gp Commissioning Notification
  WriteCommissioningExitModeNoResponse(2); // Exit on First Pairing
  WriteGPSSecurityLevelToNoResponse(0x07); // Sink Security Level = 3 and Protection with gpLink Key protection for Key exchange.
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  WriteGPSharedSecurityKeyTypeTo(7);       // gpSharedSecurityKeyType attribute = Individual Derived Key(7)
  WriteGPSharedSecurityKeyTo("C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF"); // Write the Shared Group Key into the gpSharedSecurityKey attribute.

  EnterCommissioning();
  networkWait(1000);
   // Channel Request with Auto commissioning = 1
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 01 FF FF FF FF 4D E3 00}");
  networkWait(1000);
   // Channel Request with Auto commissioning = 0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 01 FF FF FF FF 0D E3 00}");
  // expect Gp response with Channel Configuration
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 00 00 00 00 F3 01 10 \\]");
  networkWait(2000);
  // E0 with RxAfterTx = 1 to trigger a commissioning reply
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 04 FF FF FF FF 8C 40 4C 6F 75 72 E0 00 E3 F3 4F 38 2E 6F FC 3F F6 5B F2 CF 7C 0B 4A 77 7D D7 14 55 6D 95 04 00 00 00}");
  // expect Gp response with Commissioning Reply
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 4C 6F 75 72 F0 19 FE 23 93 C3 E0 17 4F B0 BA B1 9E 54 4A F7 5F 19 9A 0D 1A 45 B0 05 00 00 00 \\]");
  networkWait(3000);
  // E0 with RxAfterTx = 1 to pull the commissioning reply that isd in the DGp send queue
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 05 FF FF FF FF 8C 40 4C 6F 75 72 E0 00 E3 F3 4F 38 2E 6F FC 3F F6 5B F2 CF 7C 0B 4A 77 7D D7 14 55 6D 95 05 00 00 00}");
  networkWait(15000);

  // send success
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 06 FF FF FF FF 8C 38 4C 6F 75 72 06 00 00 00 2B 7E 91 22 B6}");

  // Expect GP Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[A8 FF 02 4C 6F 75 72 4C 6F 00 06 00 00 00 D9 CB 19 3C 94 31 2C 8B 97 25 0C 4D 06 AD 7B AA 00 \\]");
  networkWait(5000);
  ExitCommissioning();
  networkWait(5000);
  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 E8 02 4C 6F 75 72 00 00 1F 06 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  networkWait(15000);
  // send press/release commands with the new keys
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 09 FF FF FF FF 8C 78 4C 6F 75 72 09 00 00 00 C7 BC 15 55 FB }");

  // check the execution of the command
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 00 payload\\[\\]");

  networkWait(5000);
  cleanUp();
}

//4.4.4.6
void Test_4_4_4_6()
{
  // Test for key request with key type Derived Individual Key in the GP Shared Attribute , App Id = 2
  // Sink Set Up
  WriteGPSCommissioningModeNoResponse(1);  // Groupcast Forwarding of the Gp Commissioning Notification
  WriteCommissioningExitModeNoResponse(2); // Exit on First Pairing
  WriteGPSSecurityLevelToNoResponse(0x07); // Sink Security Level = 3 and Protection with gpLink Key protection for Key exchange.
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  WriteGPSharedSecurityKeyTypeTo(7);       // gpSharedSecurityKeyType attribute = Individual Derived Key(7)
  WriteGPSharedSecurityKeyTo("C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF"); // Write the Shared Group Key into the gpSharedSecurityKey attribute.

  EnterCommissioning();
  networkWait(1000);
   // Channel Request with Auto commissioning = 1
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 01 FF FF FF FF 4D E3 00}"); // Channel Request with Auto commissioning = 1
  networkWait(1000);
   // Channel Request with Auto commissioning = 0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 01 FF FF FF FF 0D E3 00}"); // Channel Request with Auto commissioning = 0
  // expect Gp response with Channel Configuration
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 00 00 00 00 F3 01 10 \\]");
  networkWait(2000);
  // E0 with RxAfterTx = 1 to trigger a commissioning reply
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 04 FF FF FF FF 4C 6F 75 72 FF FF FF FF 8C 42 0A E0 02 E3 F3 EC A1 F7 8D 7D 73 D5 E3 76 48 84 75 2F 52 7F 31 C8 88 5B 95 04 00 00 00}");
  // expect Gp response with Commissioning Reply
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[02 00 00 00 4C 6F 75 72 FF FF FF FF 0A F0 19 FE F6 FC D6 DE 8A 33 7E BF 49 00 07 BE 17 14 C0 2D 7A D2 EE C1 05 00 00 00 \\]");
  networkWait(3000);
  // E0 with RxAfterTx = 1 to pull the commissioning reply that isd in the DGp send queue
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 05 FF FF FF FF 4C 6F 75 72 FF FF FF FF 8C 42 0A E0 02 E3 F3 EC A1 F7 8D 7D 73 D5 E3 76 48 84 75 2F 52 7F 31 C8 88 5B 95 05 00 00 00}");
  networkWait(15000);

  // send success
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 06 FF FF FF FF 4C 6F 75 72 FF FF FF FF 8C 3A 0A 06 00 00 00 BE 09 C1 A3 C0}");

  // Expect GP Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[AA FF 02 4C 6F 75 72 FF FF FF FF 0A 4C 6F 02 06 00 00 00 C8 4A 0F CC 41 17 81 B7 86 D7 A4 AE 6C 3B DC A0 00 \\]");
  networkWait(5000);
  ExitCommissioning();
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 22 00 EA 02 4C 6F 75 72 FF FF FF FF 0A 02 00 1F 06 00 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");

  networkWait(15000);
  // send press/release commands with the new keys
  send("gpd1", "plugin green-power-test-device send-test 255 {41 C8 09 FF FF FF FF 4C 6F 75 72 FF FF FF FF 8C 7A 0A 09 00 00 00 37 78 1E D8 B0}");

  // check the execution of the command
  expect("sink",".*clus 0x0006 \\(On/off\\) FC 01 seq .. cmd 00 payload\\[\\]");

  networkWait(5000);
  cleanUp();
}

//Test_CommissioningWindowExtension
void Test_CommissioningWindowExtension()
{
  // Test for key request with key type OOB
  // Sink Set Up
  WriteGPSCommissioningModeNoResponse(1);
  WriteCommissioningExitModeNoResponse(1); // Exit on commissioning Window expiry, The expiry window is from the attribute
  WriteGPSSecurityLevelToNoResponse(0x07);
  ReadEmptySinkTable();
  GpTranslationRequestIndex0Empty();
  WriteGPSharedSecurityKeyTypeTo(2);
  WriteGPSharedSecurityKeyTo("C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF");

  EnterCommissioning();
  networkWait(1000);
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 A2 FF FF FF FF 4D E3 00}"); // Channel Request with Auto commissioning = 0
  // expect Gp response with Channel Configuration                                00 00 00 00 00 00 00 00 F3 01 10
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 00 00 00 00 F3 01 10 \\]");
  networkWait(2000);
  // E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 28 ff ff ff ff 8c 40 e5 a8 07 fe e0 02 a5 f3 79 06 2b 8e 0f 78 07 bc 53 b6 10 ce a1 3e cc cc ed 0b 11 ab 28 00 00 00 01 5e 10 64 16 01 f6 04 00 00 01 00 03 00 05 0b}");
  networkWait(3000);
  // E0
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 29 ff ff ff ff 8c 40 e5 a8 07 fe e0 02 a5 f3 79 06 2b 8e 0f 78 07 bc 53 b6 10 ce a1 3e cc cc ed 0b 11 ab 29 00 00 00 01 5e 10 64 16 01 f6 04 00 00 01 00 03 00 05 0b}");
  // expect Gp response with Commissioning Reply
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 09 seq .. cmd 06 payload\\[00 00 00 00 E5 A8 07 FE F0 19 5E 08 C9 F6 1B 5C 15 A6 33 CC BC 7E E9 CF 71 2C 53 87 84 6F 8D 2A 00 00 00 \\]");
  networkWait(5000);

  networkWait(200000);
  send("sink", "plugin green-power-server extend-comm 200");
  networkWait(100000);
  // send success
  send("gpd1", "plugin green-power-test-device send-test 255 {01 08 9f ff ff ff ff 8c 18 e5 a8 07 fe 9f 02 00 00 34 bf a0 a8 b5}");

  // Expect GP Pairing
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 19 seq .. cmd 01 payload\\[28 D7 02 E5 A8 07 FE E5 A8 02 9F 02 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF 00 \\]"); // radius 00 --> 5 ?
  networkWait(5000);

  ReadSinkTable();
  expect("THProxy",".*clus 0x0021 \\(Green Power\\) FC 08 seq .. cmd 01 payload\\[01 00 00 43 1D 00 28 02 E5 A8 07 FE 02 00 0B 9F 02 00 00 C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF \\]");// Issue radius 0 --> 5
  networkWait(5000);
  cleanUp();
}

// to debug specific test, put the corresponding function call up here and uncomment the exit()
//Test_MultipleGpdCommissioningRequests_Max_SinkEntry();
//Test_MultipleGpdCommissioningRequests_Max_SinkEntry_Simultaneous();
//exit();

Test_removeGpdEndpoint();
cleanUp();
// exit()
// Jira Tickets related Tests or Development tests
cleanUp();
Test_GenericSwitchComands();
cleanUp();
Test_0xAF();
cleanUp();
Test_0xA6();
cleanUp();
Test_SensorIdWithOutClusterList();
cleanUp();
Test_MultiClusterAttributeReporting();
cleanUp();

networkWait(200000);
// Run Gp Combo Compliance test cases
cleanUp();
Test_4_1_1();
Test_4_1_2_2();
cleanUp();
Test_4_1_2_3();
Test_4_1_3();
Test_4_1_4();

Test_4_2_2_1();
Test_4_2_2_2();
Test_4_2_3_2();
Test_4_2_3_3();

Test_4_3_1();
Test_4_3_2();
Test_4_3_3_1();
Test_4_3_4_1();
Test_4_3_4_3();
Test_4_3_4_4();
Test_4_3_4_5();
Test_4_3_6();
Test_4_3_8_2();
cleanUp();
Test_4_3_8_3();
cleanUp();
Test_4_3_9_2();
Test_4_3_9_3();
cleanUp();
Test_4_3_10();

Test_4_4_1_7_step_1_2();
Test_4_4_1_7_step_3_5();
Test_4_4_1_7_step_6();
Test_4_4_1_7_step_8_10_NotImmediateResponse();
//Test_4_4_1_7_step_8_10_ImmediateResponse(); // Thsi si not the case for our sink because the Proxy uses the immediate response back
Test_4_4_1_8();
Test_4_4_1_11();
cleanUp();
Test_4_4_1_12_Step1_3_6();
Test_4_4_1_12_Step7_8();
Test_4_4_1_12_Step9_14();
Test_4_4_1_12_Step2_1B();
//Test_4_4_1_12_Step2_2B(); // The 2Byte and 4 Byte tests need the attribute that will be 2 byte or 4 byte long - the procedure is exactly copy of 1B test
//Test_4_4_1_12_Step2_4B(); // The 2Byte and 4 Byte tests need the attribute that will be 2 byte or 4 byte long - the procedure is exactly copy of 1B test
cleanUp();
Test_4_4_1_13();
Test_4_4_1_14_Step1();
Test_4_4_1_14_Step2();
Test_4_4_1_14_Step3();
Test_4_4_1_14_Step4();
cleanUp();

Test_4_4_1_14_Step5();
Test_4_4_1_14_Step6();
Test_4_4_1_15();
cleanUp();

Test_4_4_1_16();
Test_4_4_1_17();
Test_4_4_1_18();
Test_4_4_1_19();
Test_4_4_1_20();
Test_4_4_1_21();
cleanUp();

Test_4_4_2_7_step_1_3();
Test_4_4_2_7_step_4A();
Test_4_4_2_7_step_4B();
Test_4_4_2_7_step_5_6();
cleanUp();

Test_4_4_2_8();
cleanUp();

Test_4_4_2_9();

cleanUp();

Test_4_4_2_10();
Test_4_4_2_11();
cleanUp();
Test_4_4_2_12();
cleanUp();

Test_4_4_2_13();
Test_4_4_2_14();
Test_4_4_2_15();
Test_4_4_2_16();

Test_4_4_2_17();
Test_4_4_2_18();
cleanUp();


Test_4_4_3();
cleanUp();
Test_4_4_3_Step10_DGroup();
cleanUp();

Test_4_4_3_Step10_LUcast();
cleanUp();

EnterCommissioning();
networkWait(3000);
ExitCommissioning();
networkWait(3000);
Test_4_4_3_2();
Test_4_4_3_3_step_1_3();
Test_4_4_3_3_step_4_7();
Test_4_4_3_3_step_8();
Test_4_4_3_3_step_9();
cleanUp();

Test_4_4_3_4_step_1();
Test_4_4_3_4_step_2();
Test_4_4_3_4_step_3();
Test_4_4_3_5();
Test_4_4_3_6();
Test_4_4_5_1();
Test_4_4_5_2();
cleanUp();


Test_4_4_5_3();
cleanUp();

Test_4_4_5_4();
cleanUp();

Test_4_4_5_5();
cleanUp();

Test_4_4_6();
Test_4_4_7_1();
Test_4_4_7_2();
cleanUp();

Test_4_4_7_3();
Test_4_5_2_2();
Test_4_5_2_3();
cleanUp();
Test_4_7_3();
//Test_4_7_8(); //This test is for Illuminance sensor Id = 0x11 and cluster (0x0400) - with exact test steps as Test_4_7_3, hence skipped
//Test_4_7_9(); //This test is for Illuminance sensor Id = 0x12 and cluster (0x0406) - with exact test steps as Test_4_7_3, hence skipped
Test_4_7_6();
Test_4_7_7_1();
cleanUp();

Test_4_7_7_2();
Test_4_7_11();
Test_4_7_12();
cleanUp();

Test_4_7_14_step1_2();
Test_4_7_14_step3();
Test_4_7_14_step4();
cleanUp();

Test_4_7_15_1B_2B(); // 4.7.15 1 B and 2B are clubbed in this, the thrid test of Level Control is also similar to this.
//Test_4_7_15_2B(); // Same as above for 2 byte
//Test_4_7_15_LevelControl(); // Same as above with level control
cleanUp();

Test_NoDuplicateEntries();

cleanUp();
schneiderTest2_4_3_7();
schneiderTest2_4_3_7_gpsSharedSecurityKey();
schneiderTest2_4_3_8();
schneiderTest2_4_3_8_gpsSharedSecurityKey();
bidirectionalKeyRequestedKeyNotPresent();
bidirectionalKeyNotRequestedKeyNotPresent();
cleanUp();

// Test : Success GPDF is missed and a protected operational command is issued - that should announce teh pairing
Test_ValidEncryptedToogleCommandAsSuccess();
Test_MultipleGpdCommissioningRequests_Max_SinkEntry();
Test_MultipleGpdCommissioningRequests_Max_SinkEntry_Simultaneous();
// Test extenstion of the Commissioning Window by calling the
Test_CommissioningWindowExtension();
// The emberHmacAesHash is not available in plugin code in Host configuration
// Hence the key derivations based on gpSharedKey and gpSharedKeyType attributes are not available.
// The test are disabled untill then.
if (runArgument.runUsingHostApps) {
  std.print("Test 4.4.4.3 and 4.4.4.6 is disabled untill availability of HMAC API emberHmacAesHash\n");
  cleanUp();
  return;
}
Test_4_4_4_3();
Test_4_4_4_6();
cleanUp();
