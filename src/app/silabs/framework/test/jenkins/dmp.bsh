cd(dirname(pathToFile(getSourceFileInfo()).getAbsolutePath()));
source("util.bsh");

String dmp1 = null;
String dmp2 = null;
String pro_compliance = null;

ArrayList args = new ArrayList();
if (bsh.args != void) {
  args.addAll(Arrays.asList(bsh.args));
}

for (int i=0; i<args.size(); i++) {
  String arg = args.get(i);
  if (arg.contains("-dmp1")) {
    dmp1 = args.get(++i);
  }
  if (arg.contains("-dmp2")) {
    dmp2 = args.get(++i);
  }
  if (arg.contains("-pro_compliance")) {
    pro_compliance = args.get(++i);
  }
}

if (dmp1 == null) {
  System.out.println("dmp1 IP address not set!");
  System.exit(-1);
}

if (dmp2 == null) {
  System.out.println("dmp2 IP address not set!");
  System.exit(-1);
}

if (pro_compliance == null) {
  System.out.println("pro_compliance IP address not set!");
  System.exit(-1);
}

String[] nodes = new String[] {
  dmp1, dmp2, pro_compliance,
};

// ZigBee radio parameters
String PAN_ID = "0xBAAF";
String CHANNEL = "24";
String TX_POWER = "-1";

int ZIGBEE_TX_TEST_PACKET_COUNT = 1000;
int WAIT_TIME_4S = 4000;

String dmp1_zigbeeId = "0xFFFF";
String dmp2_zigbeeId = "0xFFFF";
String pro_compliance_zigbeeId = "0x0000";

String dmp1_bleAddr;
String dmp2_bleAddr;

void testZigBeeCommunication(int packetCount, boolean log, String logPrefix)
{
  String match;
  int timeout = 2000 + packetCount*25; // ~25ms per packet

  sleep(1000);

  // Test communication dmp1 -> pro_compliance
  expect(dmp1, "custom start-z 70 " + packetCount + " 0 3 " + pro_compliance_zigbeeId + " 0x00", "ZigBee TX test started", timeout);
  match = expect(dmp1, "", "Throughput:", timeout);   
  if (log) {
    logToFile(logPrefix + " - dmp1 -> pro_compliance:");
    logToFile(match);
  }
  
  // Test communication pro_compliance -> dmp1
  match = expect(pro_compliance, "send_packets 70 " + packetCount + " 0 3 0 " + dmp1_zigbeeId + " 0 0x00", "Throughput:", timeout);
  if (log) {
    logToFile(logPrefix + " - pro_compliance -> dmp1:");
    logToFile(match);
  }

  // Test communication dmp2 -> pro_compliance
  expect(dmp2, "custom start-z 70 " + packetCount + " 0 3 " + pro_compliance_zigbeeId + " 0x00", "ZigBee TX test started", timeout);
  match = expect(dmp2, "", "Throughput:", timeout);   
  if (log) {
    logToFile(logPrefix + " - dmp2 -> pro_compliance:");
    logToFile(match);
  }
  
  // Test communication pro_compliance -> dmp2
  match = expect(pro_compliance, "send_packets 70 " + packetCount + " 0 3 0 " + dmp2_zigbeeId + " 0 0x00", "Throughput:", timeout);
  if (log) {
    logToFile(logPrefix + " - pro_compliance -> dmp2:");
    logToFile(match);
  }

  // Test communication dmp1 -> dmp2
  expect(dmp1, "custom start-z 70 " + packetCount + " 0 3 " + dmp2_zigbeeId + " 0x00", "ZigBee TX test started", timeout);
  match = expect(dmp1, "", "Throughput:", timeout);   
  if (log) {
    logToFile(logPrefix + " - dmp1 -> dmp2:");
    logToFile(match);
  }

  // Test communication dmp2 -> dmp1
  expect(dmp2, "custom start-z 70 " + packetCount + " 0 3 " + dmp1_zigbeeId + " 0x00", "ZigBee TX test started", timeout);
  match = expect(dmp2, "", "Throughput:", timeout);   
  if (log) {
    logToFile(logPrefix + " - dmp2 -> dmp1:");
    logToFile(match);
  }

  sleep(1000);
}

initNetwork(nodes);

//------------------------------------------------------------------------------
// The actual test

// Reset dmp1
expect(dmp1, "net leave", "(?:EMBER_NETWORK_DOWN|leave 0x70)");
expect(dmp1, "reset", "Reset info");

// Reset dmp2
expect(dmp2, "net leave", "(?:EMBER_NETWORK_DOWN|leave 0x70)");
expect(dmp2, "reset", "Reset info");

// Reset pro_compliance
expect(pro_compliance, "reboot", "ZigBee Pro Compliance Test App.*offline");

// Form network on pro_compliance
expect(pro_compliance, "set_security 0x0304 {5A6967426565416C6C69616E63653039} {AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA} 0", "Security set");
send(pro_compliance, "tc_policy 0");
expect(pro_compliance, "form " + CHANNEL + " " + PAN_ID +  " " + TX_POWER, "Stack up id:0x0000");
expect(pro_compliance, "permit_joins 0xFF", "permitJoining.*0x00");
send(pro_compliance, "many_to_one 1 1");


// dmp1 fix BLE connection parameters, we do this in order to make the throughput test be independent
// of any default value changes, so that we don't false trigger on such updates
// See EMZIGBEE-2487 for more info.
expect(dmp1, "plugin ble gap set-conn-params 0x00C8 0x00C8 0x0000 0x0064", "success");
expect(dmp2, "plugin ble gap set-conn-params 0x00C8 0x00C8 0x0000 0x0064", "success");

// dmp1 joins (try multiple times)
expectX(dmp1, "net join " + CHANNEL + " " + TX_POWER + " " + PAN_ID, "EMBER_NETWORK_UP");

// dmp2 joins (try multiple times)
expectX(dmp2, "net join " + CHANNEL + " " + TX_POWER + " " + PAN_ID, "EMBER_NETWORK_UP");

// Retrieve dmp1 and dmp2 ZigBee short IDs
dmp1_zigbeeId = getZigbeeShortId(dmp1);
dmp2_zigbeeId = getZigbeeShortId(dmp2);

// Retrieve dmp1 and dmp2 BLE addresses
dmp1_bleAddr = getBleAddress(dmp1);
dmp2_bleAddr = getBleAddress(dmp2);

// Disable printing RX messages.
expect(dmp1, "option print-rx-msgs disable", "disabled print");
expect(dmp2, "option print-rx-msgs disable", "disabled print");
expect(pro_compliance, "note_incoming 0", "Note incoming disabled");
expect(pro_compliance, "enable_rx_print 0", "Print RX messages disabled");

// Initial traffic exchange to make sure MMTORRs are sent around.
testZigBeeCommunication(10, false, null);

// Test ZigBee communication with no BLE activity
testZigBeeCommunication(ZIGBEE_TX_TEST_PACKET_COUNT, true, "no BLE activity");

// dmp1 starts BLE advertising
expect(dmp1, "plugin ble gap set-mode 2 2", "success");

// Test ZigBee communication with dmp1 BLE advertising
testZigBeeCommunication(ZIGBEE_TX_TEST_PACKET_COUNT, true, "BLE advertising (dmp1)");

// dmp2 establishes a BLE connection with dmp1
expect(dmp2, "plugin ble gap conn-open {" + dmp1_bleAddr + "} 0", "BLE connection opened");

// Check the BLE connection is open on both sides
expect(dmp1, "custom print-ble-connections", "remote address.*" + dmp2_bleAddr, WAIT_TIME_4S);
expect(dmp2, "custom print-ble-connections", "remote address.*" + dmp1_bleAddr, WAIT_TIME_4S);

// Test ZigBee communication while a BLE connection is open
testZigBeeCommunication(ZIGBEE_TX_TEST_PACKET_COUNT, true, "BLE connection");

// Check the BLE connection is open on both sides
expect(dmp1, "custom print-ble-connections", "remote address.*" + dmp2_bleAddr, WAIT_TIME_4S);
expect(dmp2, "custom print-ble-connections", "remote address.*" + dmp1_bleAddr, WAIT_TIME_4S);

// dmp1 and dmp2 nodes start advertising
expect(dmp1, "plugin ble gap set-mode 2 2", "success");
expect(dmp2, "plugin ble gap set-mode 2 2", "success");

// Test ZigBee communication while a BLE connection is open and both DMP nodes
// are advertising
testZigBeeCommunication(ZIGBEE_TX_TEST_PACKET_COUNT, true, "BLE connection and BLE advertisement");

// Check the BLE connection is open on both sides
expect(dmp1, "custom print-ble-connections", "remote address.*" + dmp2_bleAddr, WAIT_TIME_4S);
expect(dmp2, "custom print-ble-connections", "remote address.*" + dmp1_bleAddr, WAIT_TIME_4S);

// Finishing up
// Leave and reset all devices just to make sure

// Reset dmp1
expect(dmp1, "net leave", "(?:EMBER_NETWORK_DOWN|leave 0x70)", WAIT_TIME_4S, false);
expect(dmp1, "reset", "Reset info");

// Reset dmp2
expect(dmp2, "net leave", "(?:EMBER_NETWORK_DOWN|leave 0x70)", WAIT_TIME_4S, false);
expect(dmp2, "reset", "Reset info");

// Reset pro_compliance
expect(pro_compliance, "reboot", "ZigBee Pro Compliance Test App.*offline");

System.exit(0);
