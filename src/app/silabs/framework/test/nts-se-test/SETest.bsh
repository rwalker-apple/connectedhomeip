
cd(dirname(pathToFile(getSourceFileInfo()).getAbsolutePath()));
source("util.bsh");
source("../util.bsh");
String tempDir = "tmp/nts-se-test";
exec("mkdir -p " + tempDir);

// ***************************************************
// GLOBAL STUFF
// ***************************************************
String NTS_Version = "v1.130 - Host version v16";
String dut = "10.0.0.103";
String channel = "0x0D";
String power = "1";
String panId = "0xDEAF";
String interPanId = "0xBEEF";

// ***************************************************
// Pull in all scripts in test directory, except the framework and the utility.
// ***************************************************
String extension = ".bsh";
List exclude = Arrays.asList(new String[] {"SETest", "util"});
ArrayList tests = new ArrayList();
String[] files = new File(bsh.cwd).list();
Arrays.sort(files);
for (String file : files) {
  if (file.endsWith(extension)) {
    file = file.substring(0, file.length() - extension.length());
    if (!exclude.contains(file)) {
      tests.add(file);
    }
  }
}

// Populate a list with the command line arguments.
ArrayList args = new ArrayList();
if (bsh.args != void) {
  args.addAll(Arrays.asList(bsh.args));
}
// One or more "-f" flags will turn on forming/joining at the beginning of the test.
boolean formNetwork = args.contains("-f");
while (args.contains("-f")) {
  args.remove("-f");
}
// Replace any "-a" flags in the argument list with a list of all test names.
if (args.contains("-a")) {
  args.addAll(tests);
}
while (args.contains("-a")) {
  args.remove("-a");
}

// At least one test is required for execution.
if (args.size() == 0) {
  std.println("usage: SETest.bsh [-d] {-a|test}...");
  std.println("  -f    Perform form/join at the beginning of the test");
  std.println("  -a    run all tests in suite");
  std.println("  test  run the named test");
  for (String test : tests) {
    std.println("          " + test);
  }
  System.exit(-1);
}

printTestMessage("NTS Test - version " + NTS_Version, true);

String currentTest;
String currentTestPath;
String currentRadioTrace;
String currentOutputFile;
PrintStream outputFile = dbg;

// Execute each test individually.
ArrayList errors = new ArrayList();
for (String arg : args) {
  try {
    currentTest = arg;
    currentTestPath = tempDir + "/" + currentTest;
    exec("mkdir -p " + currentTestPath);

    currentOutputFile = currentTestPath + "/output.txt";
    currentRadioTrace = currentTestPath + "/radio-trace.log";

    // Print to file
    outputFile = new PrintStream(currentOutputFile);
    System.setErr(outputFile);
    std.print("[Testing application framework: " + arg + " ");
    run(arg + extension, this);
    std.println(" done]");
    outputFile.println("\n\ndone");
    outputFile.flush();
    outputFile.close();

  } catch (Exception e) {
    std.println();
    String errorMessage = e.getMessage();
    if (e instanceof bsh.TargetError) {
      errorMessage = e.getTarget().getMessage();
    } else if (e instanceof bsh.ParseException) {
      errorMessage = e.getMessage() + " in " + e.getErrorSourceFile();
    } else if (e instanceof bsh.EvalError) {
      errorMessage = e.getMessage() + " in " + e.getErrorSourceFile() + " at " + e.getErrorLineNumber();
    }

    // Print to file
    outputFile.println(errorMessage);
    std.println(errorMessage);
    std.println("  Radio-trace file: " + currentRadioTrace);

    std.println("  Full output:      " + currentOutputFile);
    errors.add(arg);
  }
}

if (!errors.isEmpty()) {
  std.println("\nFailed tests: " + errors);
  System.exit(-1);
}

