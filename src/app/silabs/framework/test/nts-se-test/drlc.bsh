
// ***************************************************
// TEST SCRIPT
// ***************************************************
cd(dirname(pathToFile(getSourceFileInfo()).getAbsolutePath()));
source("util.bsh");

System.setOut(System.err);

String appName = "se-esp-afv2";

String dut = runArgument.dut;
String[] nodes = new String[] {
  dut,
};

String sourceEndpoint = "1"; // Default value of Ember App Framework.
String destEndpoint = "10"; // Default value of the Test Harness
String thAddr = "0x0000"; //TH is coordinator here.

boolean dutDrlcServerInfoSetup()
{
  printTestMessage("Drlc server Test Harness setup", true);
  thAddr = getTHShortID();
  if (thAddr == null) {
    print("TH id can not be loaded, run the test with the -f option.");
    return false;
  }

  tymeSync(dut, thAddr, sourceEndpoint, destEndpoint);

  //print("In the DRLC tab set the class&UEG value (\"Set LCD Class & UEG\")");
  //print("- You can read the device class and the UEG attributes using the commands in the DRLC tab (DRLC Server).");
  //print("- The two values should be combined together (4 digits for the device class + 2 digits for the UEG)");
  pause("Press ENTER when done...");
  return true;
}

TestNetwork t = new TestNetwork();
setTestNetwork(t);
setOutputFile(runArgument.outputFile);
setOutputFilename(runArgument.currentOutputFile);

for (int i = 0; i < nodes.length; i++) {
  t.add(nodes[i]);
}

t.connect(4901);
t.echo(true);

printTestMessage("DRLC - SERVER", true);
print("NOTE: These tests assume that the sample app " + appName + " is running on the DUT");

if (runArgument.formNetwork) {
  networkSetupDutForm(nodes,
                      dut,
                      runArgument.channel,
                      runArgument.power,
                      runArgument.panId);
  dutNetworkInfoSetup(dut);
}

if (!dutDrlcServerInfoSetup())
  return;

// TODO: add tests

