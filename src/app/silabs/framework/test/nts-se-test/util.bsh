import com.ember.peek.*;
import java.util.*;
import com.ember.peek.TestNetwork;

TestNetwork t;
String dut;
String[] nodes;

String SEProfileId = "0x0109";
String HAProfileId = "0x0104";

String testDelimiter = "***TEST***";
String outputFilename = null;
PrintStream outputFile = null;

String configurationFile = "SETest.conf";

String sourceEndpoint = "1"; // Default value of Ember App Framework.
String destEndpoint = "10"; // Default value of the Test Harness
String thAddr = "0x0000"; //TH is coordinator by default.

// ***************************************************
// UTILITY FUNCTIONS
// ***************************************************

void setTestNetwork(TestNetwork tn) {
  t = tn;
}

void setOutputFilename(String f) {
  outputFilename = f;
}

void setOutputFile(PrintStream p) {
  outputFile = p;
}

void sleep(int time)
{
  t.sleep(time);
}

void send(String node, String command) 
{
  t.send(node, 1, command);
  t.sleep(100);
}

String expect(String node, String command, String expectedResponse) 
{
  return t.expect(node, 1, command, expectedResponse);
}

void rebootAll(String[] nodes)
{
  for (int i = 0; i < nodes.length; i++) {
    t.power(nodes[i], true);
    send(nodes[i], "reset");
  }
  t.sleep(2000);
}

void leaveAll(String[] nodes)
{
  for (int i = 0; i < nodes.length; i++) {
    send(nodes[i], "network leave");
  }
  t.sleep(2000);
}

void clearKeysAll(String[] nodes)
{
  for (int i = 0; i < nodes.length; i++) {
      clearKeysTable(nodes[i]);
    }
}

void form(String node, String channel, String panId, String power) 
{
  send(node, "network form " + channel + " " + panId + " " + power);
  t.sleep(2000);
}

void join(String node, String channel, String panId, String power)
{
  expect(node, "network join " + channel + " " + panId + " " + power, ".*");
  t.sleep(2000);
}

void allowJoin(String node) {
  send(node, "network pjoin 0xFF");
}

String getTHShortID() {
  try{
    FileInputStream fstream = new FileInputStream(configurationFile);
    DataInputStream in = new DataInputStream(fstream);
    BufferedReader br = new BufferedReader(new InputStreamReader(in));
    String strLine;
    while ((strLine = br.readLine()) != null)   {
      if (strLine.substring(0, 10).equals("TH_SHORTID")) {
        return strLine.substring(11, 17);
      }
    }
    in.close();
  }catch (Exception e){//Catch exception if any
    print("Configuration file not found, you need to start the program with the -f option.");
  }
  return null;
}

String getNodeId(String node) {
  send(node, "info");
  t.sleep(1000);
  outputFile.flush();
  ArrayList output = outputFileToArrayList(true);
  for(int j=output.size() - 1; j >=0 ; j--) {
     String strLine = (String)output.get(j);
     for(int i=0; i<strLine.length()-6; i++) {
       if (strLine.substring(i, i+6).equals("nodeID")) {
         return strLine.substring(i+8, i+14);
       }
     }
   }
  return null;
}

String getPanId(String node) {
  send(node, "info");
  t.sleep(1000);
  outputFile.flush();
  ArrayList output = outputFileToArrayList(true);
  for(int j=output.size() - 1; j >=0 ; j--) {
     String strLine = (String)output.get(j);
     for(int i=0; i<strLine.length()-5; i++) {
       if (strLine.substring(i, i+5).equals("panID")) {
         return strLine.substring(i+7, i+13);
       }
     }
   }
  return null;
}

String parseJoinerShortID() {
  outputFile.flush();
  ArrayList output = outputFileToArrayList(true);
  for(int j=output.size() - 1; j >=0 ; j--) {
    String strLine = (String)output.get(j);
    print("strLine=" + strLine);
    for(int i=0; i<strLine.length()-15 ; i++) {
      if (strLine.substring(i, i+15).equals("New node joined")) {
        print(strLine.substring(i, i+15));
        for(int k=i+15; k<strLine.length()-6; k++) {
          print(strLine.substring(k, k+2));
          if (strLine.substring(k, k+2).equals("0x")) {
            return strLine.substring(k, k+6);
          }
        }
      }
    }
  }
  return null;
}

void sendBinding(String node, 
			     String destShortId, 
				 String sourceEui,
				 String srcEndpoint,
				 String destEui, 
				 String destEndpointOrGroup,
				 String clusterId)
{
  String command;
  if (destEndpointOrGroup.length() == 4)
    command = "send_bind";
  else
    command = "send_g_bind";
  send(node, command + " " + destShortId + " {" + sourceEui + "} " + srcEndpoint + " {" + destEui + "} " + destEndpointOrGroup + " " + clusterId);
  t.sleep(200);
}

void eraseBindings(String node)
{
  expect(node, "erase_binds", "Binding table erased");
  t.sleep(200);
}

void sendBindingTableRequest(String node, String destShortId)
{
  send(node, "remote_binds " + destShortId);
  t.sleep(200);
}

void printBindingTable(String node)
{
  send(node, "print_binds");
  t.sleep(200);
}

void printKeysTable(String node) 
{
  send(node, "keys print");
  t.sleep(200);
  
}

void clearKeysTable(String node)
{
  send(node, "keys clear");
  t.sleep(200);
}

String readLine() {
  BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
  try {
    input = br.readLine();
  } catch (IOException ioe) {
    System.out.println("IO error");
    System.exit(1);
  }
  return input;
}

void pause(String message) 
{
  if (message.length() > 0)
    print(message);
  readLine();
}

void pause()
{
  pause("Press ENTER to continue...");
}

void printTestMessage(String message, boolean isTitle)
{
  if (isTitle) {
    print("");print("");print("");
    print("****************************************************************");
  } else {  
    //print("");
    //print("------");
  } 
  print(message);
  if (isTitle) {
    print("****************************************************************");
  } else {
    //print("------");
  }
}

void printTestMessage(String message)
{
  printTestMessage(message, false);
}

void printTestMessageAndPause(String message) 
{
  printTestMessage(message);
  pause("");
}

void printTestTitle(String group, String section, String item)
{
  printTestMessage("Group:" + group + " Section:" + section + " item(s):" + item, true);
  System.out.println(testDelimiter);
  System.out.println("Group:" + group + " Section:" + section + " item(s):" + item);
}

boolean skipThisTest()
{
  print("Do you want to skip this test? If so, type 's' and press ENTER, otherwise just press ENTER.\n");
  String temp = readLine();
  if (temp.equals("s")) {
    return true;
  } else {
    return false;
  }
}

ArrayList outputFileToArrayList(boolean lastTestOnly)
{
  FileInputStream fstream = new FileInputStream(outputFilename);
  DataInputStream in = new DataInputStream(fstream);
  BufferedReader br = new BufferedReader(new InputStreamReader(in));
  int lastTestMarkerIndex = -1;
  int lineCounter = 0;
  String strLine;
  ArrayList output = new ArrayList();
  while ((strLine = br.readLine()) != null)   {
    output.add(strLine);
    if (strLine.equals(testDelimiter)) {
      lastTestMarkerIndex = lineCounter;
    }
    lineCounter++;
  }
  in.close();

  if (lastTestOnly && lastTestMarkerIndex > 0) {
    output.removeRange(0, lastTestMarkerIndex);
  }

  return output;
}

void tymeSync(String node, String dest, String sep, String dep) {
  send(node, "timesync " + dest + " " + sep + " " + dep);
  t.sleep(1000);
}


// ***************************************************
// TEST STEP FUNCTIONS
// ***************************************************
void networkSetupDutForm(String[] nodes,
                         String dut,
                         String channel,
                         String power,
                         String panId)
{
  printTestMessage("Form/Join process", true);
  pause("Please have the TH leaving the network (\"Network Leave\" in the Network tab). Press ENTER when done...");
  print("Setting up the network, DUT forming. Please wait...");

  leaveAll(nodes);
  rebootAll(nodes);
  clearKeysAll(nodes);

  form(dut, channel, power, panId);
  allowJoin(dut);
  t.sleep(5000);

  print("Done!");

  print("------");
  print("Please set channel=" + channel + " and panId=" + getPanId(dut) +  " in the "
        + "Network tab.");
  print("Then have the TH joining the DUT (Network join (CBKE))");
  print("Press ENTER when done...");
  pause("");

  print("Waiting for the TH to join...");
  sleep(25000);

  String temp = parseJoinerShortID();
  if (temp == null) {
    print("FAILED to parse joiner shortID, exiting");
    return;
  }

  try {
    BufferedWriter out = new BufferedWriter(new FileWriter(configurationFile));
    out.write("TH_SHORTID " + temp);
    out.close();
  } catch (IOException e) {}

  print("Done!");
}

void networkSetupDutJoin(String[] nodes,
                         String dut,
                         String channel,
                         String power,
                         String panId)
{
  printTestMessage("Form/Join process", true);

  leaveAll(nodes);
  rebootAll(nodes);
  clearKeysAll(nodes);

  print("1. Set channel=" + channel + " and panId=" + panId +  " in the "
        + "Network tab.");
  print("2. Have the TH forming the network (Network command: Reset, form & allow join)");
  print("Press ENTER when done...");
  pause("");
  sleep(10000);

  print("------");
  print("DUT joining network, please wait...");
  join(dut, channel, power, panId);
  t.sleep(25000);

  print("Done!");

  try {
    BufferedWriter out = new BufferedWriter(new FileWriter(configurationFile));
    out.write("TH_SHORTID 0x0000");
    out.close();
  } catch (IOException e) {}
}

void dutNetworkInfoSetup(String dut) {
  printTestMessage("SETest parameters setup", true);

  print("In the Network tab set the DUT info (\"Set DUT Info\").");
  print("- Set the DUT Short ID to " + getNodeId(dut) + ".");
  print("- Set the DUT Endpoint to 1.");
  pause("Press ENTER when done...");
}
