import com.ember.peek.SimulatedNetwork;

// The purpose of this test is to exercise WWAH connectivity functionality.

source("util.bsh");

if (!runArgument.runUsingHostApps) {
  // The Z3 Gateway can only be compiled as a host
  std.print("** this test is only run in host mode ** ");
  return;
}

SimulatedNetwork network = createNetwork();

// Load Z3Gateway app as HOST.
Location gatewayLocation = gridLocations[0];
TestNode gateway = new TestNode("gateway",
                                "", // no SoC image
                                "build/af-test-apps/Z3GatewayWithWwah-simulation-ezsp/Z3GatewayWithWwah",
                                "app/ncp/sample-app/ncp-uart-sw/simulation/build/exe/ncp-uart-sw",
                                gatewayLocation);
addAndLoadDevicesWithLocation(new TestNode[] { gateway }, true, false); // useHost, don't useSpi

// Load Z3Gateway app wo/ TC Keep Alive cluster as HOST.
Location gatewayLocation = gridLocations[1];
TestNode gateway = new TestNode("gateway-no-tc",
                                "", // no SoC image
                                "build/af-test-apps/Z3GatewayWithWwahNoTcKeepAlive-simulation-ezsp/Z3GatewayWithWwahNoTcKeepAlive",
                                "app/ncp/sample-app/ncp-uart-sw/simulation/build/exe/ncp-uart-sw",
                                gatewayLocation);
addAndLoadDevicesWithLocation(new TestNode[] { gateway }, true, false); // useHost, don't useSpi

// Load Z3LightWithWwah as a SoC device
Location routerLocation = gridLocations[2];
TestNode light = new TestNode("light",
                                "build/af-test-apps/Z3LightWithWwah-simulation/Z3LightWithWwah",
                                "", // no HOST image
                                "", // no NCP image
                                routerLocation);
addAndLoadDevicesWithLocation(new TestNode[] { light }, false); // don't useHost

// Load Z3DoorLockWithWwah app as a SoC device.
Location endDeviceLocation = gridLocations[4];
TestNode doorlock = new TestNode("doorlock",
                                  "build/af-test-apps/Z3DoorLockWithWwah-simulation/Z3DoorLockWithWwah",
                                  "", // no HOST image
                                  "", // no NCP image
                                  endDeviceLocation);
addAndLoadDevicesWithLocation(new TestNode[] { doorlock }, false); // don't useHost

// Load Z3SleepyDoorLockWithWwah app as a SoC device.
Location sleepyEndDeviceLocation = gridLocations[5];
TestNode sleepyDoorlock = new TestNode("sleepy-doorlock",
                                  "build/af-test-apps/Z3SleepyDoorLockWithWwah-simulation/Z3SleepyDoorLockWithWwah",
                                  "", // no HOST image
                                  "", // no NCP image
                                  sleepyEndDeviceLocation);
addAndLoadDevicesWithLocation(new TestNode[] { sleepyDoorlock }, false); // don't useHost

setupEncryption();

// Take down the light and turn it off
networkWait(15000);
expect("light",
       "net leave",
       ".*EMBER_NETWORK_DOWN");
network.power("light", false);
network.power("gateway-no-tc", false);

lazyExpect = true;

String message;
int backoffMs;
int MAX_BACKOFF_ITER = 15;
String sourceEndpoint = "1"; // Default value of Ember App Framework.

void startNetwork(String gatewayDevice)
{
  if (gatewayDevice == "gateway-no-tc") {
    network.power("gateway", false);
    network.power("gateway-no-tc", true);
  } else {    
    network.power("gateway-no-tc", false);
    network.power("gateway", true);
  }

  setupEncryption();

  // Wait for the nodes to reset.
  networkWait(DEFAULT_TIMEOUT);

  // Check inital base device masks.
  expectMultiline(gatewayDevice,
                  "plugin network-creator status",
                  new String[]  {
                    "(1).*\\[11, 15, 20, 25\\]",
                    "(2).*\\[12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 26\\]",
                  });

  // The gateway forms a centralized network.
  send(gatewayDevice, "plugin network-creator start 1");
  expect(gatewayDevice,
         "NWK Creator: Form. Channel.*Status: 0x00",
         DEFAULT_TIMEOUT << 1);

  // Open the network for joining using the gateway.
  send(gatewayDevice, "plugin network-creator-security open-network");
  expect(gatewayDevice, "Open network: 0x00");

  dbg.println("=== Testing keys print from line " + this.namespace.getInvocationLine() + " ===");
  networkWait(DEFAULT_TIMEOUT);
  send(gatewayDevice, "keys print");
  networkWait(DEFAULT_TIMEOUT);
  send("light", "keys print");
  networkWait(DEFAULT_TIMEOUT);
  send("doorlock", "keys print");
  networkWait(DEFAULT_TIMEOUT);
  send("sleepy-doorlock", "keys print");
  networkWait(DEFAULT_TIMEOUT);

  // Turn the light on and it will begin finding a network to join via steering
  network.power("light", true);
  setupEncryption();
  expect("light",
         "EMBER_NETWORK_UP",
         30000);
  assert(channel("light").equals(channel(gatewayDevice)));
  assert(panId("light").equals(panId(gatewayDevice)));

  // Join with the doorlock.
  networkWait(40000);
  network.pressButton("doorlock", "0");
  network.releaseButton("doorlock", "0");
  networkWait(timeout);       // there was a beacon collision hence adding a delay to avoid it.
  networkWait(18000);

  // Join with the sleepy doorlock. 
  network.pressButton("sleepy-doorlock", "0");
  network.releaseButton("sleepy-doorlock", "0");
  networkWait(timeout);       // there was a beacon collision hence adding a delay to avoid it.
  networkWait(18000);

  send(gatewayDevice, "info");
  networkWait(DEFAULT_TIMEOUT);
  send("light", "info");
  networkWait(DEFAULT_TIMEOUT);
  send("doorlock", "info");
  networkWait(DEFAULT_TIMEOUT);
  send("sleepy-doorlock", "info");
  networkWait(DEFAULT_TIMEOUT);
}

void testFastPollOnStartup()
{
  networkWait(80000);
  expect("sleepy-doorlock","[Next poll nwk 0 in 500 ms]",1000);
}

void disableAlgorithmOnNetwork(String gatewayDevice)
{
  send("light", "plugin wwah-connectivity-manager disable " + sourceEndpoint);
  networkWait(1000);
  send("doorlock", "plugin wwah-connectivity-manager disable " + sourceEndpoint);
  networkWait(1000);
  if (gatewayDevice == "gateway") {
    send("sleepy-doorlock", "plugin wwah-connectivity-manager disable " + sourceEndpoint);
  }
  networkWait(1000);
  return;
}

int checkBackoffAmount(String device,
                       String expectOutputLines,
                       boolean onRejoinState,
                       boolean inFastRejoin,
                       boolean fastRejoinCompleted,
                       int numConsecutiveFastRejoinsCompleted)
{
  boolean sleepy = false;

  if (device.contains("sleepy")) {
    sleepy = true;
  }

  // The expectOutputLines argument is the number of strings returned from a
  // expectMultiLine. The final expected line should be
  // "WWAH Connectivity Mgr: moving state after .* ms"
  // We look at this final line and extract the MS value, then verify it
  String[] lines = expectOutputLines.split("\n");
  String backOffMsString = lines[lines.length-1].replaceAll("[\\D]", "");
  int backoffAmountMs = Integer.parseInt(backOffMsString);
  
  int minBackoffMs;
  int maxBackoffMs;
  int maxBackoffIterations = MAX_BACKOFF_ITER;  // fixed; from wwah-connectivity-manager.c
  int maxFastRejoinBackoffMs = 90000; // fixed; from wwah-connectivity-manager.c

  if (sleepy) {
    if (inFastRejoin) {
      // backoff is DURATION_BETWEEN_EACH_REJOIN_SEC_DEFAULT
      minBackoffMs = maxBackoffMs = 7 * 1000;
    } else if (fastRejoinCompleted) {
      if (numConsecutiveFastRejoinsCompleted == maxBackoffIterations + 1) {
        numConsecutiveFastRejoinsCompleted = 1;
      }
      if (numConsecutiveFastRejoinsCompleted > 0) {
        // backoff is doubling FAST_REJOIN_FIRST_BACKOFF_TIME_SEC_DEFAULT
        minBackoffMs = maxBackoffMs = (30 * 1000) << (numConsecutiveFastRejoinsCompleted - 1);
      }
      if (maxBackoffMs > maxFastRejoinBackoffMs) {
        minBackoffMs = maxBackoffMs = maxFastRejoinBackoffMs;
      }
    } else {
      // Sleepies delay for
      // the min value of DurationBetweenEachRejoin (7 seconds) set in this bsh file
      // and the max value of DurationBetweenEachRejoin (120 seconds) set in this bsh file
      minBackoffMs = 7000;
      maxBackoffMs = 120000;
    }
  } else {
    if (!onRejoinState) {
      // Routers and non sleepies delay for the trust center keepalive amount
      // (2 minutes base plus 60 seconds jitter from the trust center
      // keepalive plugin.properties)
      minBackoffMs = 120000;
      maxBackoffMs = 180000;
    } else {
      // Routers and non sleepies delay for
      // EMBER_AF_PLUGIN_WWAH_CONNECTIVITY_MANAGER_WAIT_TIME_BETWEEN_REJOINS_MIN (1)
      // + jitter(EMBER_AF_PLUGIN_WWAH_CONNECTIVITY_MANAGER_WAIT_TIME_BETWEEN_REJOINS_JITTER_SEC)
      minBackoffMs = 60000;
      maxBackoffMs = 120000;
    }
  }

  if ((backoffAmountMs < minBackoffMs) || (backoffAmountMs > maxBackoffMs)) {
    throw new Exception("Backoff delay (" +
                        backoffAmountMs +
                        ") does not fall between " +
                        minBackoffMs +
                        " and " +
                        maxBackoffMs +
                        " MS. " +
                        (onRejoinState ? "ON" : "NOT ON") + " rejoin state, " +
                        (inFastRejoin ? "" : "NOT ") + "IN fast rejoin, " +
                        (fastRejoinCompleted ? "fast rejoin JUST completed, " : "") +
                        numConsecutiveFastRejoinsCompleted + " consecutive fast rejoins completed " +
                        "[line " + this.namespace.getInvocationLine() + "]");
  }

  return backoffAmountMs;
}

void testParentConnectivityLossDetectionForSleepyEndDevice(String device, String gatewayDevice)
{
  // Silence the other children
  send("doorlock", "debugprint all_off");

  // Enable algorithm on end device
  // Establish a route first
  send(device, "zcl global read 0 0");
  expect(device,
         "send 0x0000 1 1",
         "RX len 8, ep 01, clus 0x0000",
         5000);
  send(gatewayDevice, "zcl mfg-code 0x1217");
  MAX_BACKOFF_ITER = 3;
  send(gatewayDevice, "zcl sl-wwah enable-rejoin-alg 35 7 30 90 " + MAX_BACKOFF_ITER);
  send(gatewayDevice, "send " + nodeId(device) + " 1 1" );

  networkWait(10000);
  expect(device,
         "plugin wwah-connectivity-manager info",
         "Enabled:                         Yes");
  networkWait(DEFAULT_TIMEOUT);

  // Take down the hub and router parent
  power(gatewayDevice, false);
  network.power("light", false);

  // Everyone is down. Progress through the states and check backoff amounts

  int parentLossDetectionTimeoutMs = 35000;

  // Sleepy end devices start to follow the rejoin algorithm to perform rejoin attempts
  message = expectMultiline(device,
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: lost connection to parent",
                              "WWAH Connectivity Mgr: running state Secure Rejoin on Current Channel \\(connection error mask 0x01, fast rejoin: Y\\)",
                              "EMBER_NETWORK_DOWN",
                              "WWAH Connectivity Mgr: issued secure rejoin on current channel: 0x00",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            parentLossDetectionTimeoutMs);

  backoffMs = checkBackoffAmount(device,
                                 message,
                                 true,  // on a rejoin state?
                                 true,  // in fast rejoin?
                                 false, // just completed a fast rejoin?
                                 0);    // number fast rejoins completed

  message = expectMultiline(device,
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: running state TC Rejoin on Current Channel \\(connection error mask 0x01, fast rejoin: Y\\)",
                              "EMBER_NETWORK_DOWN",
                              "WWAH Connectivity Mgr: issued insecure rejoin on current channel: 0x00",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            backoffMs + 10000);

  backoffMs = checkBackoffAmount(device,
                                 message,
                                 true,  // on a rejoin state?
                                 true,  // in fast rejoin?
                                 false, // just completed a fast rejoin?
                                 0);    // number fast rejoins completed

  message = expectMultiline(device,
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: running state TC Rejoin on Preferred Channels \\(connection error mask 0x01, fast rejoin: Y\\)",
                              "EMBER_NETWORK_DOWN",
                              "WWAH Connectivity Mgr: issued insecure rejoin on preferred channels \\(mask 0x02308800\\): 0x00",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            backoffMs + 10000);

  backoffMs = checkBackoffAmount(device,
                                 message,
                                 true,  // on a rejoin state?
                                 true,  // in fast rejoin?
                                 false, // just completed a fast rejoin?
                                 0);    // number fast rejoins completed

  message = expectMultiline(device,
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: running state TC Rejoin on All Channels \\(connection error mask 0x01, fast rejoin: Y\\)",
                              "EMBER_NETWORK_DOWN",
                              "WWAH Connectivity Mgr: issued insecure rejoin on all channels \\(mask 0x07FFF800\\): 0x00",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            backoffMs + 10000);

  backoffMs = checkBackoffAmount(device,
                                 message,
                                 true,  // on a rejoin state?
                                 true,  // in fast rejoin?
                                 false, // just completed a fast rejoin?
                                 0);    // number fast rejoins completed

  message = expectMultiline(device,
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: running state Wait for Trigger \\(connection error mask 0x01, fast rejoin: Y\\)",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            backoffMs + 10000);

  backoffMs = checkBackoffAmount(device,
                                 message,
                                 false, // on a rejoin state?
                                 true,  // in fast rejoin?
                                 false, // just completed a fast rejoin?
                                 0);    // number fast rejoins completed

  message = expectMultiline(device,
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: running state Secure Rejoin on Preferred Channels \\(connection error mask 0x01, fast rejoin: N\\)",
                              "EMBER_NETWORK_DOWN",
                              "WWAH Connectivity Mgr: issued secure rejoin on preferred channels \\(mask 0x02308800\\): 0x00",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            backoffMs + 10000);

  backoffMs = checkBackoffAmount(device,
                                 message,
                                 true,  // on a rejoin state?
                                 false, // in fast rejoin?
                                 true,  // just completed a fast rejoin?
                                 1);    // number fast rejoins completed

  message = expectMultiline(device,
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: running state Secure Rejoin on All Channels \\(connection error mask 0x01, fast rejoin: N\\)",
                              "EMBER_NETWORK_DOWN",
                              "WWAH Connectivity Mgr: issued secure rejoin on all channels \\(mask 0x07FFF800\\): 0x00",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            backoffMs + 10000);

  backoffMs = checkBackoffAmount(device,
                                 message,
                                 true,  // on a rejoin state?
                                 false,  // in fast rejoin?
                                 false, // just completed a fast rejoin?
                                 1);    // number fast rejoins completed

  message = expectMultiline(device,
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: running state Wait for Second Trigger \\(connection error mask 0x01, fast rejoin: Y\\)",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            backoffMs + 10000);

  backoffMs = checkBackoffAmount(device,
                                 message,
                                 false, // on a rejoin state?
                                 true,  // in fast rejoin?
                                 false, // just completed a fast rejoin?
                                 1);    // number fast rejoins completed

  message = expectMultiline(device,
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: running state Secure Rejoin on Current Channel \\(connection error mask 0x01, fast rejoin: Y\\)",
                              "EMBER_NETWORK_DOWN",
                              "WWAH Connectivity Mgr: issued secure rejoin on current channel: 0x00",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            backoffMs + 10000);

  backoffMs = checkBackoffAmount(device,
                                 message,
                                 true,  // on a rejoin state?
                                 true, // in fast rejoin?
                                 false,  // just completed a fast rejoin?
                                 1);    // number fast rejoins completed

  message = expectMultiline(device,
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: running state TC Rejoin on Current Channel \\(connection error mask 0x01, fast rejoin: Y\\)",
                              "EMBER_NETWORK_DOWN",
                              "WWAH Connectivity Mgr: issued insecure rejoin on current channel: 0x00",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            backoffMs + 10000);

  backoffMs = checkBackoffAmount(device,
                                 message,
                                 true,  // on a rejoin state?
                                 true,  // in fast rejoin?
                                 false, // just completed a fast rejoin?
                                 1);    // number fast rejoins completed

  message = expectMultiline(device,
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: running state TC Rejoin on Preferred Channels \\(connection error mask 0x01, fast rejoin: Y\\)",
                              "EMBER_NETWORK_DOWN",
                              "WWAH Connectivity Mgr: issued insecure rejoin on preferred channels \\(mask 0x02308800\\): 0x00",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            backoffMs + 10000);

  backoffMs = checkBackoffAmount(device,
                                 message,
                                 true,  // on a rejoin state?
                                 true,  // in fast rejoin?
                                 false, // just completed a fast rejoin?
                                 1);    // number fast rejoins completed

  message = expectMultiline(device,
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: running state TC Rejoin on All Channels \\(connection error mask 0x01, fast rejoin: N\\)",
                              "EMBER_NETWORK_DOWN",
                              "WWAH Connectivity Mgr: issued insecure rejoin on all channels \\(mask 0x07FFF800\\): 0x00",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            backoffMs + 10000);

  backoffMs = checkBackoffAmount(device,
                                 message,
                                 true,  // on a rejoin state?
                                 false,  // in fast rejoin?
                                 true, // just completed a fast rejoin?
                                 2);    // number fast rejoins completed

  message = expectMultiline(device,
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: running state Wait for Trigger \\(connection error mask 0x01, fast rejoin: N\\)",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            backoffMs + 10000);

  backoffMs = checkBackoffAmount(device,
                                 message,
                                 false, // on a rejoin state?
                                 false,  // in fast rejoin?
                                 false, // just completed a fast rejoin?
                                 2);    // number fast rejoins completed

  message = expectMultiline(device,
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: running state Secure Rejoin on Preferred Channels \\(connection error mask 0x01, fast rejoin: Y\\)",
                              "EMBER_NETWORK_DOWN",
                              "WWAH Connectivity Mgr: issued secure rejoin on preferred channels \\(mask 0x02308800\\): 0x00",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            backoffMs + 10000);

  backoffMs = checkBackoffAmount(device,
                                 message,
                                 true,  // on a rejoin state?
                                 true, // in fast rejoin?
                                 false,  // just completed a fast rejoin?
                                 2);    // number fast rejoins completed

  message = expectMultiline(device,
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: running state Secure Rejoin on All Channels \\(connection error mask 0x01, fast rejoin: Y\\)",
                              "EMBER_NETWORK_DOWN",
                              "WWAH Connectivity Mgr: issued secure rejoin on all channels \\(mask 0x07FFF800\\): 0x00",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            backoffMs + 10000);

  backoffMs = checkBackoffAmount(device,
                                 message,
                                 true,  // on a rejoin state?
                                 true,  // in fast rejoin?
                                 false, // just completed a fast rejoin?
                                 2);    // number fast rejoins completed

  message = expectMultiline(device,
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: running state Wait for Second Trigger \\(connection error mask 0x01, fast rejoin: Y\\)",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            backoffMs + 10000);

  backoffMs = checkBackoffAmount(device,
                                 message,
                                 false, // on a rejoin state?
                                 true,  // in fast rejoin?
                                 false, // just completed a fast rejoin?
                                 2);    // number fast rejoins completed

  message = expectMultiline(device,
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: running state Secure Rejoin on Current Channel \\(connection error mask 0x01, fast rejoin: Y\\)",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            backoffMs + 10000);

  backoffMs = checkBackoffAmount(device,
                                 message,
                                 true, // on a rejoin state?
                                 true,  // in fast rejoin?
                                 false, // just completed a fast rejoin?
                                 2);    // number fast rejoins completed

  message = expectMultiline(device,
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: running state TC Rejoin on Current Channel \\(connection error mask 0x01, fast rejoin: N\\)",
                              "EMBER_NETWORK_DOWN",
                              "WWAH Connectivity Mgr: issued insecure rejoin on current channel: 0x00",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            backoffMs + 10000);

  // This check makes sure we hit the max fast rejoin backoff amount
  backoffMs = checkBackoffAmount(device,
                                 message,
                                 true,  // on a rejoin state?
                                 false,  // in fast rejoin?
                                 true, // just completed a fast rejoin?
                                 3);    // number fast rejoins completed

  message = expectMultiline(device,
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: running state TC Rejoin on Preferred Channels \\(connection error mask 0x01, fast rejoin: N\\)",
                              "EMBER_NETWORK_DOWN",
                              "WWAH Connectivity Mgr: issued insecure rejoin on preferred channels \\(mask 0x02308800\\): 0x00",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            backoffMs + 10000);

  backoffMs = checkBackoffAmount(device,
                                 message,
                                 true,  // on a rejoin state?
                                 false,  // in fast rejoin?
                                 false, // just completed a fast rejoin?
                                 3);    // number fast rejoins completed

  message = expectMultiline(device,
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: running state TC Rejoin on All Channels \\(connection error mask 0x01, fast rejoin: Y\\)",
                              "EMBER_NETWORK_DOWN",
                              "WWAH Connectivity Mgr: issued insecure rejoin on all channels \\(mask 0x07FFF800\\): 0x00",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            backoffMs + 10000);

  backoffMs = checkBackoffAmount(device,
                                 message,
                                 true,  // on a rejoin state?
                                 true,  // in fast rejoin?
                                 false, // just completed a fast rejoin?
                                 3);    // number fast rejoins completed

  message = expectMultiline(device,
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: running state Wait for Trigger \\(connection error mask 0x01, fast rejoin: Y\\)",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            backoffMs + 10000);

  backoffMs = checkBackoffAmount(device,
                                 message,
                                 false, // on a rejoin state?
                                 true,  // in fast rejoin?
                                 false, // just completed a fast rejoin?
                                 3);    // number fast rejoins completed

  message = expectMultiline(device,
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: running state Secure Rejoin on Preferred Channels \\(connection error mask 0x01, fast rejoin: Y\\)",
                              "EMBER_NETWORK_DOWN",
                              "WWAH Connectivity Mgr: issued secure rejoin on preferred channels \\(mask 0x02308800\\): 0x00",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            backoffMs + 10000);

  backoffMs = checkBackoffAmount(device,
                                 message,
                                 true,  // on a rejoin state?
                                 true, // in fast rejoin?
                                 false,  // just completed a fast rejoin?
                                 3);    // number fast rejoins completed

  message = expectMultiline(device,
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: running state Secure Rejoin on All Channels \\(connection error mask 0x01, fast rejoin: Y\\)",
                              "EMBER_NETWORK_DOWN",
                              "WWAH Connectivity Mgr: issued secure rejoin on all channels \\(mask 0x07FFF800\\): 0x00",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            backoffMs + 10000);

  backoffMs = checkBackoffAmount(device,
                                 message,
                                 true,  // on a rejoin state?
                                 true,  // in fast rejoin?
                                 false, // just completed a fast rejoin?
                                 3);    // number fast rejoins completed

  message = expectMultiline(device,
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: running state Wait for Second Trigger \\(connection error mask 0x01, fast rejoin: N\\)",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            backoffMs + 10000);

  backoffMs = checkBackoffAmount(device,
                                 message,
                                 false, // on a rejoin state?
                                 false,  // in fast rejoin?
                                 true, // just completed a fast rejoin?
                                 4);    // number fast rejoins completed

  // Bring the light and gateway back up
  power(gatewayDevice, true);
  network.power("light", true);
  setupEncryption();

  // Should get a network up on next rejoin attempt
  expect(device,"","EMBER_NETWORK_UP", 30000);

  // Unsilence the other children
  send("doorlock", "debugprint all_on");

  networkWait(100); // delay to work around collision
  // Restore others' connectivity. A previous parent connectivity loss test will
  // cause all children to go EMBER_NETWORK_DOWN
  expect("doorlock",
         "network rejoin 0 0",
         "EMBER_NETWORK_UP",
         5000);
  networkWait(5000);

  // Clean up
  disableAlgorithmOnNetwork(gatewayDevice);
}

void testParentConnectivityLossDetectionForEndDevice(String device, String gatewayDevice)
{
  // Silence the other children
  send("sleepy-doorlock", "debugprint all_off");

  // Make sure we're up. A previous parent connectivity loss test will cause
  // all children to go EMBER_NETWORK_DOWN
  expect(device,
         "network rejoin 0 0",
         "EMBER_NETWORK_UP",
         5000);

  networkWait(100000);

  if (gatewayDevice == "gateway-no-tc") {
    // Setting periodic router check in interval back to 450 sec so that it can pass
    // connectivity test with TC Keep Alive default timings.
    send(gatewayDevice, "zcl mfg-code 0x1217");
    send(gatewayDevice, "zcl sl-wwah enable-router-checkins 450");
    send(gatewayDevice, "send " + nodeId(device) + " 1 1" );
    networkWait(100000);
  }

  // Enable algorithm on end device
  // Establish a route first
  send(device, "zcl global read 0 0");
  expect(device,
         "send 0x0000 1 1",
         "RX len 8, ep 01, clus 0x0000",
         5000);

  if (gatewayDevice == "gateway-no-tc") {
    // Disable Periodic Router Check-in so that parent connectivity test 
    // is not disturbed.
    send(gatewayDevice, "zcl mfg-code 0x1217");
    send(gatewayDevice, "zcl sl-wwah disable-router-checkins");
    send(gatewayDevice, "send " + nodeId(device) + " 1 1" );
    networkWait(1000);
  }

  send(gatewayDevice, "zcl mfg-code 0x1217");
  MAX_BACKOFF_ITER = 5;
  send(gatewayDevice, "zcl sl-wwah enable-rejoin-alg 10 120 20 30 " + MAX_BACKOFF_ITER);
  send(gatewayDevice, "send " + nodeId(device) + " 1 1" );

  networkWait(10000);
  expect(device,
         "plugin wwah-connectivity-manager info",
         "Enabled:                         Yes");
  networkWait(10000);

  // Take down the hub and router parent
  power(gatewayDevice, false);
  network.power("light", false);

  // Everyone is down. Progress through the states and check backoff amounts

  int parentLossDetectionTimeoutMs = 330000;

  message = expectMultiline(device,
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: lost connection to parent",
                              "WWAH Connectivity Mgr: running state TC Rejoin on All Channels \\(connection error mask 0x01, fast rejoin: Y\\)",
                              "EMBER_NETWORK_DOWN",
                              "WWAH Connectivity Mgr: issued insecure rejoin on all channels \\(mask 0x07FFF800\\): 0x00",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            parentLossDetectionTimeoutMs);

  backoffMs = checkBackoffAmount(device,
                                 message,
                                 true,  // on a rejoin state?
                                 true,  // in fast rejoin?
                                 false, // just completed a fast rejoin?
                                 0);    // number fast rejoins completed

  message = expectMultiline(device,
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: running state Wait for Trigger \\(connection error mask 0x01, fast rejoin: N\\)",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            backoffMs + 10000);

  backoffMs = checkBackoffAmount(device,
                                 message,
                                 false, // on a rejoin state?
                                 false, // in fast rejoin?
                                 false, // just completed a fast rejoin?
                                 0);    // number fast rejoins completed

  message = expectMultiline(device,
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: running state TC Rejoin on Current Channel \\(connection error mask 0x01, fast rejoin: N\\)",
                              "EMBER_NETWORK_DOWN",
                              "WWAH Connectivity Mgr: issued insecure rejoin on current channel: 0x00",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            backoffMs + 10000);

  backoffMs = checkBackoffAmount(device,
                                 message,
                                 true, // on a rejoin state?
                                 false, // in fast rejoin?
                                 false, // just completed a fast rejoin?
                                 0);    // number fast rejoins completed

  // After TC Rejoin on Current Channel, end device skips to TC Rejoin on All
  // Channels
  message = expectMultiline(device,
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: running state TC Rejoin on All Channels \\(connection error mask 0x01, fast rejoin: N\\)",
                              "EMBER_NETWORK_DOWN",
                              "WWAH Connectivity Mgr: issued insecure rejoin on all channels \\(mask 0x07FFF800\\): 0x00",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            backoffMs + 10000);

  backoffMs = checkBackoffAmount(device,
                                 message,
                                 true,  // on a rejoin state?
                                 false, // in fast rejoin?
                                 false, // just completed a fast rejoin?
                                 0);    // number fast rejoins completed

  message = expectMultiline(device,
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: running state Wait for Trigger \\(connection error mask 0x01, fast rejoin: N\\)",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            backoffMs + 10000);

  backoffMs = checkBackoffAmount(device,
                                 message,
                                 false, // on a rejoin state?
                                 false, // in fast rejoin?
                                 false, // just completed a fast rejoin?
                                 0);    // number fast rejoins completed
  networkWait(5000);
  // Bring the light and gateway back up
  power(gatewayDevice, true);
  network.power("light", true);
  setupEncryption();

  // Should get a network up on next rejoin attempt
  expectMultiline(device,
                  "",
                  new String[] {
                    "WWAH Connectivity Mgr: running state TC Rejoin on Current Channel \\(connection error mask 0x01, fast rejoin: N\\)",
                    "WWAH Connectivity Mgr: issued insecure rejoin on current channel: 0x00",
                    "EMBER_NETWORK_UP",
                  },
                  backoffMs + 10000);

  networkWait(30000);

  // Unsilence the other children
  send("sleepy-doorlock", "debugprint all_on");

  // Restore others' connectivity. A previous parent connectivity loss test will
  // cause all children to go EMBER_NETWORK_DOWN
  expect("sleepy-doorlock",
         "network rejoin 0 0",
         "EMBER_NETWORK_UP",
         5000);
  networkWait(5000);

  // Clean up
  disableAlgorithmOnNetwork(gatewayDevice);
}

void testHubConnectivityLossDetectionRouter(String gatewayDevice)
{
  String nodeIdLight = nodeId("light");

  send("light",
       "keys print");
  networkWait(2000);

  // TODO We can remove this once EMZIGBEE-3518 is implemented
  String lightEui = eui64("light");
  String lightEuiLittleEndian = getEui64LittleEndian("light");
  send(gatewayDevice, "plugin address-table add {" + lightEuiLittleEndian + "}");
  send(gatewayDevice, "zdo nwk {" + lightEui + "}");
  networkWait(5000);

  if (gatewayDevice == "gateway-no-tc") {
    // Enable periodic router check in on light 
    // Setting periodic router check in interval to 450 sec meaning that the keep 
    // alive interval is going to be 150 + [0-7] sec (ie. 450/3 + random jitter).
    send(gatewayDevice, "zcl mfg-code 0x1217");
    send(gatewayDevice, "zcl sl-wwah enable-router-checkins 450");
    send(gatewayDevice, "send " + nodeId("light") + " 1 1" );
    networkWait(DEFAULT_TIMEOUT);
  }

  // Enable algorithm on light
  send(gatewayDevice, "zcl mfg-code 0x1217");
  MAX_BACKOFF_ITER = 5;
  send(gatewayDevice, "zcl sl-wwah enable-rejoin-alg 10 120 20 30 " + MAX_BACKOFF_ITER);
  send(gatewayDevice, "send " + nodeIdLight + " 1 1" );

  networkWait(10000);
  expect("light",
         "plugin wwah-connectivity-manager info",
         "Enabled:                         Yes");
  networkWait(300000);

  // Power off gateway, check detection of hub loss on light
  power(gatewayDevice,false);

  if (gatewayDevice == "gateway-no-tc") {
    // Test that TC Keep Alive reports exactly 3 errors before report lost hub connectivity,
    // also, that timing of reports relates to what is expected.
    for(int i=1;i<4;i++) {
      expect("light","ERR: Trust center did not acknowledge previous keep-alive" +
                     " signal correctly \\(timeout " + i + "\\)", 190000);
    }
  }

  // The timeout here should be larger than
  // KEEPALIVE_FAILURE_LIMIT * (KEEPALIVE_DEFAULT_BASE_PERIOD_MINUTES + KEEPALIVE_DEFAULT_JITTER_PERIOD_SECONDS)
  // 3 * (2 minutes + 60 seconds) = 540 seconds
  expect("light","lost connection to hub due to trust center keepalive failures",550000);

  // Power on gateway, check that a rejoin process has been initiated
  power(gatewayDevice,true);
  expect("light",
         "plugin wwah-connectivity-manager info",
         "[  Hub Connection Lost:           Yes]");
  expect("light","[    TC Keepalive Failure:        Yes]",1000);
  expect("light","[State:                           TC Rejoin on All Channels]",1000);
  networkWait(DEFAULT_TIMEOUT);

  // Check that hub connectivity has been restored
  expect("light",
         "plugin wwah-connectivity-manager info",
         "[Connection Error Mask:           0x00]");
  expect("light","[  Hub Connection Lost:           No]",1000);

  // Wait for other devices come back to the network
  // before disableAlgorithmOnNetwork.
  networkWait(50000);

  // Clean up
  disableAlgorithmOnNetwork(gatewayDevice);
}

void testHubConnectivityLossDetectionEndDevice(String gatewayDevice)
{ 
  // Rediscover the node
  String doorlockNodeId = nodeId("doorlock");
  String doorlockEui = eui64("doorlock");
  String doorlockEuiLittleEndian = getEui64LittleEndian("doorlock");
  networkWait(1500);
  send(gatewayDevice, "plugin address-table add {" + doorlockEuiLittleEndian + "}");
  networkWait(7000);
  send(gatewayDevice, "zdo nwk {" + doorlockEui + "}");
  networkWait(15000);
  expect(gatewayDevice,
         "plugin address-table print",
         ".*" + doorlockNodeId + ".*");

  networkWait(150000);

  // Establish a route
  send("doorlock", "zcl global read 0 0");
  networkWait(5000);
  expect("doorlock",
         "send 0x0000 1 1",
         "RX len 8, ep 01, clus 0x0000",
         5000);

  if (gatewayDevice == "gateway-no-tc") {
    // Check periodic router checkin attribute
    send(gatewayDevice, "zcl mfg-code 0x1217");
    send(gatewayDevice, "zcl global read 0xFC57 0x0006");
    expect(gatewayDevice,
           "send " + doorlockNodeId + " 1 1",
           "RX len 10, ep 01, clus 0xFC57 .* mfgId 1217 .* payload\\[06 00 00 10 00 \\]");

    // Setting periodic router check in interval to 240 sec meaning that the keep 
    // alive interval is going to be 80 + [0-7] sec (ie. 240/3 + random jitter).
    // Checkout interval is chosen to workaround the 300 sec long-poll interval of
    // the end-device behavior checkin as we test hub connectivity here.
    send(gatewayDevice, "zcl mfg-code 0x1217");
    send(gatewayDevice, "zcl sl-wwah enable-router-checkins 240");
    send(gatewayDevice, "send " + doorlockNodeId + " 1 1" );
    networkWait(DEFAULT_TIMEOUT);

    // Check periodic router checkin attribute is set
    send(gatewayDevice, "zcl mfg-code 0x1217");
    send(gatewayDevice, "zcl global read 0xFC57 0x0006");
    expect(gatewayDevice,
           "send " + doorlockNodeId + " 1 1",
           "RX len 10, ep 01, clus 0xFC57 .* mfgId 1217 .* payload\\[06 00 00 10 01 \\]");
  }

  // Enable algorithm on doorlock
  send(gatewayDevice, "zcl mfg-code 0x1217");
  MAX_BACKOFF_ITER = 5;
  send(gatewayDevice, "zcl sl-wwah enable-rejoin-alg 10 120 20 30 " + MAX_BACKOFF_ITER);
  send(gatewayDevice, "send " + nodeId("doorlock") + " 1 1" );

  networkWait(15000);
  expect("doorlock",
         "plugin wwah-connectivity-manager info",
         "Enabled:                         Yes");
  networkWait(5000);

  // Power off gateway, check detection of hub loss on doorlock
  power(gatewayDevice,false);

  if (gatewayDevice == "gateway-no-tc") {
    // Test that TC Keep Alive reports exactly 3 errors before report lost hub connectivity,
    // also, that timing of reports relates to what is expected.
    for(int i=1;i<4;i++) {
      expect("doorlock","ERR: Trust center did not acknowledge previous keep-alive" +
                        " signal correctly \\(timeout " + i + "\\)", 185000);
    }
  }

  expect("doorlock",
         "lost connection to hub due to trust center keepalive failures",
         550000);

  // Power on gateway, check that a rejoin process has been initiated
  power(gatewayDevice,true);
  expect(gatewayDevice,"EMBER_NETWORK_UP");
  expect("doorlock",
         "plugin wwah-connectivity-manager info",
         "[  Hub Connection Lost:           Yes]");
  expect("doorlock","[    TC Keepalive Failure:        Yes]",1000);
  expect("doorlock","[State:                           TC Rejoin on All Channels]",1000);
  expect("doorlock","EMBER_NETWORK_UP",306000);  // Gateway takes longer to start after switch to UART
  // Before the doorlock can join,
  // we have to wait for one rejoin to fail, followed by a wait for trigger state

  // Check that hub connectivity has been restored
  expect("doorlock",
         "plugin wwah-connectivity-manager info",
         "[Connection Error Mask:           0x00]");
  expect("doorlock","[  Hub Connection Lost:           No]",1000);
  networkWait(DEFAULT_TIMEOUT);
  networkWait(50000);
  // Establish a route
  send("doorlock", "zcl global read 0 0");
  expect("doorlock",
         "send 0x0000 1 1",
         "RX len 8, ep 01, clus 0x0000",
         10000);

  // Checking for the persistence of TC connectivity failure by rebooting end device(doorlock)
  expect("doorlock",
         "plugin wwah-connectivity-manager info",
         "[  Trust Center Connectivity:     Yes]");
  socReboot("doorlock");
  networkWait(5000);
  expect("doorlock",
         "plugin wwah-connectivity-manager info",
         "[  Trust Center Connectivity:     Yes]");
  
  if (gatewayDevice == "gateway-no-tc") {
    // Check periodic router checkin attribute is persisted and set
    send(gatewayDevice, "zcl mfg-code 0x1217");
    send(gatewayDevice, "zcl global read 0xFC57 0x0006");
    expect(gatewayDevice,
           "send " + doorlockNodeId + " 1 1",
           "RX len 10, ep 01, clus 0xFC57 .* mfgId 1217 .* payload\\[06 00 00 10 01 \\]");
  }

  // Clean up
  disableAlgorithmOnNetwork(gatewayDevice);
}

void testHubConnectivityLossDetectionSleepyEndDevice(String gatewayDevice)
{
  // Change the check-in interval to something reasonable (30 seconds) and create
  // bindings so the sleepy has someone to talk to
  expect("sleepy-doorlock",
         "write 1 0x0020 0x0000 1 0x23 {78}",
         "Success: write");
  expect("sleepy-doorlock",
         "option binding-table set 0 0x0020 0x01 0x01 {" + eui64(gatewayDevice) + "}",
         "set bind 0: 0x00");
  networkWait(60000);

  // Rediscover the node in the address table by sending it a NWK addr request
  String doorlockNodeId = nodeId("sleepy-doorlock");
  String doorlockEui = eui64("sleepy-doorlock");
  String doorlockEuiLittleEndian = getEui64LittleEndian("sleepy-doorlock");
  networkWait(1000);
  send(gatewayDevice, "plugin address-table add {" + doorlockEuiLittleEndian + "}");
  networkWait(2000);
  send(gatewayDevice, "zdo nwk {" + doorlockEui + "}");
  networkWait(10000);
  expect(gatewayDevice,
         "plugin address-table print",
         ".*" + doorlockNodeId + ".*");
  // Enable algorithm on sleepy
  // Establish a route first
  send("sleepy-doorlock", "zcl global read 0 0");
  expect("sleepy-doorlock",
         "send 0x0000 1 1",
         "RX len 8, ep 01, clus 0x0000",
         5000);
  send(gatewayDevice, "zcl mfg-code 0x1217");
  MAX_BACKOFF_ITER = 5;
  send(gatewayDevice, "zcl sl-wwah enable-rejoin-alg 10 120 30 90 " + MAX_BACKOFF_ITER);
  send(gatewayDevice, "send " + nodeId("sleepy-doorlock") + " 1 1" );

  networkWait(10000);
  expect("sleepy-doorlock",
         "plugin wwah-connectivity-manager info",
         "Enabled:                         Yes");
  networkWait(DEFAULT_TIMEOUT * 2);

  // Power off gateway, check detection of hub loss on sleepy
  power(gatewayDevice,false);
  message = expectMultiline("sleepy-doorlock",
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: lost connection to hub due to poll control checkin failures",
                              "WWAH Connectivity Mgr: running state TC Rejoin on All Channels \\(connection error mask 0x04, fast rejoin\\: N",
                              "EMBER_NETWORK_DOWN",  // Rejoin request causes network down
                              "WWAH Connectivity Mgr: issued insecure rejoin on all channels \\(mask 0x07FFF800\\)\\: 0x00",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            320000);

  backoffMs = checkBackoffAmount("sleepy-doorlock",
                                 message,
                                 true,  // on a rejoin state?
                                 false, // in fast rejoin?
                                 false, // just completed a fast rejoin?
                                 0);    // number fast rejoins completed

  // Gateway is still down and the trust center join will fail. The stackStatus
  // handler in end-device-move.c will figure out the network status is
  // EMBER_JOINED_NETWORK_NO_PARENT and will declare parent connection lost
  expectMultiline("sleepy-doorlock",
                  "",
                  new String[] {
                    "EMBER_JOIN_FAILED",
                    "WWAH Connectivity Mgr: lost connection to parent",
                  },
                  10000);

  // State progresses to Wait for Trigger
  message = expectMultiline("sleepy-doorlock",
                            "",
                            new String[] {
                              "WWAH Connectivity Mgr: running state Wait for Trigger \\(connection error mask 0x05, fast rejoin\\: N\\)",
                              "WWAH Connectivity Mgr: moving state after .* ms",
                            },
                            backoffMs + 10000);

  // Parent connectivity is lost now, but we're in a waiting
  // state. For sleepies, if the WWAH rejoin algorithm is enabled
  // then the wait will be determined by the WWAH rejoin algorithm
  backoffMs = checkBackoffAmount("sleepy-doorlock",
                                 message,
                                 false,   // on a rejoin state?
                                 false,   // in fast rejoin?
                                 true,    // just completed a fast rejoin?
                                 1);      // number fast rejoins completed

  // State progresses to Secure Rejoin on Preferred Channels
  // This results in success because the secure rejoin is only processed by the
  // router parent
  expectMultiline("sleepy-doorlock",
                  "",
                  new String[] {
                    "WWAH Connectivity Mgr: running state Secure Rejoin on Preferred Channels \\(connection error mask 0x05, fast rejoin\\: N\\)",
                    "WWAH Connectivity Mgr: issued secure rejoin on preferred channels \\(mask 0x02308800\\)\\: 0x00",
                    "EMBER_NETWORK_UP",
                  },
                  backoffMs + 10000);

  // Bring the gateway back online. Make sure hub connectivity works before
  // proceeding to the next test
  power(gatewayDevice, true);
  networkWait(120000);
  expect("sleepy-doorlock",
         "plugin wwah-connectivity-manager info",
         "[  Hub Connection Lost:           No]");
  networkWait(2000);

  // Make sure connection does not drop
  nexpect("sleepy-doorlock",
          "WWAH Connectivity Mgr: lost connection to hub",
          60000);

  // Clean up
  disableAlgorithmOnNetwork(gatewayDevice);
}



void expectDoorEvent(int time, String gatewayDevice)
{
  String timeString = String.format("%02X %02X %02X %02X ",new Object[]{
                                    time & 0xFF,
                                    (time >> 8) & 0xFF,
                                    (time >> 16) & 0xFF,
                                    (time >> 24) & 0xFF});
  expect(gatewayDevice,
         (".*RX .* clus 0x0101 .* FC 09 seq .. cmd 20 payload\\["
          + "02 "    // Manual
          + "0D "   // lock
          + "00 00 " // user ID
          + ".* "    // PIN
          + timeString     // time
          + "00 "
          + "\\]"),
         100000);
}

void testAppEventRetryForSleepyDoorlock(String gatewayDevice)
{
  // PY: create a binding from the server to the client so that we can send our
  // notifications.
  expect("sleepy-doorlock",
         "option binding-table set 1 0x0101 0x01 0x01 {" + eui64(gatewayDevice) + "}",
         "set bind 1: 0x00");

  send("sleepy-doorlock","plugin door-lock-server close");
  networkWait(10000);
  // Do this extra one to work around the weird delay I saw with address resolution


  power(gatewayDevice, false);
  //send 5 events while gateway is away
  for(int i=0;i<5;i++) {
    send("sleepy-doorlock","plugin door-lock-server close");
    send("sleepy-doorlock","plugin critical-message-queue print-queue");
    networkWait(10000);
  }

  networkWait(12000);
  send("sleepy-doorlock","plugin critical-message-queue print-queue");
  networkWait(1000);

  power(gatewayDevice, true);

  // test that all 5 events are received
  for(int i=1;i<6;i++) {
    expectDoorEvent(i, gatewayDevice);
  }

  power(gatewayDevice, false);
  //send 15 events while gateway is away
  for(int i=0;i<15;i++) {
    send("sleepy-doorlock","plugin door-lock-server close");
    send("sleepy-doorlock","plugin critical-message-queue print-queue");
    networkWait(10000);
  }

  networkWait(12000);

  power(gatewayDevice, true);
  //test that the first 9, plus the most recent are received
  for(int i=6;i<15;i++) {
    expectDoorEvent(i, gatewayDevice);
  }
  expectDoorEvent(14+6, gatewayDevice);

  // Bring the sleepy doorlock down, then enqueue a message, which should call
  // the callback function
  expect("sleepy-doorlock",
         "network leave",
         "EMBER_NETWORK_DOWN");
  expectMultiline("sleepy-doorlock",
                  "plugin door-lock-server close",
                  new String[] {
                    "Error: CMQ message enqueue error 0x91", // 0x91 = EMBER_NETWORK_DOWN
                    "Error: CMQ message retry error 0x91"
                  });

  // Bring the sleepy doorlock back up and ensure the message is received
  send(gatewayDevice, "plugin network-creator-security open-network");
  send("light",
       "network pjoin 255");
  networkWait(1000);
  expect("sleepy-doorlock",
         "plugin network-steering start 0",
         "EMBER_NETWORK_UP",
         60000);
  expectDoorEvent(21, gatewayDevice);
}


// EMZIGBEE-2265 make sure the end device doesn't kick itself off of the network
void testHubConnectivityStability(String gatewayDevice)
{
  dbg.println("=== Testing connectivity stability from line " + this.namespace.getInvocationLine() + " ===");
  // turn off debug print on sleepy to reduce print clutter
  send("sleepy-doorlock", "debugprint all_off");

  networkWait(10000);

  // Establish a route from gateway to doorlock
  send("doorlock", "zcl global read 0 0");
  expect("doorlock",
         "send 0x0000 1 1",
         "RX len 8, ep 01, clus 0x0000",
         5000);
  networkWait(1000);

  // Rediscover the node in the address table by sending it a NWK addr request
  String doorlockNodeId = nodeId("doorlock");
  String doorlockEui = eui64("doorlock");
  String doorlockEuiLittleEndian = getEui64LittleEndian("doorlock");
  networkWait(1000);
  send(gatewayDevice, "plugin address-table add {" + doorlockEuiLittleEndian + "}");
  networkWait(2000);
  send(gatewayDevice, "zdo nwk {" + doorlockEui + "}");
  networkWait(10000);
  expect(gatewayDevice,
         "plugin address-table print",
         ".*" + doorlockNodeId + ".*");

  // Rediscover the node in the address table by sending it a NWK addr request
  //inline with the fix for EMZIGBEE-2402 
  String doorlockNodeId = nodeId("doorlock");
  String doorlockEui = eui64("doorlock");
  String doorlockEuiLittleEndian = getEui64LittleEndian("doorlock");
  networkWait(1000);
  send(gatewayDevice, "plugin address-table add {" + doorlockEuiLittleEndian + "}");
  networkWait(2000);
  send(gatewayDevice, "zdo nwk {" + doorlockEui + "}");
  networkWait(10000);
  expect(gatewayDevice,
         "plugin address-table print",
         ".*" + doorlockNodeId + ".*");

  // Enable algorithm on doorlock
  send(gatewayDevice, "zcl mfg-code 0x1217");
  MAX_BACKOFF_ITER = 5;
  send(gatewayDevice, "zcl sl-wwah enable-rejoin-alg 10 120 20 30 " + MAX_BACKOFF_ITER);
  send(gatewayDevice, "send " + nodeId("doorlock") + " 1 1" );

  networkWait(3000);
  expect("doorlock",
         "plugin wwah-connectivity-manager info",
         "Enabled:                         Yes");

  // Wait to see if there's a network down
  dbg.println("=== Waiting for 200s to check if network goes down from line " + this.namespace.getInvocationLine() + " ===");
  nexpect("doorlock", "NETWORK_DOWN", 200000);
}

void testLongUptime(String gatewayDevice)
{
  expect("doorlock",
    "plugin wwah-connectivity-manager info",
    "[  Long Uptime:                   No]");
  networkWait(5000);

  send(gatewayDevice,"debugprint all_off");
  send("light","debugprint all_off");
  send("doorlock","debugprint all_off");

  networkWait(10 * 60 * 1000); // 10 minutes in microseconds -- allow for long uptime to be set

  send(gatewayDevice,"debugprint all_on");
  send("light","debugprint all_on");
  send("doorlock","debugprint all_on");

  expect("doorlock",
    "plugin wwah-connectivity-manager info",
    "[  Long Uptime:                   Yes]");
  networkWait(5000);
}

void testBadParentRecovery(String gatewayDevice)                                             
{                                                                               
  dbg.println("=== Testing bad Parent Recovery from line " +
this.namespace.getInvocationLine() + " ===");
                                                                                
  // Establish a route from gateway to doorlock                                 
  send("doorlock", "zcl global read 0 0");                                      
  expect("doorlock",                                                            
         "send 0x0000 1 1",                                                     
         "RX len 8, ep 01, clus 0x0000",                                        
         5000);                                                                 
   
  // Disable the algorithm remotely
  // should not do anything, becasue by default this is disabled
  send(gatewayDevice, "zcl mfg-code 0x1217"); 
  send(gatewayDevice, "zcl sl-wwah disable-bad-parent-recovery");                   
  send(gatewayDevice, "send " + nodeId("doorlock") + " 1 1" );   
  expect("doorlock","WWAH Connectivity Mgr: bad parent recovery already disabled.");


  // Enable algorithm on doorlock with the                                      
  // link quality checking window of 1 min                                      
  send("doorlock","plugin wwah-connectivity-manager parent-recovery 1 1");      
  expect("doorlock","WWAH Connectivity Mgr: Enabled bad parent recovery checking parent quality every 1 minutes",1000);

  //wait for some time so the avgParentRssi is checked a few times                    
  networkWait(142000);
  //in sumlation the avg RSSI remains above the default min Rssi value of -100
  // therefore 0 rejoins should be attempted because of badParent
  send("doorlock",                                                              
    "plugin wwah-connectivity-manager info");                                   
  expect("doorlock",                                                            
    "  Quality checks:                2");
  expect("doorlock","  Attempted rejoins:             0");  
   
  send("doorlock",                                                              
      "plugin wwah-connectivity-manager min-rssi 120");                           
  
  networkWait(142000);
  send("doorlock",                                                              
    "plugin wwah-connectivity-manager info");
  
  // Every time we compare the current parents Rssi with min Rssi we decide this
  // is a bad parent. So we leave the network, and reset #of quality checks                                     
  expect("doorlock",                                                            
    "  Quality checks:                0");                                                                       
  // We compare the parent Rssi with min rssi, and everytime we decide it is a
  // bad parent. We disconnect and we try to rejoin. No other node is avaialble
  // so we will reconnect to this node. And try another rejoin next time.             
  expect("doorlock","  Attempted rejoins:             2");
 
   
  // Disable the algorithm remotely                                                           
  send(gatewayDevice, "zcl mfg-code 0x1217");                                       
  send(gatewayDevice, "zcl sl-wwah disable-bad-parent-recovery");                   
  send(gatewayDevice, "send " + nodeId("doorlock") + " 1 1" );                      
  expect("doorlock","WWAH Connectivity Mgr: Disabled bad parent recovery",1000);
                                                                                
                                                                                
  // Enable algorithm on doorlock with the                                      
  // window of 1 min for checking parent quality                                      
  send("doorlock","plugin wwah-connectivity-manager parent-recovery 1 1");      
  expect("doorlock","WWAH Connectivity Mgr: Enabled bad parent recovery checking parent quality every 1 minutes",1000);
  networkWait(1000);

  networkWait(142000);                                                          
  send("doorlock",                                                              
    "plugin wwah-connectivity-manager info");     
  //checked the parent quality 2 times, but resulted to rejoins                              
  expect("doorlock",                                                            
    "  Quality checks:                0"); 
   // since we disabled and re-enabled this feature the value for attempted
   // rejoins has been reset to 0. And then increased again.                                             
  expect("doorlock","  Attempted rejoins:             2");
  
  send("doorlock",                                                              
    "plugin wwah-connectivity-manager min-rssi -11");                           
  networkWait(142000);  
  send("doorlock",                                                              
    "plugin wwah-connectivity-manager info");                                   
  //checked the parent quality 2 times, since the last time we re-enabled the
  //feature                
  expect("doorlock",                                                            
    "  Quality checks:                2");                                      
   // number of rejoins have not changed                   
  expect("doorlock","  Attempted rejoins:             2");
 
  networkWait(1000); 

  // making sure even if the rejoin algorithm is disabled, 
  // we will try parent rejoin if badParentRecovery is enabled
  send(gatewayDevice, "zcl mfg-code 0x1217");                                    
  send(gatewayDevice, "zcl sl-wwah disable-rejoin-alg");                            
  send(gatewayDevice, "send " + nodeId("doorlock") + " 1 1" );    
  networkWait(1000);
 

  // Take down the parent                                                                                              
  network.power("light", false);
  networkWait(96000);//make ssure parent loss detection timeout is passed
  
  // bad parent recovery would trigger a rejoin
  // EMZIGBEE-4404 & EMZIGBEE-4407: we increase the short poll interval of
  // Z3DoorLockWithWwah from 1 second to 20 seconds to accommodate
  // the time unit change of the MACPollFailureWaitTime,
  // so here we need to wait longer to get the EMBER_JOIN_FAILED.
  expect("doorlock",".*EMBER_JOIN_FAILED.*",150000);
  
  // turn on the parent node again
  networkWait(142000);
  network.power("light", true);  
  setupEncryption(); 
  
  // Independent of the rejoin-algorithm being enabled, we will recover the lost
  // parent connection, because of bad parent recovery 
  expect("doorlock",".*EMBER_NETWORK_UP .*",80000);
}

void testDisableMgmtLeaveNoRejoin(String endDevice, String gatewayDevice)
{
  String nodeIdEndDevice = nodeId(endDevice);

  networkWait(2000);

  send(gatewayDevice, "zcl mfg-code 0x1217");
  send(gatewayDevice, "zcl sl-wwah disable-mgmt-leave-wo-rejoin");
  send(gatewayDevice, "send " + nodeIdEndDevice + " 1 1" );
  expect(gatewayDevice,"DEFAULT_RESP: \\(SL Works With All Hubs\\) cmd 15 status 00");

  // WWAH requirement Disable MGMT Leave Without Rejoin (if enabled) expects
  // us to not accept a MGMT leave request if the rejoin bit is not set in
  // the request. Only exception should be if the request is sourced from the
  // TC *and* it is APS encrypted.
  send(gatewayDevice, "zdo leave "  + nodeIdEndDevice + " 0 0");
  expect(gatewayDevice,"Processing message: len=2 profile=0000 cluster=8034");

  // Check if the end device is still on the network.
  networkWait(5000);
  send(gatewayDevice, "zcl global read 0 0");
  expect(gatewayDevice,
         "send " + nodeIdEndDevice + " 1 1",
         "RX len 8, ep 01, clus 0x0000",
         5000);

  // APS encrypted MGMT leave request from the TC should go through...
  // ... BUT, we dont support it at the moment: EMZIGBEE-4556
  //   - Global read should be changed to expect an EMBER_NETWORK_DOWN whenever
  //     the above ticket is solved.
  //   - Also, need to find a proper way to require APS encryption for specific
  //     messages: EMZIGBEE-4567.
  // send(gatewayDevice, "option security aps on");
  send(gatewayDevice, "zdo leave " + nodeIdEndDevice + " 0 0");
  expect(gatewayDevice,"Processing message: len=2 profile=0000 cluster=8034");

  // Check if the end device is still on the network.
  networkWait(5000);
  send(gatewayDevice, "zcl global read 0 0");
  expect(gatewayDevice,
         "send " + nodeIdEndDevice + " 1 1",
         "RX len 8, ep 01, clus 0x0000",
         5000);
}

void leaveAllDevices(String gatewayDevice)                                             
{ 

  expect("doorlock",
         "network leave",
         "EMBER_NETWORK_DOWN");
  network.power("doorlock", false);
  networkWait(1000); 

  expect("light",
         "network leave",
         "EMBER_NETWORK_DOWN");
  network.power("light", false);
  networkWait(1000); 

  expect(gatewayDevice,
         "network leave",
         "EMBER_NETWORK_DOWN");
  network.power(gatewayDevice, false);
  networkWait(1000); 

  network.power("doorlock", true);
  networkWait(1000); 

  network.power("sleepy-doorlock", true);
  networkWait(1000); 
}


startNetwork("gateway");
testFastPollOnStartup();
disableAlgorithmOnNetwork("gateway");
testHubConnectivityLossDetectionRouter("gateway");
testHubConnectivityLossDetectionEndDevice("gateway");
testHubConnectivityLossDetectionSleepyEndDevice("gateway");
testParentConnectivityLossDetectionForEndDevice("doorlock", "gateway");
testParentConnectivityLossDetectionForSleepyEndDevice("sleepy-doorlock", "gateway");
testAppEventRetryForSleepyDoorlock("gateway");
testHubConnectivityStability("gateway");
testLongUptime("gateway");
testBadParentRecovery("gateway");
testDisableMgmtLeaveNoRejoin("doorlock", "gateway");
leaveAllDevices("gateway");

startNetwork("gateway-no-tc");
disableAlgorithmOnNetwork("gateway-no-tc");
testHubConnectivityLossDetectionRouter("gateway-no-tc");
testHubConnectivityLossDetectionEndDevice("gateway-no-tc");
testParentConnectivityLossDetectionForEndDevice("doorlock", "gateway-no-tc");
