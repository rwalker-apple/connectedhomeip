import com.ember.peek.SimulatedNetwork;

// The purpose of this test is to exercise WWAH functionality.

source("util.bsh");

if (!runArgument.runUsingHostApps) {
  // The Z3 Gateway can only be compiled as a host
  std.print("** this test is only run in host mode ** ");
  return;
}

SimulatedNetwork network = createNetwork();
// Load Z3Gateway app as HOST.
Location gatewayLocation = gridLocations[1];
TestNode gateway = new TestNode("gateway",
                                "", // no SoC image
                                "build/af-test-apps/Z3GatewayWithWwah-simulation-ezsp/Z3GatewayWithWwah",
                                "app/ncp/sample-app/ncp-uart-sw/simulation/build/exe/ncp-uart-sw",
                                gatewayLocation);
addAndLoadDevicesWithLocation(new TestNode[] { gateway }, true, false); // useHost, don't useSpi

// Load Z3Switch app as a SoC device.
Location enddeviceLocation = gridLocations[4];
TestNode doorlock = new TestNode("door-lock",
                                  "build/af-test-apps/Z3DoorLockWithWwah-simulation/Z3DoorLockWithWwah",
                                  // "", // no SOC image
                                  "", // no HOST image
                                  "", // no NCP image
                                  enddeviceLocation);
addAndLoadDevicesWithLocation(new TestNode[] { doorlock }, false); // don't useHost

Location proCompliaceLocation = gridLocations[2];
TestNode proCompliance = new TestNode("pro-compliance",
                                      "build/pro-compliance-unix-simulation/pro-compliance",
                                      "", // no HOST image
                                      "", // no NCP image
                                      proCompliaceLocation);
addAndLoadDevicesWithLocation(new TestNode[] { proCompliance }, false); // don't useHost

lazyExpect = true;

void startNetwork()
{
  setupEncryption();

  // Wait for the nodes to reset.
  networkWait(DEFAULT_TIMEOUT);

  // Check inital base device masks.
  expectMultiline("gateway",
                  "plugin network-creator status",
                  new String[]  {
                    "(1).*[11, 15, 20, 25]",
                    "(2).*[12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 26]",
                  });

  // The gateway forms a centralized network.
  send("gateway", "plugin network-creator start 1");
  expect("gateway",
         "NWK Creator: Form. Channel.*Status: 0x00",
         DEFAULT_TIMEOUT << 1);

  // Open the network for joining using the gateway.
  send("gateway", "plugin network-creator-security open-network");
  expect("gateway", "Open network: 0x00");

  dbg.println("=== Testing keys print from line " + this.namespace.getInvocationLine() + " ===");
  networkWait(DEFAULT_TIMEOUT);
  send("gateway", "keys print");
  networkWait(DEFAULT_TIMEOUT);
  send("door-lock", "keys print");
  networkWait(DEFAULT_TIMEOUT);


  // Join with the door-lock. 
  network.pressButton("door-lock", "0");
  network.releaseButton("door-lock", "0");
  networkWait(timeout);       // there was a beacon collision hence adding a delay to avoid it.

  expect("door-lock", "Trust center link key update status: 0x65",60000);

  networkWait(DEFAULT_TIMEOUT);
  networkWait(DEFAULT_TIMEOUT);

  send("pro-compliance", "set_security 0x1100 {5A6967426565416C6C69616E63653039} {} 0");
  send("gateway", "network pjoin 150");
  send("pro-compliance", "join " + channel("gateway") + " " + panId("gateway") + " 0");
  expect("pro-compliance", ".*Stack up.*");
  send("pro-compliance", "request_key {}");

  dbg.println("=== Testing keys print from line " + this.namespace.getInvocationLine() + " ===");
  send("gateway", "keys print");
  networkWait(DEFAULT_TIMEOUT);
  send("door-lock", "keys print");
  networkWait(DEFAULT_TIMEOUT);
}

void testTimeRequest(){
  dbg.println("== Test Request Time ==");

  send("gateway", "zcl mfg-code 0x1217");
  send("gateway", "zcl sl-wwah req-time");
  send("gateway", "send " + nodeId("door-lock") + " 1 1" );

  expect("door-lock", ".*RX len 5, ep 01, clus 0xFC57" +
             " \\(SL Works With All Hubs\\) mfgId 1217 FC 05 seq .* cmd 06 payload\\[\\]");

  // Door lock sends default response upon receipt of Request Time command.
  //  mfgCode=0x1217, defRsp=0x0B, cmdId=0x06, status=0x00
  expect("door-lock", ".*TX buffer: \\[0C 17 12 .. 0B 06 00 .*" );

  // Gateway receives read time attrib request for attribs:
  // 0x0000, 0x0001, 0x0003, 0x0004, 0x0005, 0x0007
  expect("gateway", ".*RX len 15, ep 01, clus 0x000A" +
              " \\(Time\\) FC 00 seq .. cmd 00 payload\\[00 00 01 00 03 00 04 00 05 00 07 00 \\].*");

  // Lock receives read attribute response.
  expect("door-lock", ".*RX len 28, ep 01, clus 0x000A" +
            " .* FC 18 seq .." +
            " cmd 01 payload\\[00 00 00 .. .. .. .. 00 01 00 .* 00 03 00 .* 04 00 .* 05 00 .* 07 00 .. \\].*");
}

void testApsAcksOnUnicasts(){
  dbg.println("== Test APS ACK On Unicasts Requirement ==");

  send("gateway", "zcl mfg-code 0x1217");
  send("gateway", "zcl sl-wwah enable-require-aps-ack-unicast 1 0x0005");
  send("gateway", "send " + nodeId("door-lock") + " 1 1" );

  expect("gateway", ".*DEFAULT_RESP: \\(SL Works With All Hubs\\) cmd 0F status 00");

  send("gateway", "zcl mfg-code 0x1217");
  send("gateway", "zcl sl-wwah query-aps-ack-requirement");
  send("gateway", "send " + nodeId("door-lock") + " 1 1" );

  expect("gateway", ".*RX len 6, ep 01, clus 0xFC57" +
             " \\(SL Works With All Hubs\\) mfgId 1217 FC 0D seq .* cmd 04 payload\\[00 \\]");

  send("gateway", "zcl mfg-code 0x1217");
  send("gateway", "zcl sl-wwah disable-require-aps-ack-unicast");
  send("gateway", "send " + nodeId("door-lock") + " 1 1" );

  expect("gateway", ".*DEFAULT_RESP: \\(SL Works With All Hubs\\) cmd 10 status 00");
}

static final String WWAH_MFG_ID = "0x1217"; // Assigned TO Silabs
static final String WWAH_CLUSTER_ID = "0xFC57"; // Assigned BY Silabs

// Attribute IDs
// static final String SL_WWAH_VERSION = "0x0000"; removed in WWAH cluster spec version 023
//static final String SL_OTA_FROM_TC_ONLY = "0x0001"; removed in WWAH cluster spec version 012
static final String SL_DISABLE_OTA_DOWNGRADES = "0x0002";
static final String SL_MGMT_LEAVE_WITHOUT_REJOIN_ENABLED = "0x0003";
static final String SL_NWK_RETRY_COUNT = "0x0004";
static final String SL_MAC_RETRY_COUNT = "0x0005";
static final String SL_ROUTER_CHECKIN_ENABLED = "0x0006";
static final String SL_TOUCHLINK_INTERPAN_ENABLED = "0x0007";
static final String SL_WWAH_PARENT_CLASSIFICATION_ENABLED = "0x0008";
static final String SL_WWAH_APP_EVENT_RETRY_ENABLED = "0x0009";
static final String SL_WWAH_APP_EVENT_RETRY_QUEUE_SIZE = "0x000A";
static final String SL_WWAH_REJOIN_ENABLED = "0x000B";
static final String SL_MAC_POLL_FAILURE_WAIT_TIME = "0x000C";
static final String SL_CONFIGURATION_MODE_ENABLED = "0x000D";
static final String SL_CURRENT_DEBUG_REPORT_ID = "0x000E";
static final String SL_TC_SECURITY_ON_NTWK_KEY_ROTATION_ENABLED = "0x000F";
static final String SL_WWAH_BAD_PARENT_RECOVERY_ENABLED = "0x0010";
static final String SL_PENDING_NETWORK_UPDATE_CHANNEL = "0x0011";
static final String SL_PENDING_NETWORK_UPDATE_PANID = "0x0012";

void testReadWwahAttr(String attrId, String payload)
{
  dbg.println("=== Reading attribute " + attrId + " ===");
  String response = String.format("RX len .., ep 01, clus 0xFC57 \\(SL Works With All Hubs\\) mfgId 1217 FC 1C seq .. cmd 01 payload\\[%s \\]", new Object[] {payload});
  send("gateway", "zcl mfg-code " + WWAH_MFG_ID);
  send("gateway", "zcl global read " + WWAH_CLUSTER_ID + " " + attrId);
  expect("gateway", "send " + nodeId("door-lock") + " 1 1", response);
  networkWait(DEFAULT_TIMEOUT);
}

class AttrTestCase {
  String attrId;
  String payload;
  AttrTestCase(String attrId, String payload) {
    this.attrId = attrId;
    this.payload = payload;
  }
};

AttrTestCase[] attrTestCases =
{
  //new AttrTestCase(SL_WWAH_VERSION, "00 00 00 21 01 00"),
  //new AttrTestCase(SL_OTA_FROM_TC_ONLY, "01 00 00 10 00"),
  new AttrTestCase(SL_DISABLE_OTA_DOWNGRADES, "02 00 00 10 01"),
  new AttrTestCase(SL_MGMT_LEAVE_WITHOUT_REJOIN_ENABLED, "03 00 00 10 01"),
  // NWK retry count = 15 (emZigbeeMaxNetworkRetries)
  new AttrTestCase(SL_NWK_RETRY_COUNT, "04 00 00 20 0F"),
  // MAC retry count = 3 (emMacMaxAckRetries)
  new AttrTestCase(SL_MAC_RETRY_COUNT, "05 00 00 20 03"),
  new AttrTestCase(SL_ROUTER_CHECKIN_ENABLED, "06 00 00 10 00"),
  new AttrTestCase(SL_TOUCHLINK_INTERPAN_ENABLED, "07 00 00 10 01"),
  // Parent Classification is default enabled. This differs from the current
  // WWAH ZCL spec, but we're working to change the default value to 0x01
  new AttrTestCase(SL_WWAH_PARENT_CLASSIFICATION_ENABLED, "08 00 00 10 00"),
  new AttrTestCase(SL_WWAH_APP_EVENT_RETRY_ENABLED, "09 00 00 10 01"),
  new AttrTestCase(SL_WWAH_APP_EVENT_RETRY_QUEUE_SIZE, "0A 00 00 20 0A"),
  new AttrTestCase(SL_WWAH_REJOIN_ENABLED, "0B 00 00 10 00"),
  new AttrTestCase(SL_MAC_POLL_FAILURE_WAIT_TIME, "0C 00 00 20 03"),
  new AttrTestCase(SL_CONFIGURATION_MODE_ENABLED, "0D 00 00 10 01"),
  new AttrTestCase(SL_CURRENT_DEBUG_REPORT_ID, "0E 00 00 20 00"),
  new AttrTestCase(SL_TC_SECURITY_ON_NTWK_KEY_ROTATION_ENABLED, "0F 00 00 10 00"),
  new AttrTestCase(SL_WWAH_BAD_PARENT_RECOVERY_ENABLED, "10 00 00 10 00"),
  new AttrTestCase(SL_PENDING_NETWORK_UPDATE_CHANNEL, "11 00 00 20 FF"),
  new AttrTestCase(SL_PENDING_NETWORK_UPDATE_PANID, "12 00 00 21 FF FF"),
};

void testWwahAttributes()
{
  for (AttrTestCase tc : attrTestCases) {
    testReadWwahAttr(tc.attrId, tc.payload);
  }
}

void testMgmtLeaveWithoutRejoin()
{
  dbg.println("== Test MGMT Leave Without Rejoin ==");
  
  // Tell door lock to leave and rejoin via pro-compliance to change parents
  // Also test that zdo leave works
  send("gateway", "zdo leave " + nodeId("door-lock") + " 0 0");
  expect("door-lock", "NETWORK_DOWN");
  // Disable permit join on gateway and enable in pro-compliance
  send("gateway", "network pjoin 0");
  send("pro-compliance", "permit_joins 0xFF");

  send("door-lock", "plugin network-steering start 0");
  expect("door-lock", "EMBER_NETWORK_UP", 80000); // there was a beacon collision hence waiting 80s to avoid it.
  expect("door-lock", "Trust center link key update status: 0x65", 5000);
  expect("door-lock", "Join network complete: 0x00", 5000);
  networkWait(DEFAULT_TIMEOUT);

  // Send NWK leave which should be honored because leave without rejoin is still enabled
  send("pro-compliance", "send_leave " + nodeId("door-lock") + " {" + getEui64LittleEndian("door-lock")+"}");
  expect("door-lock", "EMBER_NETWORK_DOWN");
  networkWait(DEFAULT_TIMEOUT);
  // Rejoin again
  send("gateway", "plugin network-creator-security open-network");
  expect("gateway", "Open network: 0x00");
  // Disable permit join on gateway and enable in pro-compliance
  send("gateway", "network pjoin 0");
  send("pro-compliance", "permit_joins 0xFF");
  // Join using network steering since TC link key has been overwritten
  send("door-lock", "plugin network-steering start 0");
  expect("door-lock", "EMBER_NETWORK_UP", 40000);
  expect("door-lock", "Trust center link key update status: 0x65", 5000);
  networkWait(DEFAULT_TIMEOUT);

  // Disable leave without rejoin
  send("gateway", "zcl mfg-code 0x1217");
  send("gateway", "zcl sl-wwah disable-mgmt-leave-wo-rejoin");
  send("gateway", "send " + nodeId("door-lock") + " 1 1" );
  // Check attribute to ensure leave without rejoin was disabled
  testReadWwahAttr(SL_MGMT_LEAVE_WITHOUT_REJOIN_ENABLED,  "03 00 00 10 00");

  // Wait to avoid data poll which will trigger leave with rejoin
  networkWait(3000);

  // Disable short polls from end device which trigger leave with rejoin
  send("door-lock", "plugin end-device-support force-short-poll 0");

  // send NWK leave without rejoin which should be ignored
  send("pro-compliance", "send_leave " + nodeId("door-lock") + " {" + getEui64LittleEndian("door-lock")+"}");
  nexpect("door-lock", "EMBER_NETWORK_DOWN");

  // send zdo leave without rejoin which should be ignored
  // that was the case before R22 errata, but based on the new errata case CCB
  // 2255  the child would end-up leaving the network because:
  // this zdo leave would cause the parent to forward the message to the child
  // and child is going to respond with LEAVE RESPONSE. 
  // The parent does not have the door lock in its child table anymore, so
  // accoring to errata, it would send out a leave with rejoin bit set to the
  // door lock
  send("gateway", "zdo leave " + nodeId("door-lock") + " 0 0");
  expect("door-lock", "EMBER_NETWORK_DOWN", 1000);
  networkWait(10000);

  // reboot door lock and send leave again to verify attribute persistence
  socReboot("door-lock");
  expect("door-lock", "EMBER_NETWORK_UP");
  // Wait to offset poll
  networkWait(5000);
  send("pro-compliance", "send_leave " + nodeId("door-lock") + " {" + getEui64LittleEndian("door-lock")+"}");
  // This is fragile because the parent deletes the child after the send_leave
  // command. When the child polls next, the parent tells it to leave with
  // rejoin enabled, so the child ends up actually leaving. We try to mitigate
  // by not-expecting the EMBER_NETWORK_DOWN right after we send the send_leave
  // and hopefully before it polls again, yielding the second leave w/ rejoin
  nexpect("door-lock", "EMBER_NETWORK_DOWN", 600);
}

void testPoweringOffNotification(){
  int reason = 2;
  int mfgId = 0x4178;

  dbg.println("=== Send Powering Off to WWAH Client ===");
  send("door-lock", "plugin wwah-server poweringOff 1 1 " + reason + " " + mfgId);
  // Gateway receives Powering Off Notification
  expect("gateway", ".*RX len 9, ep 01, clus 0xFC57 .* mfgId 1217 FC 0D seq .. " +
          "cmd 01 payload\\[02 78 41 00 \\].*");

  // Door-Lock receives default response.
  // Gateway currently doesn't handle the PoweringOn/Off commands
  // so it returns a status of 0x83.
  // Expect door lock to receive:
  //  1. Default Response packet.
  //  2. Print in emberAfSlWwahClusterServerDefaultResponseCallback().
  //  3. Print in powerNotificationCb() - SendPoweringOff() callback, FAILURE status (1).
  expectMultiline("door-lock",
                  "",
                  new String[]  {
                    ".*RX len 7, ep 01, clus 0xFC57 .* mfgId 1217 FC 04 seq .. " +
                      "cmd 0B payload\\[01 83 \\]",
                    "Powering off default response error: 0x83",
                    "Power Notification CB: result=1",
                  });

  dbg.println("=== Send Powering Off to Wrong Endpoint on WWAH Client ===");
  send("door-lock", "plugin wwah-server poweringOff 1 12 " + reason + " " + mfgId);
  // Expect timeout status to be received in SendPoweringOff() callback since GW drops the packet.
  expect("door-lock", "Power Notification CB: result=2");
}

void testPoweringOnNotification(){
  int reason = 4;
  int mfgId = 0x1D3C;

  dbg.println("=== Send Powering On to WWAH Client ===");
  send("door-lock", "plugin wwah-server poweringOn 1 1 " + reason + " " + mfgId);

  // Gateway receives Powering On Notification
  expect("gateway", ".*RX len 9, ep 01, clus 0xFC57 .* mfgId 1217 FC 0D seq .. " +
          "cmd 02 payload\\[04 3C 1D 00 \\].*");
  // Door-Lock receives default response.
  // Gateway currently doesn't handle the PoweringOn/Off commands
  // so it returns a status of 0x83.
  expect("door-lock", ".*RX len 7, ep 01, clus 0xFC57 .* mfgId 1217 FC 04 seq .. " +
          "cmd 0B payload\\[02 83 \\].*");
  // No default response callback expected for Powering On.

  // Reboot door-lock and check if its send power on notification.
  socReboot("door-lock");
  expect("door-lock", "EMBER_NETWORK_UP");
  // Gateway receives Powering On Notification.
  // Reset reason is unknown (0x00) as simulator reasons are mapped to em2xx which are
  // not used in wwah plugin.
  expect("gateway", ".*RX len 9, ep 01, clus 0xFC57 .* mfgId 1217 FC 0D seq .. " +
          "cmd 02 payload\\[00 17 12 00 \\].*", 10000);
}

void testDisablingTouchlink(){
  send("gateway", "plugin address-table add {0000000000000003}");
  networkWait(2000);
  send("gateway", "zdo nwk {" + eui64("door-lock") + "}");
  networkWait(2000);
  send("gateway","plugin address-table print");
  networkWait(10000);
  dbg.println("=== Test disable touchlink interpan messaging ===");
  send("gateway", "zcl mfg-code 0x1217");
  send("gateway", "zcl sl-wwah disable-tl-interpan-msg-support");
  send("gateway", "keys print");
  send("door-lock","keys print");
  send("gateway", "send " + nodeId("door-lock") + " 1 1");
  dbg.println("=== BEFORE EXPECT ===");
  expect("door-lock", ".*RX len 5, ep 01, clus 0xFC57" +
             " \\(SL Works With All Hubs\\) mfgId 1217 FC 05 seq .* cmd 16 payload\\[\\]",5000);

  dbg.println("=== BEFORE READ CHECK ===");
/*
  send("gateway", "plugin address-table add {0000000000000003}");
  networkWait(2000);
  send("gateway", "zdo nwk {" + eui64("door-lock") + "}");
  networkWait(2000);
*/

  send("gateway", "plugin address-table print");
  networkWait(10000);

  testReadWwahAttr(SL_TOUCHLINK_INTERPAN_ENABLED, "07 00 00 10 00");

  socReboot("door-lock");
  networkWait(10000);

  testReadWwahAttr(SL_TOUCHLINK_INTERPAN_ENABLED, "07 00 00 10 00");

  //Touchlink disabling using the emberZllSetPolicy function is already tested in zll beanshells
  //WWah apps don't include the zll plugins so they can't execute zll cli
}

void testSetMacPollFailureWaitTime() {
  // Set waitTime to 4 sec for testing.
  int macPollFailureWaitTimeSec = 0x04;
  int msPerSec = 1000;
  int extraTimeoutMs = 100;

  dbg.println("== Test Set Mac Poll Failure Wait time ==");

  send("gateway", "zcl mfg-code 0x1217");
  send("gateway", "zcl sl-wwah set-mac-poll-fail-wait-time " + macPollFailureWaitTimeSec);
  send("gateway", "send " + nodeId("door-lock") + " 1 1" );

  expect("door-lock",
         String.format(".*RX len 6, ep 01, clus 0xFC57 " +
         "\\(SL Works With All Hubs\\) mfgId 1217 FC 05 seq .* cmd 0D payload" +
         "\\[%02X \\]", new Object[] {macPollFailureWaitTimeSec}));

  testReadWwahAttr(SL_MAC_POLL_FAILURE_WAIT_TIME, String.format("0C 00 00 20 %02X",
                   new Object[] {macPollFailureWaitTimeSec}));

  // Reboot the 'door-lock' and read the attribute to verify its value persists.
  socReboot("door-lock");
  networkWait(10);        // hack around sequence collision
  socReboot("door-lock"); // with an extra reboot
  networkWait(10000);

  testReadWwahAttr(SL_MAC_POLL_FAILURE_WAIT_TIME, String.format("0C 00 00 20 %02X",
                   new Object[] {macPollFailureWaitTimeSec}));

  // Power off other devices to verify
  // macPollFailureWaitTimeSec between super retries
  power("gateway", false);
  network.power("pro-compliance", false);
  int longPollTimeoutMs = 300000; // LONG_POLL_INTERVAL_SECONDS
  int macPollRetryNum = 2; // MAX_SUPER_RETRY_FOR_MAC_DATA_POLL
  expect("door-lock",
         "Next poll .* in " + longPollTimeoutMs + " ms",
         longPollTimeoutMs);

  // We should see this message after mac polls.
  expect("door-lock",
         "Number of short poll attempts made to resolve parent connectivity.*",
         macPollFailureWaitTimeSec * msPerSec * macPollRetryNum + extraTimeoutMs);

  // Power back on.
  power("gateway", true);
  network.power("pro-compliance", true);
  networkWait(100000);

  // Re-establish a route with the end device,
  // make sure we can read attribute from the door-lock.
  testReadWwahAttr(SL_MAC_POLL_FAILURE_WAIT_TIME, String.format("0C 00 00 20 %02X",
                   new Object[] {macPollFailureWaitTimeSec}));
  networkWait(2000);
}

void testClearBindingTableCommand()
{
  dbg.println("== Test Clear Binding Table Command ==");

  // Configure some bindings
  String euiGateway = eui64("gateway");
  expect("door-lock",
         "option binding-table set 0 0x1234 0x01 0x01 {" + euiGateway + "}",
         ".*set bind 0: 0x00");
  expect("door-lock",
         "option binding-table set 1 0x789A 0x01 0x01 {" + euiGateway + "}",
         ".*set bind 1: 0x00");

  expect("door-lock",
         "option binding-table print",
         "2 of .* bindings used");

  send("gateway", "zcl mfg-code 0x1217");
  send("gateway", "zcl sl-wwah clear-binding-table");
  send("gateway", "send " + nodeId("door-lock") + " 1 1" );

  expect("door-lock",
         ".*RX len 5, ep 01, clus 0xFC57" +
         " \\(SL Works With All Hubs\\) mfgId 1217 FC 05 seq .. cmd 0A payload\\[\\]");

  // Door lock sends default response upon receipt of Clear Binding Table
  // cmd
  // mfgCode=0x1217, defRsp=0x0B, cmdId=0x0A, status=0x00
  expect("door-lock",
         ".*TX buffer: \\[0C 17 12 .. 0B 0A 00 .*" );

  // Make sure binding table is purged
  expect("door-lock",
         "option binding-table print",
         "0 of .* bindings used");
}

void testConfigurationMode() {
  dbg.println("=== Test configuration mode ===");

  // Initially enabled. Toggle it via ZCL Enable/DisableConfigurationMode commands
  // and verify the attribute change value accordingly.

  send("gateway", "zdo nwk {" + eui64("door-lock") + "}");
  networkWait(2000);
  // Disable.
  send("gateway", "zcl mfg-code 0x1217");
  send("gateway", "zcl sl-wwah disable-config-mode");
  send("gateway", "send " + nodeId("door-lock") + " 1 1" );
  expect("gateway", ".*RX len 7, ep 01, clus 0xFC57 .* mfgId 1217 FC 0C seq .. " +
          "cmd 0B payload\\[1D 00 \\].*");
  testReadWwahAttr(SL_CONFIGURATION_MODE_ENABLED, "0D 00 00 10 00");

  // Reboot the 'door-lock' and verify the value persists (still DISabled).
  socReboot("door-lock");
  networkWait(10000);

  testReadWwahAttr(SL_CONFIGURATION_MODE_ENABLED, "0D 00 00 10 00");

  // Enable.
  send("gateway", "zcl mfg-code 0x1217");
  send("gateway", "zcl sl-wwah enable-config-mode");
  send("gateway", "send " + nodeId("door-lock") + " 1 1" );
  expect("gateway", ".*RX len 7, ep 01, clus 0xFC57 .* mfgId 1217 FC 0C seq .. " +
          "cmd 0B payload\\[1C 00 \\].*");
  testReadWwahAttr(SL_CONFIGURATION_MODE_ENABLED, "0D 00 00 10 01");

  // Reboot the 'door-lock' and verify the value persists (still ENabled).
  socReboot("door-lock");
  networkWait(10000);
  testReadWwahAttr(SL_CONFIGURATION_MODE_ENABLED, "0D 00 00 10 01");
}

void testPendingNetworkUpdate()
{
  dbg.println("=== Test Set Pending Network Update Command ===");
  // Note*: Test cases for panId update is defined in custom EM pro-compliance test
  // since there is no easier way to trigger panId update from this beanshell.

  // Test 1: a) Set pending channel and panId
  int channel = 20;
  int panId = 0x1591;

  send("gateway", "zcl mfg-code 0x1217");
  send("gateway", "zcl sl-wwah set-pending-network-update " + channel + " " + panId);
  send("gateway", "send " + nodeId("door-lock") + " 1 1" );

  expect("door-lock", ".*RX len 8, ep 01, clus 0xFC57" +
             " \\(SL Works With All Hubs\\) mfgId 1217 FC 05 seq .* cmd 0E payload\\["
             + Integer.toHexString(channel).toUpperCase() + " "
             + Integer.toHexString(panId & 0x00FF).toUpperCase() + " "
             + Integer.toHexString(panId >> 8).toUpperCase() + " \\]");

  send("gateway", "zdo nwk {" + eui64("door-lock") + "}");
  networkWait(2000);
  
  // b) Read pending nwk udpate channel attribute to verify that it set correctly.
  testReadWwahAttr(SL_PENDING_NETWORK_UPDATE_CHANNEL, "11 00 00 20 "
                    + Integer.toHexString(channel).toUpperCase());

  // c) Read pending nwk udpate panId attribute to verify that it set correctly.
  testReadWwahAttr(SL_PENDING_NETWORK_UPDATE_PANID, "12 00 00 21 "
                    + Integer.toHexString(panId & 0x00FF).toUpperCase() + " "
                    + Integer.toHexString(panId >> 8).toUpperCase());

    // d) Reboot the 'door-lock' and read the attributes to verify its value persists.
  socReboot("door-lock");
  networkWait(10000);

  testReadWwahAttr(SL_PENDING_NETWORK_UPDATE_CHANNEL, "11 00 00 20 "
                    + Integer.toHexString(channel));

  testReadWwahAttr(SL_PENDING_NETWORK_UPDATE_PANID, "12 00 00 21 "
                    + Integer.toHexString(panId & 0x00FF).toUpperCase() + " "
                    + Integer.toHexString(panId >> 8).toUpperCase());

  // Test 2) Send ZDO Mgmt Network Update to change channel same as pending
  // network update channel attribute and expect door-lock successfully
  // changes the channel
  expect("gateway", "network change-channel " + channel,
         "Changing to channel " + channel +": 0x00");

  // Takes around 9 sec to change channel after receiving the command.
  expect("door-lock", "EVENT: stackStatus 0x9B", 18000);
  // Assert if channels are not same.
  assertSameNetwork("gateway","door-lock");

  // Test 3) Send ZDO Mgmt Network Update to change channel different than pending
  // network update channel attribute and make sure 'door-lock' does not
  // change the channel (i.e. ignores the command).
  expect("gateway", "network change-channel 15",
         "Changing to channel " + 15 +": 0x00");

  nexpect("door-lock", "EVENT: stackStatus 0x9B", 10000);
  // Assert if channels are same.
  assert(!channel("gateway").equals(channel("door-lock")));

  //Rejoin the 'door-lock' to correct channel, that is 15,
  // to perform further tests.
  networkWait(1500); //Extra delay to workaround beacon collision
  socReboot("door-lock");
  expect("door-lock", "EMBER_NETWORK_UP");
  networkWait(10000);

  String doorLockNodeId = nodeId("door-lock");
  networkWait(1000);

  // Rediscover the node in the address table by sending it a NWK addr request
  send("gateway", "plugin address-table add {0000000000000003}");
  networkWait(2000);
  send("gateway", "zdo nwk {" + eui64("door-lock") + "}");
  networkWait(2000);
  expect("gateway",
         "plugin address-table print",
         ".*" + doorLockNodeId + ".*");

  // Test 4) a) set 0xFFFF and 0xFF
  int channel = 0xFF;
  int panId = 0xFFFF;

  send("gateway", "zcl mfg-code 0x1217");
  send("gateway", "zcl sl-wwah set-pending-network-update " + channel + " " + panId);
  send("gateway", "send " + doorLockNodeId + " 1 1" );

  // b) Verify pending nwk udpate channel attribute that it set correctly.
  testReadWwahAttr(SL_PENDING_NETWORK_UPDATE_CHANNEL, "11 00 00 20 "
                    + Integer.toHexString(channel).toUpperCase());

  // c) Verify pending nwk udpate panId attribute that it set correctly.
  testReadWwahAttr(SL_PENDING_NETWORK_UPDATE_PANID, "12 00 00 21 "
                    + Integer.toHexString(panId & 0x00FF).toUpperCase() + " "
                    + Integer.toHexString(panId >> 8).toUpperCase());

  // d) 'door-lock' should accept any received channel from 'gateway' and change
  // its channel.
    expect("gateway", "network change-channel 11",
           "Changing to channel " + 11 +": 0x00");

  // Takes around 9 sec to change channel after receiving the command.
  expect("door-lock", "EVENT: stackStatus 0x9B", 10000);
  assertSameNetwork("gateway","door-lock");
}

void testTrustCenterForClusterServerCommand()
{
  dbg.println("=== Test use trust center for cluster server command ===");

  int timeCluster = 0x000A;
  int otaCluster = 0x0019;
  int pollControlCluster = 0x0020;
  int greenPowerCluster = 0x0021;
  int keepAliveCluster = 0x0025;

  // Test 1: Upon receipt of use-tc-for-cluster-server command, device should abort
  // any download that is in progress.
  String file = "app/framework/plugin/ota-storage-simple/test-file.ota";
  String nodeIdDoorLock = nodeId("door-lock");

  expect("gateway",
      "plugin ota-server load-file \"" + file + "\"",
      ".*Loaded image successfully.",
      50000);

  send ("door-lock", "plugin ota-client stop");
  send ("door-lock", "plugin ota-client start");

  networkWait(5000);

  send("gateway", "zcl mfg-code 0x1217");
  send("gateway", "zcl sl-wwah use-tc-for-cluster-server 1 " + otaCluster);

  // Upon receipt of use-tc-for-cluster-server command
  // 'door-lock' will abort (EMBER_ZCL_STATUS_ABORT = 0x95)
  // the download that is in progress.
  expect("gateway", "send " + nodeIdDoorLock + " 1 1",
                    "Client " + nodeIdDoorLock  + " indicated upgrade status: 0x95",10000);
  networkWait(5000);

  // Test 2: Send OTA cluster to use TC
  send("gateway", "zcl mfg-code 0x1217");
  send("gateway", "zcl sl-wwah use-tc-for-cluster-server 1 " + otaCluster);
  send("gateway", "send " + nodeId("door-lock") + " 1 1" );

  expect("door-lock", ".*RX len 8, ep 01, clus 0xFC57" +
           " \\(SL Works With All Hubs\\) mfgId 1217 FC 05 seq .* cmd 1E payload\\[01 19 00 \\]");

  // Expect default response with success status.
  expect("gateway", ".*RX len 7, ep 01, clus 0xFC57" +
   " \\(SL Works With All Hubs\\) mfgId 1217 FC 0C seq .* cmd 0B payload\\[1E 00 \\]");

  // Test 3: Send multiple clusters
  send("gateway", "zcl mfg-code 0x1217");
  send("gateway", "zcl sl-wwah use-tc-for-cluster-server 5 "
    + timeCluster + " "
    + otaCluster + " "
    + pollControlCluster + " "
    + greenPowerCluster + " "
    + keepAliveCluster);
  send("gateway", "send " + nodeId("door-lock") + " 1 1" );

  // Expect use TC for server response command with cluster command not supported (0x81) for all clusters
  // except Time, OTA clusters (Z3DoorLockWithWwah supports the Time, OTA clusters)
   expect("gateway", ".*RX len 22, ep 01, clus 0xFC57" +
           " \\(SL Works With All Hubs\\) mfgId 1217 FC 0D seq .* cmd 9E payload\\[00 05 0A 00 00 19 00 00 20 00 81 21 00 81 25 00 81 \\]");

  // Expect default response with success status.
  expect("gateway", ".*RX len 7, ep 01, clus 0xFC57" +
           " \\(SL Works With All Hubs\\) mfgId 1217 FC 0C seq .* cmd 0B payload\\[1E 00 \\]");

  // Test 4: Upon receipt of query-tc-for-cluster-server command, device should return
  // what clusters is using TC for server
  send("gateway", "zcl mfg-code 0x1217");
  send("gateway", "zcl sl-wwah query-tc-for-cluster-server");
  send("gateway", "send " + nodeId("door-lock") + " 1 1" );

  // Expect query TC for cluster server response command with supporting Time and OTA clusters.
   expect("gateway", ".*RX len 10, ep 01, clus 0xFC57" +
           " \\(SL Works With All Hubs\\) mfgId 1217 FC 0D seq .* cmd 08 payload\\[02 0A 00 19 00 \\]");

  // Test 5: Test if the configuration persists properly
  socReboot("door-lock");
  networkWait(10000);
  send("gateway", "zcl mfg-code 0x1217");
  send("gateway", "zcl sl-wwah query-tc-for-cluster-server");
  send("gateway", "send " + nodeId("door-lock") + " 1 1" );

  // Expect query TC for cluster server response command with supporting Time and OTA clusters.
   expect("gateway", ".*RX len 10, ep 01, clus 0xFC57" +
           " \\(SL Works With All Hubs\\) mfgId 1217 FC 0D seq .* cmd 08 payload\\[02 0A 00 19 00 \\]");
}

void testAppEventRetry()
{
  dbg.println("=== Test app event retry functionality ===");

  int firstBackoffTimeSeconds = 0;
  int backoffSequenceRatio = 8;
  int maxBackoffTimeSeconds = 8;
  int maxRedeliveryAttempts = 20;

  send("gateway", "zcl mfg-code 0x1217");
  send("gateway", "zcl sl-wwah enable-app-event-retry-alg "
    + firstBackoffTimeSeconds + " "
    + backoffSequenceRatio + " "
    + maxBackoffTimeSeconds + " "
    + maxRedeliveryAttempts);
  send("gateway", "send " + nodeId("door-lock") + " 1 1");
  expect("door-lock", "ERROR - Enable Wwah App Event Retry Algorithm Callback: Invalid parameter");
  expect("gateway", "DEFAULT_RESP: \\(SL Works With All Hubs\\) cmd 04 status 87");

  firstBackoffTimeSeconds = 8;
  send("gateway", "zcl mfg-code 0x1217");
  send("gateway", "zcl sl-wwah enable-app-event-retry-alg "
    + firstBackoffTimeSeconds + " "
    + backoffSequenceRatio + " "
    + maxBackoffTimeSeconds + " "
    + maxRedeliveryAttempts);
  send("gateway", "send " + nodeId("door-lock") + " 1 1");
  expect("gateway", "DEFAULT_RESP: \\(SL Works With All Hubs\\) cmd 04 status 00");


  send("door-lock", "plugin critical-message-queue print-config");
  expect("door-lock", "First backoff time \\(sec\\): " + firstBackoffTimeSeconds);
  expect("door-lock", "Max backoff time \\(sec\\): " + maxBackoffTimeSeconds);

  send("door-lock", "plugin critical-message-queue print-config");
  expect("door-lock", "Backoff sequence common ratio: " + backoffSequenceRatio);
  expect("door-lock", "Max redelivery attempts: " + maxRedeliveryAttempts);

  // Test if persisted properly
  socReboot("door-lock");
  networkWait(10000);
  send("door-lock", "plugin critical-message-queue print-config");
  expect("door-lock", "First backoff time \\(sec\\): " + firstBackoffTimeSeconds);
  expect("door-lock", "Max backoff time \\(sec\\): " + maxBackoffTimeSeconds);

  send("door-lock", "plugin critical-message-queue print-config");
  expect("door-lock", "Backoff sequence common ratio: " + backoffSequenceRatio);
  expect("door-lock", "Max redelivery attempts: " + maxRedeliveryAttempts);

  // Test with the defaults of critical-message-queue
  firstBackoffTimeSeconds = 5;
  backoffSequenceRatio = 2;
  maxBackoffTimeSeconds = 300;
  maxRedeliveryAttempts = 255;

  // Rediscover the node in the address table by sending it a NWK addr request
  String doorLockNodeId = nodeId("door-lock");
  send("gateway", "plugin address-table add {0000000000000003}");
  networkWait(2000);
  send("gateway", "zdo nwk {" + eui64("door-lock") + "}");
  networkWait(2000);
  expect("gateway",
         "plugin address-table print",
         ".*" + doorLockNodeId + ".*");

  send("gateway", "zcl mfg-code 0x1217");
  send("gateway", "zcl sl-wwah disable-app-event-retry-alg ");
  expect("gateway",
         "send " + doorLockNodeId + " 1 1",
         "DEFAULT_RESP: \\(SL Works With All Hubs\\) cmd 05 status 00");

  send("door-lock", "plugin critical-message-queue print-config");
  expect("door-lock", "First backoff time \\(sec\\): " + firstBackoffTimeSeconds);
  expect("door-lock", "Max backoff time \\(sec\\): " + maxBackoffTimeSeconds);

  send("door-lock", "plugin critical-message-queue print-config");
  expect("door-lock", "Backoff sequence common ratio: " + backoffSequenceRatio);
  expect("door-lock", "Max redelivery attempts: " + maxRedeliveryAttempts);

  // Test if persisted properly
  socReboot("door-lock");
  networkWait(1000);
  send("door-lock", "plugin critical-message-queue print-config");
  expect("door-lock", "First backoff time \\(sec\\): " + firstBackoffTimeSeconds);
  expect("door-lock", "Max backoff time \\(sec\\): " + maxBackoffTimeSeconds);

  send("door-lock", "plugin critical-message-queue print-config");
  expect("door-lock", "Backoff sequence common ratio: " + backoffSequenceRatio);
  expect("door-lock", "Max redelivery attempts: " + maxRedeliveryAttempts);
}

void testOtaDowngradeCommand()
{
  dbg.println("=== Test disable ota downgrade command ===");
  // OTA Downgrade test more or less mirrors ota-test.bsh
  // Stop door lock OTA client
  send("door-lock", "plugin ota-client stop");

  // Load downgrade ota binary on OTA server
  String nodeIdDoorLock = nodeId("door-lock");

  downgradeFile="app/framework/plugin/ota-storage-simple/test-file-downgrade.ota";

  expect("gateway",
         "plugin ota-server load-file \"" + downgradeFile + "\"",
         ".*Loaded image successfully.",
         5000);
  expect("gateway", "plugin ota-storage-common printImages", "1 images in OTA storage.");
  
  send("gateway", "plugin ota-server policy query 1");

  // Send disable ota downgrades command
  send("gateway", "zcl mfg-code 0x1217");
  send("gateway", "zcl sl-wwah disable-ota-downgrades");
  expect("gateway", "send " + nodeIdDoorLock + " 1 1", "cmd 14 status 00");

  // Kick off ota-client
  send("door-lock", "plugin ota-client start");
  // Status 0x96(EMBER_ZCL_STATUS_INVALID_IMAGE) indicates downgrade was refused
  expect("gateway",
         "",
         "Client " + nodeIdDoorLock + " indicated upgrade status: 0x96",
         50000);

  // Test persistence
  socReboot("door-lock");
  networkWait(1000);
  expect("door-lock", "NETWORK_UP", 4000);

  send("door-lock", "plugin ota-client stop");
  networkWait(10000);
  send("door-lock", "plugin ota-client start");
  // Status 0x96(EMBER_ZCL_STATUS_INVALID_IMAGE) indicates downgrade was refused
  expect("gateway",
         "",
         "Client " + nodeIdDoorLock + " indicated upgrade status: 0x96",
         50000);
}


void testEnableDisableParentClassificationAttrState()
{
  // Check that change to ParentClassification via ZCL command is reflected in
  // corresponding attribute, and is persisted across node reboot.

  String nodeIdDoorLock = nodeId("door-lock");

  // Check initial state (enabled).
  testReadWwahAttr(SL_WWAH_PARENT_CLASSIFICATION_ENABLED, "08 00 00 10 00");

  // Enable it.
  send("gateway", "zcl mfg-code 0x1217");
  send("gateway", "zcl sl-wwah enable-parent-classify");
  send("gateway", "send " + nodeIdDoorLock + " 1 1");
  expect("door-lock", ".*RX len 5, ep 01, clus 0xFC57" +
             " \\(SL Works With All Hubs\\) mfgId 1217 FC 05 seq .* cmd 17 payload\\[\\]",5000);
  testReadWwahAttr(SL_WWAH_PARENT_CLASSIFICATION_ENABLED, "08 00 00 10 01");
  networkWait(10000);

  // Reboot and check that enabled setting persists.
  socReboot("door-lock");
  expect("door-lock", "EMBER_NETWORK_UP", 5000);
  testReadWwahAttr(SL_WWAH_PARENT_CLASSIFICATION_ENABLED, "08 00 00 10 01");

  // Disable it.
  send("gateway", "zcl mfg-code 0x1217");
  send("gateway", "zcl sl-wwah disable-parent-classify");
  send("gateway", "send " + nodeIdDoorLock + " 1 1");
  expect("door-lock", ".*RX len 5, ep 01, clus 0xFC57" +
             " \\(SL Works With All Hubs\\) mfgId 1217 FC 05 seq .* cmd 18 payload\\[\\]",5000);
  testReadWwahAttr(SL_WWAH_PARENT_CLASSIFICATION_ENABLED, "08 00 00 10 00");
  networkWait(10000);

  // Reboot and check that disabled setting persists.
  socReboot("door-lock");
  expect("door-lock", "EMBER_NETWORK_UP", 5000);
  testReadWwahAttr(SL_WWAH_PARENT_CLASSIFICATION_ENABLED, "08 00 00 10 00");

}

void testEnableDisableBadParentRecoveryAttrState()
{
  // Check that change to BadParentRecover via ZCL command is reflected in
  // corresponding attribute, and is persisted across node reboot.

  String nodeIdDoorLock = nodeId("door-lock");

  // Check initial state (disabled).
  testReadWwahAttr(SL_WWAH_BAD_PARENT_RECOVERY_ENABLED, "10 00 00 10 00");

  // Enable it.
  send("gateway", "zcl mfg-code 0x1217");
  send("gateway", "zcl sl-wwah enable-bad-parent-recovery");
  send("gateway", "send " + nodeIdDoorLock + " 1 1");
  expect("door-lock", ".*RX len 5, ep 01, clus 0xFC57" +
             " \\(SL Works With All Hubs\\) mfgId 1217 FC 05 seq .* cmd 1A payload\\[\\]",5000);
  testReadWwahAttr(SL_WWAH_BAD_PARENT_RECOVERY_ENABLED, "10 00 00 10 01");

  // Reboot and check that enabled setting persists.
  socReboot("door-lock");
  expect("door-lock", "EMBER_NETWORK_UP", 5000);
  testReadWwahAttr(SL_WWAH_BAD_PARENT_RECOVERY_ENABLED, "10 00 00 10 01");

  // Disable it.
  send("gateway", "zcl mfg-code 0x1217");
  send("gateway", "zcl sl-wwah disable-bad-parent-recovery");
  send("gateway", "send " + nodeIdDoorLock + " 1 1");
  expect("door-lock", ".*RX len 5, ep 01, clus 0xFC57" +
             " \\(SL Works With All Hubs\\) mfgId 1217 FC 05 seq .* cmd 1B payload\\[\\]",5000);
  testReadWwahAttr(SL_WWAH_BAD_PARENT_RECOVERY_ENABLED, "10 00 00 10 00");

  // Reboot and check that disabled setting persists.
  socReboot("door-lock");
  expect("door-lock", "EMBER_NETWORK_UP", 5000);
  testReadWwahAttr(SL_WWAH_BAD_PARENT_RECOVERY_ENABLED, "10 00 00 10 00");

}

void testEnableRejoinAlgAttrState()
{
  // Check that change to RejoinAlg via ZCL command is reflected in
  // corresponding attribute, and is persisted across node reboot.

  String nodeIdDoorLock = nodeId("door-lock");

  // Check initial state (enabled).
  testReadWwahAttr(SL_WWAH_REJOIN_ENABLED, "0B 00 00 10 00");

  // Enable it.
  send("gateway", "zcl mfg-code 0x1217");
  send("gateway", "zcl sl-wwah enable-rejoin-alg 10 120 20 30 15");
  send("gateway", "send " + nodeIdDoorLock + " 1 1");
  expect("door-lock", ".*RX len 15, ep 01, clus 0xFC57" +
             " \\(SL Works With All Hubs\\) mfgId 1217 FC 05 seq .* cmd 07 payload\\[.*\\]",5000);
  testReadWwahAttr(SL_WWAH_REJOIN_ENABLED, "0B 00 00 10 01");

  // Reboot and check that enabled setting persists.
  socReboot("door-lock");
  expect("door-lock", "EMBER_NETWORK_UP", 5000);
  testReadWwahAttr(SL_WWAH_REJOIN_ENABLED, "0B 00 00 10 01");

  // Disable it.
  send("gateway", "zcl mfg-code 0x1217");
  send("gateway", "zcl sl-wwah disable-rejoin-alg");
  send("gateway", "send " + nodeIdDoorLock + " 1 1");
  expect("door-lock", ".*RX len 5, ep 01, clus 0xFC57" +
             " \\(SL Works With All Hubs\\) mfgId 1217 FC 05 seq .* cmd 08 payload\\[\\]",5000);
  testReadWwahAttr(SL_WWAH_REJOIN_ENABLED, "0B 00 00 10 00");

  // Reboot and check that disabled setting persists.
  socReboot("door-lock");
  expect("door-lock", "EMBER_NETWORK_UP", 5000);
  testReadWwahAttr(SL_WWAH_REJOIN_ENABLED, "0B 00 00 10 00");

  // Enable via local CLI command.
  send("door-lock", "plugin wwah-connectivity-manager enable 1");
  testReadWwahAttr(SL_WWAH_REJOIN_ENABLED, "0B 00 00 10 01");

  // Reboot and check that enabled setting persists.
  socReboot("door-lock");
  expect("door-lock", "EMBER_NETWORK_UP", 5000);
  testReadWwahAttr(SL_WWAH_REJOIN_ENABLED, "0B 00 00 10 01");

  // Disable via local CLI command.
  send("door-lock", "plugin wwah-connectivity-manager disable 1");
  testReadWwahAttr(SL_WWAH_REJOIN_ENABLED, "0B 00 00 10 00");

  // Reboot and check that disabled setting persists.
  socReboot("door-lock");
  expect("door-lock", "EMBER_NETWORK_UP", 5000);
  testReadWwahAttr(SL_WWAH_REJOIN_ENABLED, "0B 00 00 10 00");
}

startNetwork();
testWwahAttributes();

testTimeRequest();
testPoweringOffNotification();
testPoweringOnNotification();
testMgmtLeaveWithoutRejoin();
testSetMacPollFailureWaitTime();
testDisablingTouchlink();
testClearBindingTableCommand();
testConfigurationMode();
testApsAcksOnUnicasts();
testPendingNetworkUpdate();
testTrustCenterForClusterServerCommand();
testOtaDowngradeCommand();
testAppEventRetry();
testEnableDisableParentClassificationAttrState();
testEnableDisableBadParentRecoveryAttrState();
testEnableRejoinAlgAttrState();
