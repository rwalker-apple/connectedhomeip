import com.ember.peek.SimulatedNetwork;

source("util.bsh");

if (runArgument.runUsingHostApps) {
  // This test case runs only with SoC images.
  return;
}

SimulatedNetwork network = createNetwork();
// Load Z3Light and ZigbeeMinimal apps as SoC devices
Location z3LightLocation = gridLocations[0];
TestNode z3Light = new TestNode("light",
                                "build/af-test-apps/Z3Light-simulation/Z3Light",
                                "", // no HOST image
                                "", // no NCP image
                                z3LightLocation);
Location zigbeeMinimalLocation = gridLocations[1];
TestNode zigbeeMinimal = new TestNode("zminimal",
                                 "build/af-test-apps/ZigbeeMinimal-simulation/ZigbeeMinimal",
                                 "", // no HOST image
                                 "", // no NCP image
                                 zigbeeMinimalLocation);
addAndLoadDevicesWithLocation(new TestNode[] { z3Light, zigbeeMinimal }, false); // useHost

lazyExpect = true;

void RESET(String node)
{
  send(node, "option binding-table clear");
  send(node, "keys clear");
  expect(node, "net leave", "EMBER_NETWORK_DOWN");
  reboot(node);
  setupEncryption();
  networkWait(DEFAULT_TIMEOUT);
}

void testJoining(String device)
{
  dbg.println("=== Testing join from line " + this.namespace.getInvocationLine() + " ===");

  // Try to join with the device.
  expect(device,
         "EMBER_NETWORK_UP",
         DEFAULT_TIMEOUT << 5);

  // The device should extend the network by broadcasting permit join.
  expect(device,
         "Broadcasting permit join: 0x00",
         DEFAULT_TIMEOUT << 1);

  // Make sure the device used that distributed key.
  expect(device,
         "keys print",
         "D0 D1 D2 D3 D4 D5 D6 D7  D8 D9 DA DB DC DD DE DF");

  // Wait a second for thing to die down.
  networkWait(DEFAULT_TIMEOUT);
}

setupEncryption();

// Wait for the nodes to reset.
networkWait(DEFAULT_TIMEOUT);

// The light will perform network steering on boot. Since there are no
// other networks to join, it will form its own distributed network.
// The light will open its network.
nexpect("light", "Open network for joining: 0x00", DEFAULT_TIMEOUT << 5);
expect("light", "net pjoin 255", "f");

// Make sure the light didn't send itself a node descriptor request.
nexpect("light",
        "RX: Node Desc Resp, Matches: 0x0000");

// The short address of the light should not be 0.
assert(!nodeId("light").equals("0x0000"));

// Check to make sure it is using the correct security key (distributed).
expect("light",
       "keys print",
       "D0 D1 D2 D3 D4 D5 D6 D7  D8 D9 DA DB DC DD DE DF");

// Join with the zminimal.
send("zminimal", "plugin network-steering start 1");
testJoining("zminimal");



//EMZIGBEE-4781: Test to make sure input validation
//prevents light from asserting
String light_node_id = nodeId("light");
networkWait(1 * 10000);
send("zminimal", "raw 0x0000 {00 00 14}");
send("zminimal", "send " + light_node_id +" 1 1");

send("zminimal", "raw 0x0000 {00 00 12}");
send("zminimal", "send " + light_node_id +" 1 1");


// Reset the zminimal to factory new so that we make sure we can rejoin.
RESET("zminimal");

// Open the network and wait for over 5 minutes. The network should no longer
// be open, and the zminimal should not be able to join.
expect("light",
       "plugin network-creator-security open-network",
       ".*: Open network: 0x00");
networkWait(5 * 60 * 10000); // 5 minutes * 60 seconds * 1000 milliseconds
nexpect("zminimal",
        "plugin network-steering start 0",
        "EMBER_NETWORK_UP",
        DEFAULT_TIMEOUT << 5);

// Now reopen the network. The network should be open for 5 minutes, so
// let's wait for at least one permit join timeout to make sure the
// network-creator-security plugin keeps the network open.
expect("light",
       "plugin network-creator-security open-network",
       ".*: Open network: 0x00");
expect("light",
       ".*: Open network: 0x00",
       0xFE * 1000); // 254 seconds (max permit join timeout) to milliseconds

// The zminimal should be able to join again.
send("zminimal", "plugin network-steering start 1");
testJoining("zminimal");

// Wait for commissioning to finish. Since the light is no longer identifying
// that means the zminimal should not form any bindings.
expect("light", "read 1 0x0003 0x0000 1", "00 00");
networkWait(DEFAULT_TIMEOUT << 2);
nexpect("zminimal",
        "option binding-table print",
        "UNICA.*0x0006.*" + nodeId("light"));




// EMSTACK-2801 - make sure that the router can still leave doesn't leave
// when it receives a zdo leave. It is not a trust center, so it has to obey
// the leave.
send("zminimal", "zdo leave " + nodeId("light") + " 0 0");
expect("light", "EMBER_NETWORK_DOWN");
