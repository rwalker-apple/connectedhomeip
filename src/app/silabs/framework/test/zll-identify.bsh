import com.ember.peek.SimulatedNetwork;

source("util.bsh");

if (runArgument.runUsingMultihop) {
  std.print("****TODO: Fix for multi-hop****");
  return;
}

// Create two nodes in the network.
SimulatedNetwork network = createNetwork();
String[] devices = new String[]{"light", "remote"};

String[] socImages = new String[] {
  "build/af-test-apps/ZllColorLight-simulation/ZllColorLight",
  "build/af-test-apps/ZllColorSceneRemote-simulation/ZllColorSceneRemote",
};
String[] hostImages = new String[] {
  "build/af-test-apps/ZllColorLight-simulation-ezsp/ZllColorLight",
  "build/af-test-apps/ZllColorSceneRemote-simulation-ezsp/ZllColorSceneRemote",
};
String ncpImage = "app/ncp/sample-app/ncp-spi/simulation/build/exe/ncp-spi";

// Create network and load devices according to the runArguments provided.
addAndLoadDevices(devices, socImages, hostImages, ncpImage);

// Set up encryption and touch link the network.
setupEncryption();
expect("light", "plugin zll-commissioning form 0xFF 2 0xFFFF", ".*EMBER_NETWORK_UP.*");
send("remote", "plugin zll-commissioning link");
expectNetworkUp("light", timeout * 10);
expectNetworkUp("remote", timeout * 10);

String nid1 = findNodeByName("light").nodeIdHex;
String nid2 = findNodeByName("remote").nodeIdHex;

// Run the gamut of TriggerEffect effects.

// Blink
send("remote", "zcl identify trigger 0x00 0x00");
send("remote", "send " + nid1 + " 1 1");
expect("light", ".*RX identify:trigger effect 0x00 variant 0x00.*");

// Breathe
send("remote", "zcl identify trigger 0x01 0x00");
send("remote", "send " + nid1 + " 1 1");
expect("light", ".*RX identify:trigger effect 0x01 variant 0x00.*");

// Okay
send("remote", "zcl identify trigger 0x02 0x00");
send("remote", "send " + nid1 + " 1 1");
expect("light", ".*RX identify:trigger effect 0x02 variant 0x00.*");

// Channel Change
send("remote", "zcl identify trigger 0x0b 0x00");
send("remote", "send " + nid1 + " 1 1");
expect("light", ".*RX identify:trigger effect 0x0B variant 0x00.*");

// Finish Effect
send("remote", "zcl identify trigger 0xfe 0x00");
send("remote", "send " + nid1 + " 1 1");
expect("light", ".*RX identify:trigger effect 0xFE variant 0x00.*");

// Stop Effect
send("remote", "zcl identify trigger 0xff 0x00");
send("remote", "send " + nid1 + " 1 1");
expect("light", ".*RX identify:trigger effect 0xFF variant 0x00.*");
