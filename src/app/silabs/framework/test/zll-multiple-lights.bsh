import com.ember.peek.SimulatedNetwork;

source("util.bsh");

if (runArgument.runUsingMultihop) {
  std.print("****TODO: Fix for multi-hop****");
  return;
}

SimulatedNetwork network = createNetwork();
String[] devices = new String[]{"remote1", "light1", "light2"};

String[] socImages = new String[] {
  "build/af-test-apps/ZllColorSceneRemote-simulation/ZllColorSceneRemote",
    "build/af-test-apps/ZllColorLight-simulation/ZllColorLight",
    "build/af-test-apps/ZllColorLight-simulation/ZllColorLight",
};
String[] hostImages = new String[] {
  "build/af-test-apps/ZllColorSceneRemote-simulation-ezsp/ZllColorSceneRemote",
    "build/af-test-apps/ZllColorLight-simulation-ezsp/ZllColorLight",
    "build/af-test-apps/ZllColorLight-simulation-ezsp/ZllColorLight",
};
String ncpImage = "app/ncp/sample-app/ncp-spi/simulation/build/exe/ncp-spi";

// Create network and load devices according to the runArguments provided.
addAndLoadDevices(devices, socImages, hostImages, ncpImage);
setupEncryption();

//------------------------------------------------------------
dbg.println("\n*** Test 1: Touchlink, reset touchlink BUGZID: 13044, 13075 ***\n");
dbg.println("\n***Test 1, touch link remote1 to light1***\n");
expect("remote1", "plugin zll-commissioning channel 20", "Primary channels: 20 \\(0x00100000\\)");
expect("light1", "plugin zll-commissioning channel 20", "Primary channels: 20 \\(0x00100000\\)");

// light1 will start a network on Channel 20
startZllNetwork("light1", "20", "0", "0x1234", timeout * 10);

// light2 is tuned to Channel 11 at this point, so it will not receive any
// scan requests this time through
send("remote1", "plugin zll-commissioning link");
expect("light1", "RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0xFFFF", timeout * 10);
expect("light1", "RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0x0000", timeout * 10);
expectNetworkUp("light1", timeout * 10);
expect("light1", "Touch link with 0x0001 \\(\\(>\\)" + eui64("remote1") + "\\) complete", timeout * 10);
expectNetworkUp("remote1", timeout * 10);
expect("remote1", "Touch link with 0x0002 \\(\\(>\\)" + eui64("light1") + "\\) complete", timeout * 10);

network.sleep(5000);  // let device announce go out

dbg.println("\n***Test 1, reset remote1 ***\n");
reboot("remote1");
network.sleep(timeout * 10);

dbg.println("\n***Test 1, touch link remote1 to light2***\n");
expect("remote1", "plugin zll-commissioning channel 15", "Primary channels: 15 \\(0x00008000\\)");
expect("light2", "plugin zll-commissioning channel 15", "Primary channels: 15 \\(0x00008000\\)");

// light2 will start a network on Channel 15
startZllNetwork("light2", "15", "0", "0x5678", timeout * 10);

// light2 will be touch-linked onto Channel 20
send("remote1", "plugin zll-commissioning link");
expect("light2", "RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0xFFFF", timeout * 10);
expect("light2", "RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0x0000", timeout * 10);
expectNetworkUp("light2", timeout * 10);
expect("light2", "Touch link with 0xFFFF \\(\\(>\\)" + eui64("remote1") + "\\) complete", timeout * 10);
expectNetworkUp("remote1", timeout * 10);
expect("remote1", "Touch link with 0x0003 \\(\\(>\\)" + eui64("light2") + "\\) complete", timeout * 10);

//------------------------------------------------------------
dbg.println("\n*** Test 2: Touchlink two lights and send messages to non parent device ***\n");

// reset for second test (NOTE, this doesn't do a reboot, just a leave
// and clear attributes, etc.
expect("remote1", "plugin zll-commissioning reset", ".*EMBER_NETWORK_DOWN", timeout * 10);
network.sleep(timeout);
expect("light1", "plugin zll-commissioning reset", ".*EMBER_NETWORK_DOWN");
expect("light2", "plugin zll-commissioning reset", ".*EMBER_NETWORK_DOWN", timeout * 10);
network.sleep(timeout * 10);

dbg.println("\n***Test 2, touch link remote1 to light1***\n");
expect("remote1", "plugin zll-commissioning channel 20", "Primary channels: 20.*");

// light1 will start a network on Channel 20
startZllNetwork("light1", "20", "0", "0x1234", timeout * 10);

// extra delay to ensure that light1 is properly up, because light2 will
// now get in the way. (IOW, if you comment this line out the touchlink fails)
networkWait(5000);

send("remote1", "plugin zll-commissioning link");

// all three nodes are actually tuned into radio channel 20 at this point, but light1
// should reply first - light2 will also reply now, because it's receiver is still on (post
// zll comm init)
expect("light1", "RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0xFFFF", timeout * 10);
expect("light1", "RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0x0000", timeout * 10);
expectNetworkUp("light1", timeout * 10);
expect("light1", "Touch link with 0x0001 \\(\\(>\\)" + eui64("remote1") + "\\) complete", timeout * 10);
expectNetworkUp("remote1", timeout * 10);
expect("remote1", "Touch link with 0x0002 \\(\\(>\\)" + eui64("light1") + "\\) complete", timeout * 10);

network.sleep(timeout * 10);
String nIdLight1 = findNodeByName("light1").nodeIdHex;

dbg.println("\n***Test 2, remote1 read attributes from light1***\n");
send("remote1", "zcl global read 0x0000 0x0000");
send("remote1", "send " + nIdLight1 + " 1 1");

network.sleep(timeout * 10);

dbg.println("\n***Test 2, touch link remote1 to light2***\n");
expect("remote1", "plugin zll-commissioning channel 15", "Primary channels: 15 \\(0x00008000\\)");
network.sleep(timeout * 30); // for some reason remote1 will be still sending on the old channel, needs to be cehcked after unified mac?????
// light2 will start a network on Channel 15
startZllNetwork("light2", "15", "0", "0x5678", timeout * 10);

send("remote1", "plugin zll-commissioning link");
expect("light2", "RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0xFFFF", timeout * 10);
expect("light2", "RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0x0000", timeout * 10);
expectNetworkUp("light2", timeout * 10);
expect("light2", "Touch link with 0xFFFF \\(\\(>\\)" + eui64("remote1") + "\\) complete", timeout * 10);
expectNetworkUp("remote1", timeout * 10);
expect("remote1", "Touch link with 0x0003 \\(\\(>\\)" + eui64("light2") + "\\) complete", timeout * 10);

String nIdLight2 = findNodeByName("light2").nodeIdHex;

// If you comment this line out the read fails BUGZID: 13043
networkWait(timeout * 10);

dbg.println("\n***Test 2, remote1 read attributes from light1***\n");
checkAttributeRead("remote1",   // transmitter
                   nIdLight2,   // receiver
                   "Basic",
                   "0x0000",  // cluster ID
                   "0x0000",  // attribute ID
                   "0x20",    // attribute type
                   "03",      // value
                   200000,
                   getSourceFileInfo(),
                   this.namespace.getInvocationLine());

networkWait(timeout * 10);

//------------------------------------------------------------
dbg.println("\n*** Test 3: Touchlink light and remove from network, then network leave on remote ***\n");
//reset for third test
networkWait(1000);
expect("remote1", "plugin zll-commissioning reset", ".*EMBER_NETWORK_DOWN", 3000);
expect("light1", "plugin zll-commissioning reset", ".*EMBER_NETWORK_DOWN", 3000);
expect("light2", "plugin zll-commissioning reset", ".*EMBER_NETWORK_DOWN", 3000);
network.sleep(timeout * 10);

send("light2", "plugin zll-commissioning disable");

dbg.println("\n***Test 3, touch link remote1 to light1***\n");
expect("remote1", "plugin zll-commissioning channel 20", "Primary channels: 20 \\(0x00100000\\)");
expect("light1", "plugin zll-commissioning channel 20", "Primary channels: 20 \\(0x00100000\\)");
startZllNetwork("light1", "20", "0", "0x1234", timeout * 10);

// copied from Test 2, that helped me out here too
// extra delay to ensure that light1 is properly up, because light2 will
// now get in the way. (IOW, if you comment this line out the touchlink fails)
networkWait(5000);

send("remote1", "plugin zll-commissioning link");
expect("light1", "RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0xFFFF", timeout * 10);
expect("light1", "RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0x0000", timeout * 10);
expectNetworkUp("light1", timeout * 10);
expect("light1", "Touch link with 0x0001 \\(\\(>\\)" + eui64("remote1") + "\\) complete", timeout * 10);
expectNetworkUp("remote1", timeout * 10);
expect("remote1", "Touch link with 0x0002 \\(\\(>\\)" + eui64("light1") + "\\) complete", timeout * 10);

nIdLight1 = findNodeByName("light1").nodeIdHex;

//take the light out
expect("light1", "plugin zll-commissioning reset", ".*EMBER_NETWORK_DOWN");
send("remote1", "zcl global read 0x0000 0x0000");

// We should start polling and try to find our parent we lost
expectMultiline("remote1",
                "send " + nIdLight1 + " 1 1",
                new String[] {
                  ".*Schedule move nwk 0: 0",
                  ".*Schedule move nwk 0: 1",
                  ".*Schedule move nwk 0: 2", 
                },
                (200 + 50) * 1000);  // timeout

// remote should not try to rejoin network after network leave
expect("remote1", "plugin zll-commissioning reset", ".*EMBER_NETWORK_DOWN");
assert(network.expect("remote1", port, null, ".*Schedule move nwk 0: 4", timeout * 10, true) == null);

//------------------------------------------------------------
dbg.println("\n*** Test 4: Touchlink after reset to factory default - BUGZID: 13176***\n");
dbg.println("\n***Test 4, touch link remote1 to light1***\n");
expect("remote1", "plugin zll-commissioning channel 15", "Primary channels: 15 \\(0x00008000\\)");
expect("light1", "plugin zll-commissioning channel 15", "Primary channels: 15 \\(0x00008000\\)");
startZllNetwork("light1", "15", "0", "0x1234", timeout * 10);
send("remote1", "plugin zll-commissioning link");
expect("light1", "RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0xFFFF", timeout * 10);
expect("light1", "RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0x0000", timeout * 10);
expectNetworkUp("light1", timeout * 10);
expect("light1", "Touch link with 0x0001 \\(\\(>\\)" + eui64("remote1") + "\\) complete", timeout * 10);
expectNetworkUp("remote1", timeout * 10);
expect("remote1", "Touch link with 0x0002 \\(\\(>\\)" + eui64("light1") + "\\) complete", timeout * 10);

dbg.println("\n***Test 4, reset to factory default***\n");
expect("remote1", "plugin zll-commissioning reset", ".*EMBER_NETWORK_DOWN");

dbg.println("\n***Test 4, pause for child timeout***\n");
network.sleep(timeout * 400);

dbg.println("\n***Test 4, touch link again following RTFD and child timeout***\n");
send("remote1", "plugin zll-commissioning link");
expect("light1", "RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0xFFFF", timeout * 10);
expect("light1", "RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0x0000", timeout * 10);
expectNetworkUp("light1", timeout * 10);
expect("light1", "Touch link with 0x0001 \\(\\(>\\)" + eui64("remote1") + "\\) complete", timeout * 10);
expectNetworkUp("remote1", timeout * 10);
expect("remote1", "Touch link with 0x0002 \\(\\(>\\)" + eui64("light1") + "\\) complete", timeout * 10);

//------------------------------------------------------------
dbg.println("\n*** Test 5: Issue net leave during touch link hoses device - BUGZID: 13012***\n");
//reset for Test 5
expect("remote1", "plugin zll-commissioning reset", ".*EMBER_NETWORK_DOWN", timeout * 10);
expect("light1", "plugin zll-commissioning reset", ".*EMBER_NETWORK_DOWN");
network.sleep(timeout * 10);
reboot("remote1");
reboot("light1");
network.pressButton("remote1", "0");
network.sleep(timeout*10);
network.releaseButton("remote1", "0");
network.sleep(timeout * 40);

dbg.println("\n***Test 5, touch link remote1 to light1***\n");
expect("remote1", "plugin zll-commissioning channel 11", "Primary channels: 11 \\(0x00000800\\)");
expect("light1", "plugin zll-commissioning channel 11", "Primary channels: 11 \\(0x00000800\\)");
startZllNetwork("light1", "11", "0", "0x1234", timeout * 10);
send("remote1", "plugin zll-commissioning link");
expect("light1", "RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0xFFFF", timeout * 10);
expect("light1", "RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0x0000", timeout * 10);
expectNetworkUp("light1", timeout * 10);
expect("light1", "Touch link with 0x0001 \\(\\(>\\)" + eui64("remote1") + "\\) complete", timeout * 10);
expectNetworkUp("remote1", timeout * 10);
expect("remote1", "Touch link with 0x0002 \\(\\(>\\)" + eui64("light1") + "\\) complete", timeout * 10);
network.sleep(timeout*10);
expect("light1", "plugin zll-commissioning reset", ".*EMBER_NETWORK_DOWN");
network.sleep(timeout*2);  // Allow reset to complete

dbg.println("\n***Test 5, touch link remote1 to light2, leave before complete***\n");

send("light2", "plugin zll-commissioning enable");

expect("remote1", "plugin zll-commissioning channel 15", "Primary channels: 15 \\(0x00008000\\)");
startZllNetwork("light2", "15", "0", "0x5678", timeout * 10);
send("remote1", "plugin zll-commissioning link");
expect("light2", "RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0xFFFF", timeout * 10);
expect("light2", "RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0x0000", timeout * 10);
expectNetworkUp("light2", timeout * 10);
send("remote1", "plugin zll-commissioning reset");
network.sleep(timeout*2);  // Allow reset to complete

dbg.println("\n***Test 5, attempt subsequent touch link remote1 to light2***\n");

send("light1", "plugin zll-commissioning disable");

expect("remote1", "plugin zll-commissioning channel 11", ".*Primary channels: 11 \\(0x00000800\\)");
send("remote1", "plugin zll-commissioning link");
expect("light2", "RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0xFFFF", timeout * 10);
expect("light2", "RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0x0000", timeout * 10);
expectNetworkUp("light2", timeout * 10);
expect("light2", "Touch link with 0x0001 \\(\\(>\\)" + eui64("remote1") + "\\) complete", timeout * 10);
expectNetworkUp("remote1", timeout * 10);
expect("remote1", "Touch link with 0x0002 \\(\\(>\\)" + eui64("light2") + "\\) complete", timeout * 10);

expect("light2", "plugin zll-commissioning reset", ".*EMBER_NETWORK_DOWN", timeout * 10);
network.sleep(timeout*2);
expect("remote1", "plugin zll-commissioning channel 11", "Primary channels: 11 \\(0x00000800\\)");
expect("light1", "plugin zll-commissioning channel 11", ".*Primary channels: 11 \\(0x00000800\\)");
startZllNetwork("light1", "11", "0", "0x1234", timeout * 10);

send("light1", "plugin zll-commissioning enable");
send("light2", "plugin zll-commissioning disable");

send("remote1", "plugin zll-commissioning link");
expect("light1", "RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0xFFFF", timeout * 10);
expect("light1", "RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0x0000", timeout * 10);
expectNetworkUp("light1", timeout * 10);
expect("light1", "Touch link with 0xFFFF \\(\\(>\\)" + eui64("remote1") + "\\) complete", timeout * 10);
expectNetworkUp("remote1", timeout * 10);
expect("remote1", "Touch link with 0x0003 \\(\\(>\\)" + eui64("light1") + "\\) complete", timeout * 10);
