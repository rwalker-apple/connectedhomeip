import com.ember.peek.SimulatedNetwork;

source("util.bsh");

if (runArgument.runUsingMultihop) {
  std.print("****TODO: Fix for multi-hop****");
  return;
}

if (runArgument.runUsingHostApps) {
  // Host-side requires means to set network update id manually;
  // SoC currently uses private stack API.
  std.print("Not currently supported for host");
  return;
}

public String nwkUpdateId(String node)
{
  send(node, "plugin stack-diagnostics info");
  String info = expect(node, "NWK Update ID:.*");
  int i = info.indexOf("ID:");
  return info.substring(i + 4, i + 8);
}

// Create four nodes in the network.
SimulatedNetwork network = createNetwork();
String[] devices = new String[]{"remote", "bridge", "light", "harness"};

String[] socImages = new String[] {
  "build/af-test-apps/ZllColorSceneRemote-simulation/ZllColorSceneRemote",
  "build/af-test-apps/ZllControlBridge-simulation/ZllControlBridge",
  "build/af-test-apps/ZllColorLight-simulation/ZllColorLight",
  "build/af-test-apps/TRaC_TestHarnessZ3-simulation/TRaC_TestHarnessZ3",
};
String[] hostImages = new String[] {
  "build/af-test-apps/ZllColorSceneRemote-simulation-ezsp/ZllColorSceneRemote",
  "build/af-test-apps/ZllControlBridge-simulation-ezsp/ZllControlBridge",
  "build/af-test-apps/ZllColorLight-simulation-ezsp/ZllColorLight",
  "build/af-test-apps/TRaC_TestHarnessZ3-simulation/TRaC_TestHarnessZ3",  // non-ezsp placeholder.
};
String ncpImage = "app/ncp/sample-app/ncp-spi/simulation/build/exe/ncp-spi";

// Create network and load devices according to the runArguments provided.
addAndLoadDevices(devices, socImages, hostImages, ncpImage);

// Setup encryption for all devices.
setupEncryption();

// The remote, bridge, light are mostly blank slates when they start.  They
// have the default channel sets and are factory new, but are otherwise uninitialized.
expectMultiline("remote",
                "plugin zll-commissioning status",
                new String[] {
                "Primary channels: 11, 15, 20, 25 \\(0x02108800\\)",
                "Secondary channels: 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 26 \\(0x05EF7000\\)",
                "ZLL Tokens",
                "Bitmask: 0x00000083",   // addr assignment capable + interop bits now set
                "Free Node IDs,  Min: 0x0000, Max: 0x0000",
                "Free Group IDs, Min: 0x0000, Max: 0x0000",
                "My Group ID Min: 0x0000",
                "RSSI Correction: 0",
                "Security Bitmask: 0x00000000",
                // Security is set up for an unjoined factory-new touchlink device
                "Security Key Index: 15",
                "Security Encryption Key: C0 C1 C2 C3 C4 C5 C6 C7  C8 C9 CA CB CC CD CE CF  "
                });

expectMultiline("bridge",
                "plugin zll-commissioning status",
                new String[] {
                "Primary channels: 11, 15, 20, 25 \\(0x02108800\\)",
                "Secondary channels: 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 26 \\(0x05EF7000\\)",
                "ZLL Tokens",
                "Bitmask: 0x00000083",   // addr assignment capable + interop bits now set
                "Free Node IDs,  Min: 0x0000, Max: 0x0000",
                "Free Group IDs, Min: 0x0000, Max: 0x0000",
                "My Group ID Min: 0x0000",
                "RSSI Correction: 0",
                "Security Bitmask: 0x00000000",
                // Security is set up for an unjoined factory-new touchlink device
                "Security Key Index: 15",
                "Security Encryption Key: C0 C1 C2 C3 C4 C5 C6 C7  C8 C9 CA CB CC CD CE CF  "
                });

expectMultiline("light",
                "plugin zll-commissioning status",
                new String[] {
                "Primary channels: 11, 15, 20, 25 \\(0x02108800\\)",
                "Secondary channels: 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 26 \\(0x05EF7000\\)",
                "ZLL Tokens",
                "Bitmask: 0x00000081",  // interop bit now set
                "Free Node IDs,  Min: 0x0000, Max: 0x0000",
                "Free Group IDs, Min: 0x0000, Max: 0x0000",
                "My Group ID Min: 0x0000",
                "RSSI Correction: 0",
                "Security Bitmask: 0x00000000",
                // Security is set up for an unjoined factory-new touchlink device
                "Security Key Index: 15",
                "Security Encryption Key: C0 C1 C2 C3 C4 C5 C6 C7  C8 C9 CA CB CC CD CE CF  "
                });

//-----------------------------------------------------------------------------
// 1) Send network update request from a different network.

// Touchlink the remote to the light.
send("bridge", "plugin zll-commissioning disable");
send("harness", "plugin zll-commissioning disable");

network.pressButton("remote", "1");
expect("light", "RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0xFFFF", timeout * 10);
expect("light", "RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0x0000", timeout * 10);
expectNetworkUp("light", timeout * 10);
expect("light", "Touch link with 0x0001 \\(\\(>\\)" + eui64("remote") + "\\) complete", timeout * 10);
expectNetworkUp("remote", timeout * 10);
expect("remote", "Touch link with 0x0002 \\(\\(>\\)" + eui64("light") + "\\) complete", timeout * 10);

String zllChannel = channel("light");
networkWait(2000);
String zllPanId = panId("light");
networkWait(2000);
  
// The zll-commissioning-client does not support a simple way of sending a network update
// request, and it doesn't seem worth adding it just for one case, so we'll use the
// Test Harness application to run the test for SoC only.
if (!runArgument.runUsingHostApps) {
  // Form a network on the test harness (configured as a router initiator).
  send("harness", "plugin test-harness z3 set-device-mode 0x01");
  
  startZllNetwork("harness", zllChannel, "0", "0x5678", timeout * 10);
  networkWait(2000);

  // Update the network update id manually on the test harness.
  expect("harness",
         "plugin test-harness z3 nwk set-network-update-id 0x02",
         ".*Set network update id: 0x02");
         
  // The network update id on the light should be 0x00.
  assert(nwkUpdateId("light").equals("0x00"));
  networkWait(1000);

  // Send a network update request from the test harness to the light.
  send("remote", "plugin zll-commissioning disable");
  send("harness", "plugin zll-commissioning enable");
  expect("harness", "plugin zll-commissioning channel " + zllChannel, ".*Primary channels: " + zllChannel + " \\(" + channelMask(zllChannel) + "\\)");

  // The harness finds the light, and sends a network update request.
  expect("harness",
         "plugin test-harness z3 touchlink scan-request-process 1 0 0",
         ".*Scan request process: 0x00");
  expect("harness",
         ".*Network found: node type = 2, zll state = 0x0080, node id = 0x0002, pan id = " + zllPanId);
  networkWait(6000);

  expect("harness",
         "plugin test-harness z3 touchlink is-scanning",
         "scanning:false");
  expect("harness",
         "plugin test-harness z3 touchlink network-update-request 0",
         ".*Network update request: 0x00");
     
  // The light ignores the request, since it is not on the same network,
  // and does not update its update id.
  assert(nwkUpdateId("light").equals("0x00"));
  networkWait(2000);
}

//-----------------------------------------------------------------------------
// 2) Send network update request from the same network.

if (!runArgument.runUsingHostApps) {
  // Touchlink the remote to the test harness, so all three device are on the same network.
  send("light", "plugin zll-commissioning disable");
  send("remote", "plugin zll-commissioning enable");
  
  send("remote", "plugin zll-commissioning link");
  expect("harness", "t........:rx len 9, ep 01, clus 0x1000 \\(ZLL Commissioning\\) FC 11 seq .. cmd 06 payload\\[.. .. .. .. FF FF \\]", timeout * 10);
  expect("harness", "t........:rx len 9, ep 01, clus 0x1000 \\(ZLL Commissioning\\) FC 11 seq .. cmd 06 payload\\[.. .. .. .. 00 00 \\]", timeout * 10);
  expectNetworkUp("harness", timeout * 10);
  expectNetworkUp("remote", timeout * 10);

  String zllPanId = panId("light");
  networkWait(2000);
  
  // Update the network update id again manually on the test harness (since it is
  // on a new network now)
  expect("harness",
         "plugin test-harness z3 nwk set-network-update-id 0x02",
         ".*Set network update id: 0x02");
           
  // The network update id on the light should still be 0x00.
  assert(nwkUpdateId("light").equals("0x00"));
  networkWait(1000);
  
  // Send a network update request from the test harness to the light.
  send("remote", "plugin zll-commissioning disable");
  send("light", "plugin zll-commissioning enable");

  // The harness finds the light, and sends a network update request.
  expect("harness",
         "plugin test-harness z3 touchlink scan-request-process 1 0 0",
         ".*Scan request process: 0x00");
  expect("harness",
         ".*Network found: node type = 2, zll state = 0x0080, node id = 0x0002, pan id = " + zllPanId);
  networkWait(6000);
  expect("harness",
         "plugin test-harness z3 touchlink is-scanning",
         "scanning:false");
  expect("harness",
         "plugin test-harness z3 touchlink network-update-request 0",
         ".*Network update request: 0x00");
         
  // The light updates its update id.
  assert(nwkUpdateId("light").equals("0x02"));
  networkWait(1000);
  
  send("harness", "plugin zll-commissioning disable");
}

//-----------------------------------------------------------------------------
// 3) Join request on same network - target has higher network update id -
// end-device initiator.

send("remote", "plugin zll-commissioning enable");
send("bridge", "plugin zll-commissioning enable");
send("light", "plugin zll-commissioning disable");

// Touchlink the bridge from the remote.
send("remote", "plugin zll-commissioning link");
expectNetworkUp("bridge", timeout * 10);
expect("bridge", "Touch link with 0xFFFF \\(\\(>\\)" + eui64("remote") + "\\) complete", timeout * 10);
expectNetworkUp("remote", timeout * 10);
expect("remote", "Touch link with 0x0004 \\(\\(>\\)" + eui64("bridge") + "\\) complete", timeout * 10);

// Remote, light, and brdige should be joined at this point. Update the network update
// id manually on the light, so that it is higher than that of the remote.
expect("light",
       "custom set-network-update-id 0x02",
       ".*Set network update id: 0x02");

// Touchlink the light from the remote.
send("bridge", "plugin zll-commissioning disable");
send("light", "plugin zll-commissioning enable");
send("remote", "plugin zll-commissioning link");
expect("remote", "Touch link with 0x0002 \\(\\(>\\)" + eui64("light") + "\\) complete", timeout * 10);
networkWait(1000);

// The remote should update its network update id; the light should not.
assert(nwkUpdateId("light").equals("0x02"));
networkWait(1000);
assert(nwkUpdateId("remote").equals("0x02"));
networkWait(1000);

//-----------------------------------------------------------------------------
// 4) Join request on same network - target has higher network update id -
// router initiator.

send("bridge", "plugin zll-commissioning enable");
send("remote", "plugin zll-commissioning disable");

// The network update id on the light should now be higher than that on the bridge.
assert(nwkUpdateId("light").equals("0x02"));
networkWait(1000);
assert(nwkUpdateId("bridge").equals("0x00"));
networkWait(1000);

// Touchlink the light from the bridge.
send("bridge", "plugin zll-commissioning link");
expect("bridge", "Touch link with 0x0002 \\(\\(>\\)" + eui64("light") + "\\) complete", timeout * 10);
networkWait(1000);

// The bridge should update its network update id; the light should not.
assert(nwkUpdateId("light").equals("0x02"));
networkWait(1000);
assert(nwkUpdateId("bridge").equals("0x02"));
networkWait(1000);

//-----------------------------------------------------------------------------
// 3) Join request on same network - target has the same network update id -
// end-device initiator.

send("bridge", "plugin zll-commissioning disable");
send("remote", "plugin zll-commissioning enable");

// The network update id's on the remote and light should be the same.
assert(nwkUpdateId("light").equals("0x02"));
networkWait(1000);
assert(nwkUpdateId("remote").equals("0x02"));
networkWait(1000);

// Touchlink the light from the remote.
send("remote", "plugin zll-commissioning link");
expect("remote", "Touch link with 0x0002 \\(\\(>\\)" + eui64("light") + "\\) complete", timeout * 10);
networkWait(1000);

// Neither device should update its network update id.
assert(nwkUpdateId("light").equals("0x02"));
networkWait(1000);
assert(nwkUpdateId("remote").equals("0x02"));
networkWait(1000);

//-----------------------------------------------------------------------------
// 3) Join request on same network - target has lower network update id -
// end-device initiator.

// Update the network update id manually on the light.
expect("light",
       "custom set-network-update-id 0xfe",
       ".*Set network update id: 0xFE");
assert(nwkUpdateId("light").equals("0xFE"));
networkWait(1000);

// Touchlink the light from the remote.
send("remote", "plugin zll-commissioning link");
expect("remote", "Touch link with 0x0002 \\(\\(>\\)" + eui64("light") + "\\) complete", timeout * 10);
networkWait(1000);

// The remote send a touchlink network update request to the light; the
// light should update its network update id; the remote should not.
assert(nwkUpdateId("light").equals("0x02"));
networkWait(1000);
assert(nwkUpdateId("remote").equals("0x02"));
networkWait(1000);
