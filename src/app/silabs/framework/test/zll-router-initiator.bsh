import com.ember.peek.SimulatedNetwork;

source("util.bsh");

if (runArgument.runUsingMultihop) {
  std.print("****TODO: Fix for multi-hop****");
  return;
}

// Create three nodes in the network.
SimulatedNetwork network = createNetwork();
String[] devices = new String[]{"remote", "bridge", "light"};

String[] socImages = new String[] {
  "build/af-test-apps/ZllColorSceneRemote-simulation/ZllColorSceneRemote",
  "build/af-test-apps/ZllControlBridge-simulation/ZllControlBridge",
  "build/af-test-apps/ZllColorLight-simulation/ZllColorLight",
};
String[] hostImages = new String[] {
  "build/af-test-apps/ZllColorSceneRemote-simulation-ezsp/ZllColorSceneRemote",
  "build/af-test-apps/ZllControlBridge-simulation-ezsp/ZllControlBridge",
  "build/af-test-apps/ZllColorLight-simulation-ezsp/ZllColorLight",
};
String ncpImage = "app/ncp/sample-app/ncp-spi/simulation/build/exe/ncp-spi";

// Create network and load devices according to the runArguments provided.
addAndLoadDevices(devices, socImages, hostImages, ncpImage);
setupEncryption();

// The remote, bridge, light are mostly blank slates when they start.  They
// have the default channel sets and are factory new, but are otherwise uninitialized.
expectMultiline("remote",
                "plugin zll-commissioning status",
                new String[] {
                "Primary channels: 11, 15, 20, 25 \\(0x02108800\\)",
                "Secondary channels: 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 26 \\(0x05EF7000\\)",
                "ZLL Tokens",
                "Bitmask: 0x00000083",   // addr assignment capable + interop bits now set
                "Free Node IDs,  Min: 0x0000, Max: 0x0000",
                "Free Group IDs, Min: 0x0000, Max: 0x0000",
                "My Group ID Min: 0x0000",
                "RSSI Correction: 0",
                "Security Bitmask: 0x00000000",
                // Security is set up for an unjoined factory-new touchlink device
                "Security Key Index: 15",
                "Security Encryption Key: C0 C1 C2 C3 C4 C5 C6 C7  C8 C9 CA CB CC CD CE CF  "
                });

expectMultiline("bridge",
                "plugin zll-commissioning status",
                new String[] {
                "Primary channels: 11, 15, 20, 25 \\(0x02108800\\)",
                "Secondary channels: 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 26 \\(0x05EF7000\\)",
                "ZLL Tokens",
                "Bitmask: 0x00000083",   // addr assignment capable + interop bits now set
                "Free Node IDs,  Min: 0x0000, Max: 0x0000",
                "Free Group IDs, Min: 0x0000, Max: 0x0000",
                "My Group ID Min: 0x0000",
                "RSSI Correction: 0",
                "Security Bitmask: 0x00000000",
                // Security is set up for an unjoined factory-new touchlink device
                "Security Key Index: 15",
                "Security Encryption Key: C0 C1 C2 C3 C4 C5 C6 C7  C8 C9 CA CB CC CD CE CF  "
                });

expectMultiline("light",
                "plugin zll-commissioning status",
                new String[] {
                "Primary channels: 11, 15, 20, 25 \\(0x02108800\\)",
                "Secondary channels: 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 26 \\(0x05EF7000\\)",
                "ZLL Tokens",
                "Bitmask: 0x00000081",  // interop bit now set
                "Free Node IDs,  Min: 0x0000, Max: 0x0000",
                "Free Group IDs, Min: 0x0000, Max: 0x0000",
                "My Group ID Min: 0x0000",
                "RSSI Correction: 0",
                "Security Bitmask: 0x00000000",
                // Security is set up for an unjoined factory-new touchlink device
                "Security Key Index: 15",
                "Security Encryption Key: C0 C1 C2 C3 C4 C5 C6 C7  C8 C9 CA CB CC CD CE CF  "
                });

// Form a network on the light.  It is now not factory new and has the security
// key. It says that it is a ZigBee 3.0 device, as initialized before forming
// a network. Network will start on a channel 25.
startZllNetwork("light", "25", "0", "0x1234", timeout * 10);
send("light", "plugin zll-commissioning status");
expect("light", ".*Primary channels: 11, 15, 20, 25 \\(0x02108800\\)");
expect("light", "Secondary channels: 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 26 \\(0x05EF7000\\)");
expect("light", "ZLL Tokens");
expect("light", "Bitmask: 0x00000180"); // now treated as NFN and non-ZLL.
expect("light", "Free Node IDs,  Min: 0x0000, Max: 0x0000");
expect("light", "Free Group IDs, Min: 0x0000, Max: 0x0000");
expect("light", "My Group ID Min: 0x0000");
expect("light", "RSSI Correction: 0");
expect("light", "Security Bitmask: 0x00000000");
expect("light", "Security Key Index: 15");
expect("light", "Security Encryption Key: C0 C1 C2 C3 C4 C5 C6 C7  C8 C9 CA CB CC CD CE CF  ");

send("remote", "plugin zll-commissioning disable");

// Touch link the bridge and light.
send("bridge", "plugin zll-commissioning link");
expect("light", ".*RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0xFFFF", timeout * 10);
expect("light", "RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0x0000", timeout * 10);
expectNetworkUp("light", timeout * 10);
expect("light", "Touch link with 0x0001 \\(\\(>\\)" + eui64("bridge") + "\\) complete");
expectNetworkUp("bridge", timeout * 10);
expect("bridge", "Touch link with 0x0002 \\(\\(>\\)" + eui64("light") + "\\) complete");

// The bridge and light are both not factory new. They both state that they are
// ZigBee 3.0 devices since they have touch linked.
expectMultiline("bridge",
                "plugin zll-commissioning status",
                new String[] {
                "Primary channels: 11, 15, 20, 25 \\(0x02108800\\)",
                "Secondary channels: 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 26 \\(0x05EF7000\\)",
                "ZLL Tokens",
                "Bitmask: 0x00000092",  // Initiator bit now set
                "Free Node IDs,  Min: 0x0003, Max: 0xFFF7",
                "Free Group IDs, Min: 0x0022, Max: 0xFEFF",
                "My Group ID Min: 0x0001",
                "RSSI Correction: 0",
                "Security Bitmask: 0x00000000",
                "Security Key Index: 15",
                "Security Encryption Key: C0 C1 C2 C3 C4 C5 C6 C7  C8 C9 CA CB CC CD CE CF  "
                });

expectMultiline("light",
                "plugin zll-commissioning status",
                new String[] {
                "Primary channels: 11, 15, 20, 25 \\(0x02108800\\)",
                "Secondary channels: 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 26 \\(0x05EF7000\\)",
                "ZLL Tokens",
                "Bitmask: 0x00000080",
                "Free Node IDs,  Min: 0x0000, Max: 0x0000",
                "Free Group IDs, Min: 0x0000, Max: 0x0000",
                "My Group ID Min: 0x0002",
                "RSSI Correction: 0",
                "Security Bitmask: 0x00000000",
                "Security Key Index: 15",
                "Security Encryption Key: C0 C1 C2 C3 C4 C5 C6 C7  C8 C9 CA CB CC CD CE CF  "
                });

// Touch link the remote and bridge.  The bridge will bring the remote into the
// existing network on Channel 25.
// Note, we are testing for pre-emption, and the timing is quite sensitive, especially for
// host, so we need to kick off the remote first, and add a short delay before kicking off
// the bridge.
send("remote", "plugin zll-commissioning enable");
send("remote", "plugin zll-commissioning link");
networkWait(1000);
send("bridge", "plugin zll-commissioning link");
expect("remote", "Touch link failed: 0x04");
expect("remote", ".*RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0xFFFF", timeout * 10);
expect("remote", "RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0x0000", timeout * 10);
expectNetworkUp("bridge", timeout * 10);
expect("bridge", "Touch link with 0x0003 \\(\\(>\\)" + eui64("remote") + "\\) complete", timeout * 10);
expectNetworkUp("remote", timeout * 10);
expect("remote", "Touch link with 0xFFFF \\(\\(>\\)" + eui64("bridge") + "\\) complete", timeout * 10);

// The remote is not factory new and the bridge will have split its address
// ranges. They both state that they are ZigBee 3.0 devices since they
// have touch linked.
expectMultiline("remote",
                "plugin zll-commissioning status",
                new String[] {
                "Primary channels: 11, 15, 20, 25 \\(0x02108800\\)",
                "Secondary channels: 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 26 \\(0x05EF7000\\)",
                "ZLL Tokens",
                "Bitmask: 0x00000092",  // Initiator bit now set
                "Free Node IDs,  Min: 0x7FFD, Max: 0xFFF7",
                "Free Group IDs, Min: 0x7FA0, Max: 0xFEFF",
                "My Group ID Min: 0x0022",
                "RSSI Correction: 0",
                "Security Bitmask: 0x00000000",
                "Security Key Index: 15",
                "Security Encryption Key: C0 C1 C2 C3 C4 C5 C6 C7  C8 C9 CA CB CC CD CE CF  "
                });

expectMultiline("bridge",
                "plugin zll-commissioning status",
                new String[] {
                "Primary channels: 11, 15, 20, 25 \\(0x02108800\\)",
                "Secondary channels: 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 26 \\(0x05EF7000\\)",
                "ZLL Tokens",
                "Bitmask: 0x00000092",  // Initiator bit now set
                "Free Node IDs,  Min: 0x0004, Max: 0x7FFC",
                "Free Group IDs, Min: 0x0042, Max: 0x7F9F",
                "My Group ID Min: 0x0001",
                "RSSI Correction: 0",
                "Security Bitmask: 0x00000000",
                "Security Key Index: 15",
                "Security Encryption Key: C0 C1 C2 C3 C4 C5 C6 C7  C8 C9 CA CB CC CD CE CF  "
                });

// Reset the bridge and touch link again with the remote and bridge.  This
// time, the remote will bring the bridge into the existing network.
// Note, we are testing for pre-emption, and the timing is quite sensitive, especially for
// host, so we need to kick off the bridge first, and add a short delay before kicking off
// the remote.
expect("bridge", "plugin zll-commissioning reset", ".*EMBER_NETWORK_DOWN", timeout * 10);
send("bridge", "plugin zll-commissioning link");
networkWait(500);
send("remote", "plugin zll-commissioning link");
expect("bridge", "Touch link failed: 0x04");
expect("bridge", ".*RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0xFFFF", timeout * 10);
expect("bridge", "RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0x0000", timeout * 10);
expectNetworkUp("bridge", timeout * 10);
expect("bridge", "Touch link with 0xFFFF \\(\\(>\\)" + eui64("remote") + "\\) complete", timeout * 10);
expectNetworkUp("remote", timeout * 10);
expect("remote", "Touch link with 0x7FFD \\(\\(>\\)" + eui64("bridge") + "\\) complete", timeout * 10);

// The address range will be split again. The devices state that they are
// ZigBee 3.0 since they have been touch linked.
expectMultiline("remote",
                "plugin zll-commissioning status",
                new String[] {
                "Primary channels: 11, 15, 20, 25 \\(0x02108800\\)",
                "Secondary channels: 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 26 \\(0x05EF7000\\)",
                "ZLL Tokens",
                "Bitmask: 0x00000092",  // Initiator bit now set
                "Free Node IDs,  Min: 0x7FFE, Max: 0xBFF9",
                "Free Group IDs, Min: 0x7FA1, Max: 0xBF4E",
                "My Group ID Min: 0x0022",
                "RSSI Correction: 0",
                "Security Bitmask: 0x00000000",
                "Security Key Index: 15",
                "Security Encryption Key: C0 C1 C2 C3 C4 C5 C6 C7  C8 C9 CA CB CC CD CE CF  "
                });

expectMultiline("bridge",
                "plugin zll-commissioning status",
                new String[] {
                "Primary channels: 11, 15, 20, 25 \\(0x02108800\\)",
                "Secondary channels: 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 26 \\(0x05EF7000\\)",
                "ZLL Tokens",
                "Bitmask: 0x00000092",  // Initiator bit now set
                "Free Node IDs,  Min: 0xBFFA, Max: 0xFFF7",
                "Free Group IDs, Min: 0xBF4F, Max: 0xFEFF",
                "My Group ID Min: 0x7FA0",
                "RSSI Correction: 0",
                "Security Bitmask: 0x00000000",
                "Security Key Index: 15",
                "Security Encryption Key: C0 C1 C2 C3 C4 C5 C6 C7  C8 C9 CA CB CC CD CE CF  "
                });
