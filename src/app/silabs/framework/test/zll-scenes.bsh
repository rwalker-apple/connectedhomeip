import com.ember.peek.SimulatedNetwork;

source("util.bsh");

if (runArgument.runUsingMultihop) {
  std.print("****TODO: Fix for multi-hop****");
  return;
}

// Create two nodes in the network.
SimulatedNetwork network = createNetwork();
String[] devices = new String[]{"light", "remote"};

String[] socImages = new String[] {
  "build/af-test-apps/ZllColorLight-simulation/ZllColorLight",
  "build/af-test-apps/ZllColorSceneRemote-simulation/ZllColorSceneRemote",
};
String[] hostImages = new String[] {
  "build/af-test-apps/ZllColorLight-simulation-ezsp/ZllColorLight",
  "build/af-test-apps/ZllColorSceneRemote-simulation-ezsp/ZllColorSceneRemote",
};
String ncpImage = "app/ncp/sample-app/ncp-spi/simulation/build/exe/ncp-spi";

// Create network and load devices according to the runArguments provided.
addAndLoadDevices(devices, socImages, hostImages, ncpImage);

// Set up encryption and touch link the network.
setupEncryption();
touchlinkZllDevices("remote", "light");

String nid1 = findNodeByName("light").nodeIdHex;
String nid2 = findNodeByName("remote").nodeIdHex;

// The GlobalSceneControl attribute should start out as true.
send("remote", "zcl global read 0x0006 0x4000");
send("remote", "send " + nid1 + " 1 1");
expect("light", "READ_ATTR: clus 0006");
expect("light", "READ: clus 0006, attr 4000, dataLen: 01, OK");
expectMultiline("remote",
                "",
                new String[] {
                  "READ_ATTR_RESP: \\(On/off\\)",
                  " - attr:4000, status:00",
                  "   type:10, val:01",
                });
expect("light", "DEFAULT_RESP: \\(On/off\\) cmd 01 status 00");

// Create the 0xDEAD group.
send("remote", "zcl groups add 0xDEAD \"dead\"");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: AddGroup 0xDEAD, \"dead\"");
expect("remote", "RX: AddGroupResponse 0x00, 0xDEAD");
expect("light", "DEFAULT_RESP: \\(Groups\\) cmd 00 status 00");

// Creating a scene with the regular AddScene command takes the transition time
// in seconds.
send("remote", "zcl scenes add 0xDEAD 0x00 0x00AF \"dead\"");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: AddScene 0xDEAD, 0x00, 0x00AF, \"dead\", [0-9a-fA-F]*");
expect("remote", "RX: AddSceneResponse 0x00, 0xDEAD, 0x00");
expect("light", "DEFAULT_RESP: \\(Scenes\\) cmd 00 status 00");
send("light", "plugin scenes print");
expectMultiline("light",
                "plugin scenes print",
                new String[] {
                  "using 0x01 out of 0x08 table slots",
                  "00: ep 01 grp DEAD scene 00 tt 175\\.0.*"
                });

// Creating a scene with the new EnhancedAddScene command takes the transition
// time in tenths of a second.
send("remote", "zcl scenes eadd 0xDEAD 0x01 0x00AF \"enhanceddead\"");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: EnhancedAddScene 0xDEAD, 0x01, 0x00AF, \"enhanceddead\", [0-9a-fA-F]*");
expect("remote", "RX: EnhancedAddSceneResponse 0x00, 0xDEAD, 0x01");
expect("light", "DEFAULT_RESP: \\(Scenes\\) cmd 40 status 00");
expectMultiline("light",
                "plugin scenes print",
                new String[] {
                  "using 0x02 out of 0x08 table slots",
                  "00: ep 01 grp DEAD scene 00 tt 175\\.0.*",
                  "01: ep 01 grp DEAD scene 01 tt 17\\.5.*"
                });

// Viewing a scene with the regular ViewScene command should return the
// transition time in seconds.
send("remote", "zcl scenes view 0xDEAD 0x00");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: ViewScene 0xDEAD, 0x00.*");
expect("remote", "RX: ViewSceneResponse 0x00, 0xDEAD, 0x00, 0x00AF, \"\",.*");
expect("light", "DEFAULT_RESP: \\(Scenes\\) cmd 01 status 00");
send("remote", "zcl scenes view 0xDEAD 0x01");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: ViewScene 0xDEAD, 0x01");
expect("remote", "RX: ViewSceneResponse 0x00, 0xDEAD, 0x01, 0x0011, \"\",.*");
expect("light", "DEFAULT_RESP: \\(Scenes\\) cmd 01 status 00");

// Viewing a scene with the new EnhancedViewScene command should return the
// transition time in tenths of a second.
send("remote", "zcl scenes eview 0xDEAD 0x00");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: EnhancedViewScene 0xDEAD, 0x00");
expect("remote", "RX: EnhancedViewSceneResponse 0x00, 0xDEAD, 0x00, 0x06D6, \"\",.*");
expect("light", "DEFAULT_RESP: \\(Scenes\\) cmd 41 status 00");
send("remote", "zcl scenes eview 0xDEAD 0x01");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: EnhancedViewScene 0xDEAD, 0x01");
expect("remote", "RX: EnhancedViewSceneResponse 0x00, 0xDEAD, 0x01, 0x00AF, \"\",.*");
expect("light", "DEFAULT_RESP: \\(Scenes\\) cmd 41 status 00");

// Store a scene and then view it to make sure the extension field sets are
// behaving correctly.
send("remote", "zcl scenes store 0xDEAD 0x00");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: StoreScene 0xDEAD, 0x00");
expect("remote", "RX: StoreSceneResponse 0x00, 0xDEAD, 0x00");
expect("light", "DEFAULT_RESP: \\(Scenes\\) cmd 04 status 00");
send("remote", "zcl scenes view 0xDEAD 0x00");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: ViewScene 0xDEAD, 0x00");
expect("remote", "RX: ViewSceneResponse 0x00, 0xDEAD, 0x00, 0x00AF, \"\", \\[0x0006 0x01 [0-9a-fA-F]{2}\\] \\[0x0008 0x01 [0-9a-fA-F]{2}\\] \\[0x0300 0x04 [0-9a-fA-F]{8}\\]");
expect("light", "DEFAULT_RESP: \\(Scenes\\) cmd 01 status 00");

// Copy one scene within the same group.  This will update the enhanced scene.
send("remote", "zcl scenes copy 0x00 0xDEAD 0x00 0xDEAD 0x01");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: CopyScene 0x00, 0xDEAD, 0x00, 0xDEAD, 0x01");
expect("remote", "RX: CopySceneResponse 0x00, 0xDEAD, 0x00");
expect("light", "DEFAULT_RESP: \\(Scenes\\) cmd 42 status 00");
expectMultiline("light",
                "plugin scenes print",
                new String[]{
                  "using 0x02 out of 0x08 table slots",
                  "00: ep 01 grp DEAD scene 00 tt 175\\.0.*",
                  "01: ep 01 grp DEAD scene 01 tt 175\\.0.*"
                });

// Copy all scenes in one group to the global group.
send("remote", "zcl scenes copy 0x01 0xDEAD 0x00 0x0000 0x00");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: CopyScene 0x01, 0xDEAD, 0x00, 0x0000, 0x00");
expect("remote", "RX: CopySceneResponse 0x00, 0xDEAD, 0x00");
expect("light", "DEFAULT_RESP: \\(Scenes\\) cmd 42 status 00");
expectMultiline("light",
                "plugin scenes print",
                new String[] {
                  "using 0x04 out of 0x08 table slots",
                  "00: ep 01 grp DEAD scene 00 tt 175\\.0.*",
                  "01: ep 01 grp DEAD scene 01 tt 175\\.0.*",
                  "02: ep 01 grp 0000 scene 00 tt 175\\.0.*",
                  "03: ep 01 grp 0000 scene 01 tt 175\\.0.*"
                });

// Delete the 0xDEAD scenes.
send("remote", "zcl scenes rmall 0xDEAD");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: RemoveAllScenes 0xDEAD");
expect("remote", "RX: RemoveAllScenesResponse 0x00, 0xDEAD");
expect("light", "DEFAULT_RESP: \\(Scenes\\) cmd 03 status 00");
expectMultiline("light",
                "plugin scenes print",
                new String[] {
                  "using 0x02 out of 0x08 table slots",
                  "02: ep 01 grp 0000 scene 00 tt 175\\.0.*",
                  "03: ep 01 grp 0000 scene 01 tt 175\\.0.*"
                });

// Copying from the 0xDEAD group should fail with INVALID_FIELD because the
// scenes don't exist.
send("remote", "zcl scenes copy 0x01 0xDEAD 0x00 0x0000 0x00");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: CopyScene 0x01, 0xDEAD, 0x00, 0x0000, 0x00");
expect("remote", "RX: CopySceneResponse 0x85, 0xDEAD, 0x00");
expect("light", "DEFAULT_RESP: \\(Scenes\\) cmd 42 status 00");

// Copying to the 0xBEEF group should fail with INVALID_FIELD because the
// group doesn't exist.
send("remote", "zcl scenes copy 0x01 0x0000 0x00 0xBEEF 0x00");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: CopyScene 0x01, 0x0000, 0x00, 0xBEEF, 0x00");
expect("remote", "RX: CopySceneResponse 0x85, 0x0000, 0x00");
expect("light", "DEFAULT_RESP: \\(Scenes\\) cmd 42 status 00");

// Copying to the 0xDEAD group should work.
send("remote", "zcl scenes copy 0x01 0x0000 0x00 0xDEAD 0x00");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: CopyScene 0x01, 0x0000, 0x00, 0xDEAD, 0x00");
expect("remote", "RX: CopySceneResponse 0x00, 0x0000, 0x00");
expect("light", "DEFAULT_RESP: \\(Scenes\\) cmd 42 status 00");
send("light", "plugin scenes print");
expectMultiline("light",
                "using 0x04 out of 0x08 table slots",
                new String[]{
                  "00: ep 01 grp DEAD scene 00 tt 175\\.0.*",
                  "01: ep 01 grp DEAD scene 01 tt 175\\.0.*",
                  "02: ep 01 grp 0000 scene 00 tt 175\\.0.*",
                  "03: ep 01 grp 0000 scene 01 tt 175\\.0.*"
                });

// Copy one scene a few times.
send("remote", "zcl scenes copy 0x00 0xDEAD 0x01 0xDEAD 0x02");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: CopyScene 0x00, 0xDEAD, 0x01, 0xDEAD, 0x02");
expect("remote", "RX: CopySceneResponse 0x00, 0xDEAD, 0x01");
expect("light", "DEFAULT_RESP: \\(Scenes\\) cmd 42 status 00");
send("remote", "zcl scenes copy 0x00 0xDEAD 0x02 0xDEAD 0x03");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: CopyScene 0x00, 0xDEAD, 0x02, 0xDEAD, 0x03");
expect("remote", "RX: CopySceneResponse 0x00, 0xDEAD, 0x02");
expect("light", "DEFAULT_RESP: \\(Scenes\\) cmd 42 status 00");
send("remote", "zcl scenes copy 0x00 0xDEAD 0x03 0xDEAD 0x04");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: CopyScene 0x00, 0xDEAD, 0x03, 0xDEAD, 0x04");
expect("remote", "RX: CopySceneResponse 0x00, 0xDEAD, 0x03");
expect("light", "DEFAULT_RESP: \\(Scenes\\) cmd 42 status 00");
send("light", "plugin scenes print");
expectMultiline("light",
                "using 0x07 out of 0x08 table slots",
                new String[] {
                  "00: ep 01 grp DEAD scene 00 tt 175\\.0.*",
                  "01: ep 01 grp DEAD scene 01 tt 175\\.0.*",
                  "02: ep 01 grp 0000 scene 00 tt 175\\.0.*",
                  "03: ep 01 grp 0000 scene 01 tt 175\\.0.*",
                  "04: ep 01 grp DEAD scene 02 tt 175\\.0.*",
                  "05: ep 01 grp DEAD scene 03 tt 175\\.0.*",
                  "06: ep 01 grp DEAD scene 04 tt 175\\.0.*"
                });

// Copy all five scenes in one group to the global group.  Two of the scenes
// will be updated.  There is only one empty slot for the other three that need
// to be copied, so the command will fail.
send("remote", "zcl scenes copy 0x01 0xDEAD 0x00 0x0000 0x00");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: CopyScene 0x01, 0xDEAD, 0x00, 0x0000, 0x00");
expect("remote", "RX: CopySceneResponse 0x89, 0xDEAD, 0x00");
expect("light", "DEFAULT_RESP: \\(Scenes\\) cmd 42 status 00");
expectMultiline("light",
                "plugin scenes print",
                new String[] {
                  "using 0x08 out of 0x08 table slots",
                  "00: ep 01 grp DEAD scene 00 tt 175\\.0.*",
                  "01: ep 01 grp DEAD scene 01 tt 175\\.0.*",
                  "02: ep 01 grp 0000 scene 00 tt 175\\.0.*",
                  "03: ep 01 grp 0000 scene 01 tt 175\\.0.*",
                  "04: ep 01 grp DEAD scene 02 tt 175\\.0.*",
                  "05: ep 01 grp DEAD scene 03 tt 175\\.0.*",
                  "06: ep 01 grp DEAD scene 04 tt 175\\.0.*",
                  "07: ep 01 grp 0000 scene 02 tt 175\\.0.*"
                });

// Remove some scenes.
send("remote", "zcl scenes remove 0xDEAD 0x04");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: RemoveScene 0xDEAD, 0x04");
expect("remote", "RX: RemoveSceneResponse 0x00, 0xDEAD, 0x04");
expect("light", "DEFAULT_RESP: \\(Scenes\\) cmd 02 status 00");
expectMultiline("light",
                "plugin scenes print",
                new String[] {
                  "using 0x07 out of 0x08 table slots",
                  "00: ep 01 grp DEAD scene 00 tt 175\\.0.*",
                  "01: ep 01 grp DEAD scene 01 tt 175\\.0.*",
                  "02: ep 01 grp 0000 scene 00 tt 175\\.0.*",
                  "03: ep 01 grp 0000 scene 01 tt 175\\.0.*",
                  "04: ep 01 grp DEAD scene 02 tt 175\\.0.*",
                  "05: ep 01 grp DEAD scene 03 tt 175\\.0.*",
                  "07: ep 01 grp 0000 scene 02 tt 175\\.0.*"
                });

// Try the copy again.  There are only four scenes to copy now.  Three scenes
// will be updated and one new copy will be made.
send("remote", "zcl scenes copy 0x01 0xDEAD 0x00 0x0000 0x00");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: CopyScene 0x01, 0xDEAD, 0x00, 0x0000, 0x00");
expect("remote", "RX: CopySceneResponse 0x00, 0xDEAD, 0x00");
expect("light", "DEFAULT_RESP: \\(Scenes\\) cmd 42 status 00");
expectMultiline("light",
                "plugin scenes print",
                new String[] {
                  "using 0x08 out of 0x08 table slots",
                  "00: ep 01 grp DEAD scene 00 tt 175\\.0.*",
                  "01: ep 01 grp DEAD scene 01 tt 175\\.0.*",
                  "02: ep 01 grp 0000 scene 00 tt 175\\.0.*",
                  "03: ep 01 grp 0000 scene 01 tt 175\\.0.*",
                  "04: ep 01 grp DEAD scene 02 tt 175\\.0.*",
                  "05: ep 01 grp DEAD scene 03 tt 175\\.0.*",
                  "06: ep 01 grp 0000 scene 03 tt 175\\.0.*",
                  "07: ep 01 grp 0000 scene 02 tt 175\\.0.*"
                });

// OffWithEffect should turn the light off and set GlobalSceneControl to false.
// It will also update the global scene.
send("remote", "zcl on-off offeffect 0x00 0x00");
send("remote", "send " + nid1 + " 1 1");
send("remote", "zcl global read 0x0006 0x0000");
send("remote", "send " + nid1 + " 1 1");
expect("light", "READ_ATTR: clus 0006");
expect("light", "READ: clus 0006, attr 0000, dataLen: 01, OK");
expectMultiline("remote",
                "",
                new String[] {
                  "READ_ATTR_RESP: \\(On/off\\)",
                  " - attr:0000, status:00",
                  "   type:10, val:00"
                });
expect("light", "DEFAULT_RESP: \\(On/off\\) cmd 01 status 00");
send("remote", "zcl global read 0x0006 0x4000");
send("remote", "send " + nid1 + " 1 1");
expect("light", "READ_ATTR: clus 0006");
expect("light", "READ: clus 0006, attr 4000, dataLen: 01, OK");
expectMultiline("remote",
                "",
                new String[] {
                  "READ_ATTR_RESP: \\(On/off\\)",
                  " - attr:4000, status:00",
                  "   type:10, val:00",
                });
expect("light", "DEFAULT_RESP: \\(On/off\\) cmd 01 status 00");

// OnWithRecallGlobalScene will turn the light back on and set
// GlobalSceneControl to true.
send("remote", "zcl on-off onrecall");
send("remote", "send " + nid1 + " 1 1");
send("remote", "zcl global read 0x0006 0x0000");
send("remote", "send " + nid1 + " 1 1");
expect("light", "READ_ATTR: clus 0006");
expect("light", "READ: clus 0006, attr 0000, dataLen: 01, OK");
expectMultiline("remote", 
                "",
                new String[] {
                "READ_ATTR_RESP: \\(On/off\\)",
                " - attr:0000, status:00",
                "   type:10, val:00",
                });
expect("light", "DEFAULT_RESP: \\(On/off\\) cmd 01 status 00");
send("remote", "zcl global read 0x0006 0x4000");
send("remote", "send " + nid1 + " 1 1");
expect("light", "READ_ATTR: clus 0006");
expect("light", "READ: clus 0006, attr 4000, dataLen: 01, OK");
expectMultiline("remote",
                "",
                new String[] {
                  "READ_ATTR_RESP: \\(On/off\\)",
                  " - attr:4000, status:00",
                  "   type:10, val:01",
                });
expect("light", "DEFAULT_RESP: \\(On/off\\) cmd 01 status 00");

// Manually set GlobalSceneControl to false and then turn the light on.  This
// should set GlobalSceneControl to true.
send("light", "write 0x01 0x0006 0x4000 1 0x10 {00}");
network.sleep(1000);
send("remote", "zcl on-off on");
send("remote", "send " + nid1 + " 1 1");
network.sleep(1000);
send("remote", "zcl global read 0x0006 0x0000");
send("remote", "send " + nid1 + " 1 1");
expect("light", "READ_ATTR: clus 0006");
expect("light", "READ: clus 0006, attr 0000, dataLen: 01, OK");
expectMultiline("remote", 
                "",
                new String[] {
                "READ_ATTR_RESP: \\(On/off\\)",
                " - attr:0000, status:00",
                "   type:10, val:01",
                });
expect("light", "DEFAULT_RESP: \\(On/off\\) cmd 01 status 00");
network.sleep(1000);
send("remote", "zcl global read 0x0006 0x4000");
send("remote", "send " + nid1 + " 1 1");
expect("light", "READ_ATTR: clus 0006");
expect("light", "READ: clus 0006, attr 4000, dataLen: 01, OK");
expectMultiline("remote",
                "",
                new String[] {
                  "READ_ATTR_RESP: \\(On/off\\)",
                  " - attr:4000, status:00",
                  "   type:10, val:01",
                });
expect("light", "DEFAULT_RESP: \\(On/off\\) cmd 01 status 00");

// Turn the light off.  GlobalSceneControl should not change.
send("remote", "zcl on-off off");
send("remote", "send " + nid1 + " 1 1");
send("remote", "zcl global read 0x0006 0x0000");
send("remote", "send " + nid1 + " 1 1");
expect("light", "READ_ATTR: clus 0006");
expect("light", "READ: clus 0006, attr 0000, dataLen: 01, OK");
expectMultiline("remote",
                "",
                new String[] {
                  "READ_ATTR_RESP: \\(On/off\\)",
                  " - attr:0000, status:00",
                  "   type:10, val:00",
                });
expect("light", "DEFAULT_RESP: \\(On/off\\) cmd 01 status 00");
send("remote", "zcl global read 0x0006 0x4000");
send("remote", "send " + nid1 + " 1 1");
expect("light", "READ_ATTR: clus 0006");
expect("light", "READ: clus 0006, attr 4000, dataLen: 01, OK");

expectMultiline("remote",
                "",
                new String[] {
                  "READ_ATTR_RESP: \\(On/off\\)",
                  " - attr:4000, status:00",
                  "   type:10, val:01",
                });
expect("light", "DEFAULT_RESP: \\(On/off\\) cmd 01 status 00");

// Toggle the light.  GlobalSceneControl should not change.
send("remote", "zcl on-off toggle");
send("remote", "send " + nid1 + " 1 1");
send("remote", "zcl global read 0x0006 0x0000");
send("remote", "send " + nid1 + " 1 1");
expect("light", "READ_ATTR: clus 0006");
expect("light", "READ: clus 0006, attr 0000, dataLen: 01, OK");
expectMultiline("remote",
                "",
                new String[] {
                  "READ_ATTR_RESP: \\(On/off\\)",
                  " - attr:0000, status:00",
                  "   type:10, val:01",
                });
expect("light", "DEFAULT_RESP: \\(On/off\\) cmd 01 status 00");
send("remote", "zcl global read 0x0006 0x4000");
send("remote", "send " + nid1 + " 1 1");
expect("light", "READ_ATTR: clus 0006");
expect("light", "READ: clus 0006, attr 4000, dataLen: 01, OK");
expectMultiline("remote",
                "",
                new String[] {
                  "READ_ATTR_RESP: \\(On/off\\)",
                  " - attr:4000, status:00",
                  "   type:10, val:01",
                });
expect("light", "DEFAULT_RESP: \\(On/off\\) cmd 01 status 00");

// Manually set GlobalSceneControl to false and then recall a scene.  This will
// set a bunch of attributes in other clusters and flip GlobalSceneControl.
send("light", "write 0x01 0x0006 0x4000 1 0x10 {00}");
network.sleep(1000);
send("light", "plugin scenes print");
send("remote", "zcl scenes recall 0xDEAD 0x03 0x0000");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: RecallScene 0xDEAD, 0x03");
send("light", "print attr");
expect("remote", "DEFAULT_RESP: \\(Scenes\\) cmd 05 status 00");
network.sleep(1000);
send("remote", "zcl global read 0x0006 0x4000");
send("remote", "send " + nid1 + " 1 1");
expect("light", "READ_ATTR: clus 0006");
expect("light", "READ: clus 0006, attr 4000, dataLen: 01, OK");
expectMultiline("remote",
                "",
                new String[] {
                  "READ_ATTR_RESP: \\(On/off\\)",
                  " - attr:4000, status:00",
                  "   type:10, val:01",
                });
expect("light", "DEFAULT_RESP: \\(On/off\\) cmd 01 status 00");

// Turn light off / manually set GlobalSceneControl to be false. 
// Toggling the light should set GlobalSceneControl to TRUE
send("remote", "zcl on-off off");
send("remote", "send " + nid1 + " 1 1");
network.sleep(1000);
send("remote", "zcl global read 0x0006 0x0000");
send("remote", "send " + nid1 + " 1 1");
expect("light", "READ_ATTR: clus 0006");
expect("light", "READ: clus 0006, attr 0000, dataLen: 01, OK");
expectMultiline("remote", 
                "",
                new String[] {
                "READ_ATTR_RESP: \\(On/off\\)",
                " - attr:0000, status:00",
                "   type:10, val:00",
                });
expect("light", "DEFAULT_RESP: \\(On/off\\) cmd 01 status 00");
network.sleep(1000);
send("light", "write 0x01 0x0006 0x4000 1 0x10 {00}");
network.sleep(1000);
send("remote", "zcl global read 0x0006 0x4000");
send("remote", "send " + nid1 + " 1 1");
expect("light", "READ_ATTR: clus 0006");
expect("light", "READ: clus 0006, attr 4000, dataLen: 01, OK");
expectMultiline("remote",
                "",
                new String[] {
                  "READ_ATTR_RESP: \\(On/off\\)",
                  " - attr:4000, status:00",
                  "   type:10, val:00",
                });
expect("light", "DEFAULT_RESP: \\(On/off\\) cmd 01 status 00");

send("remote", "zcl on-off toggle");
send("remote", "send " + nid1 + " 1 1");
send("remote", "zcl global read 0x0006 0x0000");
send("remote", "send " + nid1 + " 1 1");
expect("light", "READ_ATTR: clus 0006");
expect("light", "READ: clus 0006, attr 0000, dataLen: 01, OK");
expectMultiline("remote",
                "",
                new String[] {
                  "READ_ATTR_RESP: \\(On/off\\)",
                  " - attr:0000, status:00",
                  "   type:10, val:01",
                });
expect("light", "DEFAULT_RESP: \\(On/off\\) cmd 01 status 00");
send("remote", "zcl global read 0x0006 0x4000");
send("remote", "send " + nid1 + " 1 1");
expect("light", "READ_ATTR: clus 0006");
expect("light", "READ: clus 0006, attr 4000, dataLen: 01, OK");
expectMultiline("remote",
                "",
                new String[] {
                  "READ_ATTR_RESP: \\(On/off\\)",
                  " - attr:4000, status:00",
                  "   type:10, val:01",
                });
expect("light", "DEFAULT_RESP: \\(On/off\\) cmd 01 status 00");

// Manually set GlobalSceneControl to false and then recall a scene.  This will
// set a bunch of attributes in other clusters and flip GlobalSceneControl.
send("light", "write 0x01 0x0006 0x4000 1 0x10 {00}");
network.sleep(1000);
send("remote", "zcl scenes recall 0xDEAD 0x03 0x0000");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: RecallScene 0xDEAD, 0x03");
expect("remote", "DEFAULT_RESP: \\(Scenes\\) cmd 05 status 00");
network.sleep(1000);
send("remote", "zcl global read 0x0006 0x4000");
send("remote", "send " + nid1 + " 1 1");
expect("light", "READ_ATTR: clus 0006");
expect("light", "READ: clus 0006, attr 4000, dataLen: 01, OK");
expectMultiline("remote",
                "",
                new String[] {
                  "READ_ATTR_RESP: \\(On/off\\)",
                  " - attr:4000, status:00",
                  "   type:10, val:01",
                });
expect("light", "DEFAULT_RESP: \\(On/off\\) cmd 01 status 00");

// Store a scene and then view it to make sure the extension field sets are
// behaving correctly.
send("remote", "zcl scenes store 0x0000 0x00");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: StoreScene 0x0000, 0x00");
expect("remote", "RX: StoreSceneResponse 0x00, 0x0000, 0x00");
expect("light", "DEFAULT_RESP: \\(Scenes\\) cmd 04 status 00");
send("remote", "zcl scenes view 0x0000 0x00");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: ViewScene 0x0000, 0x00");
expect("remote", "RX: ViewSceneResponse 0x00, 0x0000, 0x00, 0x00AF, \"\", \\[0x0006 0x01 [0-9a-fA-F]{2}\\] \\[0x0008 0x01 [0-9a-fA-F]{2}\\] \\[0x0300 0x04 [0-9a-fA-F]{8}\\]");
expect("light", "DEFAULT_RESP: \\(Scenes\\) cmd 01 status 00");

// Bug 14262: The scene table should be full on the light at this point.
// Removing one entry should drop the count by one and then resetting the light
// will clear the remaining entries and set the count to zero.
expect("light", "plugin scenes print", "using 0x08 out of 0x08 table slots");
expect("light", "read 0x01 0x0005 0x0000 1", "08 ");
send("remote", "zcl scenes remove 0xDEAD 0x00");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: RemoveScene 0xDEAD, 0x00");
expect("remote", "RX: RemoveSceneResponse 0x00, 0xDEAD, 0x00");
expect("light", "DEFAULT_RESP: \\(Scenes\\) cmd 02 status 00");
expect("light", "plugin scenes print", "using 0x07 out of 0x08 table slots");
expect("light", "read 0x01 0x0005 0x0000 1", "07 ");

// Clear all scenes table to prep for recall enhanced scene
send("remote", "zcl scenes rmall 0xDEAD");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: RemoveAllScenes 0xDEAD");
expect("remote", "RX: RemoveAllScenesResponse 0x00, 0xDEAD");
expect("light", "DEFAULT_RESP: \\(Scenes\\) cmd 03 status 00");

send("remote", "zcl scenes rmall 0x0000");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: RemoveAllScenes 0x0000");
expect("remote", "RX: RemoveAllScenesResponse 0x00, 0x0000");
expect("light", "DEFAULT_RESP: \\(Scenes\\) cmd 03 status 00");

// Recalling an enhanced scene should also zero out the current x & y 
send("remote", "raw 0x0005 {01 00 40 00 00 01 0A 00 04 74 65 73 74 00 03 0B AA AA BB BB 11 11 22 33 44 55 55}");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: EnhancedAddScene 0x0000, 0x01, 0x000A, \"test\", 00030BAAAABBBB11112233445555");
send("remote", "zcl scenes recall 0x0 0x1 0x0000");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: RecallScene 0x0000, 0x01");
assert(getAttribute("light", "0300", "0003").equals("AA AA"));
assert(getAttribute("light", "0300", "0004").equals("BB BB"));

send("remote", "raw 0x0005 {01 00 40 00 00 03 0A 00 04 74 65 73 74 00 03 0B 00 00 00 00 A1 A1 B2 C3 D4 E5 E5}");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: EnhancedAddScene 0x0000, 0x03, 0x000A, \"test\", 00030B00000000A1A1B2C3D4E5E5");
send("remote", "zcl scenes recall 0x0 0x3 0x0000");
send("remote", "send " + nid1 + " 1 1");
expect("light", "RX: RecallScene 0x0000, 0x03");
assert(getAttribute("light", "0300", "0003").equals("00 00"));
assert(getAttribute("light", "0300", "0004").equals("00 00"));
networkWait(timeout);   //delay to let default responses and aps acks go out.

// Resetting the light will clear all entries in the scene table and set the
// count to zero.
send("remote", "plugin zll-commissioning scan reset");
expect("light", ".*RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0xFFFF", timeout * 10);
expect("remote", "Touch link with 0x0002 \\(\\(>\\)" + eui64("light") + "\\) complete", timeout * 10);
expectMultiline("light",
                "",
                new String[] {
                  //"RX: IdentifyRequest 0x[0-9a-fA-F]{8}, 0x0000",
                  /* This next line comes out of order with the remote expect
                   * above, so comment out for now */
                  //".*RX: ResetToFactoryNewRequest 0x[0-9a-fA-F]{8}",
                  ".*EMBER_NETWORK_DOWN",
                });
expectMultiline("light", 
                "plugin scenes print", 
                new String[] {
                  "using 0x00 out of 0x08 table slots",
                });
expect("light", 
       "read 0x01 0x0005 0x0000 1",
       "00 ");

// Check ZLL library status
send("remote", "libs");
expect("remote", "ZLL library present", timeout);

